/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef mnsc_data_TYPES_H
#define mnsc_data_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>

#include "sgagent_common_types.h"




typedef class  ::SGService SGService;

typedef std::map<std::string, std::string>  HttpProperties;

typedef struct _MNSResponse__isset {
  _MNSResponse__isset() : defaultMNSCache(false), version(false) {}
  bool defaultMNSCache;
  bool version;
} _MNSResponse__isset;

class MNSResponse {
 public:

  static const char* ascii_fingerprint; // = "65C8F5662964359B2CADB6CD5B9E7CEB";
  static const uint8_t binary_fingerprint[16]; // = {0x65,0xC8,0xF5,0x66,0x29,0x64,0x35,0x9B,0x2C,0xAD,0xB6,0xCD,0x5B,0x9E,0x7C,0xEB};

  MNSResponse() : code(200), version("") {
  }

  virtual ~MNSResponse() throw() {}

  int32_t code;
  std::vector<SGService>  defaultMNSCache;
  std::string version;

  _MNSResponse__isset __isset;

  void __set_code(const int32_t val) {
    code = val;
  }

  void __set_defaultMNSCache(const std::vector<SGService> & val) {
    defaultMNSCache = val;
    __isset.defaultMNSCache = true;
  }

  void __set_version(const std::string& val) {
    version = val;
    __isset.version = true;
  }

  bool operator == (const MNSResponse & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (__isset.defaultMNSCache != rhs.__isset.defaultMNSCache)
      return false;
    else if (__isset.defaultMNSCache && !(defaultMNSCache == rhs.defaultMNSCache))
      return false;
    if (__isset.version != rhs.__isset.version)
      return false;
    else if (__isset.version && !(version == rhs.version))
      return false;
    return true;
  }
  bool operator != (const MNSResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AppKeyListResponse__isset {
  _AppKeyListResponse__isset() : appKeyList(false) {}
  bool appKeyList;
} _AppKeyListResponse__isset;

class AppKeyListResponse {
 public:

  static const char* ascii_fingerprint; // = "93CC3D1E71866966C22792AABF4C3815";
  static const uint8_t binary_fingerprint[16]; // = {0x93,0xCC,0x3D,0x1E,0x71,0x86,0x69,0x66,0xC2,0x27,0x92,0xAA,0xBF,0x4C,0x38,0x15};

  AppKeyListResponse() : code(200) {
  }

  virtual ~AppKeyListResponse() throw() {}

  int32_t code;
  std::vector<std::string>  appKeyList;

  _AppKeyListResponse__isset __isset;

  void __set_code(const int32_t val) {
    code = val;
  }

  void __set_appKeyList(const std::vector<std::string> & val) {
    appKeyList = val;
    __isset.appKeyList = true;
  }

  bool operator == (const AppKeyListResponse & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (__isset.appKeyList != rhs.__isset.appKeyList)
      return false;
    else if (__isset.appKeyList && !(appKeyList == rhs.appKeyList))
      return false;
    return true;
  }
  bool operator != (const AppKeyListResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AppKeyListResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HttpPropertiesResponse__isset {
  _HttpPropertiesResponse__isset() : propertiesMap(false) {}
  bool propertiesMap;
} _HttpPropertiesResponse__isset;

class HttpPropertiesResponse {
 public:

  static const char* ascii_fingerprint; // = "ED513D89046EBA5323735F654E017436";
  static const uint8_t binary_fingerprint[16]; // = {0xED,0x51,0x3D,0x89,0x04,0x6E,0xBA,0x53,0x23,0x73,0x5F,0x65,0x4E,0x01,0x74,0x36};

  HttpPropertiesResponse() : code(200) {
  }

  virtual ~HttpPropertiesResponse() throw() {}

  int32_t code;
  std::map<std::string, HttpProperties>  propertiesMap;

  _HttpPropertiesResponse__isset __isset;

  void __set_code(const int32_t val) {
    code = val;
  }

  void __set_propertiesMap(const std::map<std::string, HttpProperties> & val) {
    propertiesMap = val;
    __isset.propertiesMap = true;
  }

  bool operator == (const HttpPropertiesResponse & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (__isset.propertiesMap != rhs.__isset.propertiesMap)
      return false;
    else if (__isset.propertiesMap && !(propertiesMap == rhs.propertiesMap))
      return false;
    return true;
  }
  bool operator != (const HttpPropertiesResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HttpPropertiesResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HlbcService__isset {
  _HlbcService__isset() : ip(false), port(false), weight(false), status(false), failTimeout(false), maxFails(false), slowStart(false) {}
  bool ip;
  bool port;
  bool weight;
  bool status;
  bool failTimeout;
  bool maxFails;
  bool slowStart;
} _HlbcService__isset;

class HlbcService {
 public:

  static const char* ascii_fingerprint; // = "2B0927C8450D9BBDBC550F84F98E1386";
  static const uint8_t binary_fingerprint[16]; // = {0x2B,0x09,0x27,0xC8,0x45,0x0D,0x9B,0xBD,0xBC,0x55,0x0F,0x84,0xF9,0x8E,0x13,0x86};

  HlbcService() : ip(""), port(0), weight(0), status(0), failTimeout(0), maxFails(0), slowStart(0) {
  }

  virtual ~HlbcService() throw() {}

  std::string ip;
  int32_t port;
  int32_t weight;
  int32_t status;
  int32_t failTimeout;
  int32_t maxFails;
  int32_t slowStart;

  _HlbcService__isset __isset;

  void __set_ip(const std::string& val) {
    ip = val;
  }

  void __set_port(const int32_t val) {
    port = val;
  }

  void __set_weight(const int32_t val) {
    weight = val;
  }

  void __set_status(const int32_t val) {
    status = val;
  }

  void __set_failTimeout(const int32_t val) {
    failTimeout = val;
    __isset.failTimeout = true;
  }

  void __set_maxFails(const int32_t val) {
    maxFails = val;
    __isset.maxFails = true;
  }

  void __set_slowStart(const int32_t val) {
    slowStart = val;
    __isset.slowStart = true;
  }

  bool operator == (const HlbcService & rhs) const
  {
    if (!(ip == rhs.ip))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(weight == rhs.weight))
      return false;
    if (!(status == rhs.status))
      return false;
    if (__isset.failTimeout != rhs.__isset.failTimeout)
      return false;
    else if (__isset.failTimeout && !(failTimeout == rhs.failTimeout))
      return false;
    if (__isset.maxFails != rhs.__isset.maxFails)
      return false;
    else if (__isset.maxFails && !(maxFails == rhs.maxFails))
      return false;
    if (__isset.slowStart != rhs.__isset.slowStart)
      return false;
    else if (__isset.slowStart && !(slowStart == rhs.slowStart))
      return false;
    return true;
  }
  bool operator != (const HlbcService &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HlbcService & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HlbcHealthCheck__isset {
  _HlbcHealthCheck__isset() : healthCheckType(false), checkHttpSend(false), legacyCheckCmd(false) {}
  bool healthCheckType;
  bool checkHttpSend;
  bool legacyCheckCmd;
} _HlbcHealthCheck__isset;

class HlbcHealthCheck {
 public:

  static const char* ascii_fingerprint; // = "4BF81DD46A7371532E49811022D58D36";
  static const uint8_t binary_fingerprint[16]; // = {0x4B,0xF8,0x1D,0xD4,0x6A,0x73,0x71,0x53,0x2E,0x49,0x81,0x10,0x22,0xD5,0x8D,0x36};

  HlbcHealthCheck() : healthCheckType(""), checkHttpSend(""), legacyCheckCmd("") {
  }

  virtual ~HlbcHealthCheck() throw() {}

  std::string healthCheckType;
  std::string checkHttpSend;
  std::string legacyCheckCmd;

  _HlbcHealthCheck__isset __isset;

  void __set_healthCheckType(const std::string& val) {
    healthCheckType = val;
  }

  void __set_checkHttpSend(const std::string& val) {
    checkHttpSend = val;
    __isset.checkHttpSend = true;
  }

  void __set_legacyCheckCmd(const std::string& val) {
    legacyCheckCmd = val;
    __isset.legacyCheckCmd = true;
  }

  bool operator == (const HlbcHealthCheck & rhs) const
  {
    if (!(healthCheckType == rhs.healthCheckType))
      return false;
    if (__isset.checkHttpSend != rhs.__isset.checkHttpSend)
      return false;
    else if (__isset.checkHttpSend && !(checkHttpSend == rhs.checkHttpSend))
      return false;
    if (__isset.legacyCheckCmd != rhs.__isset.legacyCheckCmd)
      return false;
    else if (__isset.legacyCheckCmd && !(legacyCheckCmd == rhs.legacyCheckCmd))
      return false;
    return true;
  }
  bool operator != (const HlbcHealthCheck &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HlbcHealthCheck & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HttpUpstream__isset {
  _HttpUpstream__isset() : upstreamName(false), business(false), isGrey(false), scheduleStrategy(false), server(false), checkStrategy(false) {}
  bool upstreamName;
  bool business;
  bool isGrey;
  bool scheduleStrategy;
  bool server;
  bool checkStrategy;
} _HttpUpstream__isset;

class HttpUpstream {
 public:

  static const char* ascii_fingerprint; // = "3D437A80A0D7D22F97D51104FD01693E";
  static const uint8_t binary_fingerprint[16]; // = {0x3D,0x43,0x7A,0x80,0xA0,0xD7,0xD2,0x2F,0x97,0xD5,0x11,0x04,0xFD,0x01,0x69,0x3E};

  HttpUpstream() : upstreamName(""), business(0), isGrey(0) {
  }

  virtual ~HttpUpstream() throw() {}

  std::string upstreamName;
  int32_t business;
  int32_t isGrey;
  std::map<std::string, std::string>  scheduleStrategy;
  std::vector<HlbcService>  server;
  HlbcHealthCheck checkStrategy;

  _HttpUpstream__isset __isset;

  void __set_upstreamName(const std::string& val) {
    upstreamName = val;
  }

  void __set_business(const int32_t val) {
    business = val;
  }

  void __set_isGrey(const int32_t val) {
    isGrey = val;
  }

  void __set_scheduleStrategy(const std::map<std::string, std::string> & val) {
    scheduleStrategy = val;
    __isset.scheduleStrategy = true;
  }

  void __set_server(const std::vector<HlbcService> & val) {
    server = val;
  }

  void __set_checkStrategy(const HlbcHealthCheck& val) {
    checkStrategy = val;
    __isset.checkStrategy = true;
  }

  bool operator == (const HttpUpstream & rhs) const
  {
    if (!(upstreamName == rhs.upstreamName))
      return false;
    if (!(business == rhs.business))
      return false;
    if (!(isGrey == rhs.isGrey))
      return false;
    if (__isset.scheduleStrategy != rhs.__isset.scheduleStrategy)
      return false;
    else if (__isset.scheduleStrategy && !(scheduleStrategy == rhs.scheduleStrategy))
      return false;
    if (!(server == rhs.server))
      return false;
    if (__isset.checkStrategy != rhs.__isset.checkStrategy)
      return false;
    else if (__isset.checkStrategy && !(checkStrategy == rhs.checkStrategy))
      return false;
    return true;
  }
  bool operator != (const HttpUpstream &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HttpUpstream & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UpstreamDataResponse__isset {
  _UpstreamDataResponse__isset() : upstreams(false) {}
  bool upstreams;
} _UpstreamDataResponse__isset;

class UpstreamDataResponse {
 public:

  static const char* ascii_fingerprint; // = "7B1356AE4AB9EE78A449977A5DB0A36D";
  static const uint8_t binary_fingerprint[16]; // = {0x7B,0x13,0x56,0xAE,0x4A,0xB9,0xEE,0x78,0xA4,0x49,0x97,0x7A,0x5D,0xB0,0xA3,0x6D};

  UpstreamDataResponse() : code(200) {
  }

  virtual ~UpstreamDataResponse() throw() {}

  int32_t code;
  std::map<std::string, HttpUpstream>  upstreams;

  _UpstreamDataResponse__isset __isset;

  void __set_code(const int32_t val) {
    code = val;
  }

  void __set_upstreams(const std::map<std::string, HttpUpstream> & val) {
    upstreams = val;
  }

  bool operator == (const UpstreamDataResponse & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(upstreams == rhs.upstreams))
      return false;
    return true;
  }
  bool operator != (const UpstreamDataResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpstreamDataResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UpstreamResponse__isset {
  _UpstreamResponse__isset() : upstreams(false), ext(false) {}
  bool upstreams;
  bool ext;
} _UpstreamResponse__isset;

class UpstreamResponse {
 public:

  static const char* ascii_fingerprint; // = "20A57526680CA4CBC28C94966623FAC2";
  static const uint8_t binary_fingerprint[16]; // = {0x20,0xA5,0x75,0x26,0x68,0x0C,0xA4,0xCB,0xC2,0x8C,0x94,0x96,0x66,0x23,0xFA,0xC2};

  UpstreamResponse() : code(200), ext("") {
  }

  virtual ~UpstreamResponse() throw() {}

  int32_t code;
  std::map<std::string, std::string>  upstreams;
  std::string ext;

  _UpstreamResponse__isset __isset;

  void __set_code(const int32_t val) {
    code = val;
  }

  void __set_upstreams(const std::map<std::string, std::string> & val) {
    upstreams = val;
  }

  void __set_ext(const std::string& val) {
    ext = val;
  }

  bool operator == (const UpstreamResponse & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(upstreams == rhs.upstreams))
      return false;
    if (!(ext == rhs.ext))
      return false;
    return true;
  }
  bool operator != (const UpstreamResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpstreamResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HlbcLocation__isset {
  _HlbcLocation__isset() : locationPath(false), locationBlockCmd(false), proxyPass(false) {}
  bool locationPath;
  bool locationBlockCmd;
  bool proxyPass;
} _HlbcLocation__isset;

class HlbcLocation {
 public:

  static const char* ascii_fingerprint; // = "4BF81DD46A7371532E49811022D58D36";
  static const uint8_t binary_fingerprint[16]; // = {0x4B,0xF8,0x1D,0xD4,0x6A,0x73,0x71,0x53,0x2E,0x49,0x81,0x10,0x22,0xD5,0x8D,0x36};

  HlbcLocation() : locationPath(""), locationBlockCmd(""), proxyPass("") {
  }

  virtual ~HlbcLocation() throw() {}

  std::string locationPath;
  std::string locationBlockCmd;
  std::string proxyPass;

  _HlbcLocation__isset __isset;

  void __set_locationPath(const std::string& val) {
    locationPath = val;
  }

  void __set_locationBlockCmd(const std::string& val) {
    locationBlockCmd = val;
    __isset.locationBlockCmd = true;
  }

  void __set_proxyPass(const std::string& val) {
    proxyPass = val;
    __isset.proxyPass = true;
  }

  bool operator == (const HlbcLocation & rhs) const
  {
    if (!(locationPath == rhs.locationPath))
      return false;
    if (__isset.locationBlockCmd != rhs.__isset.locationBlockCmd)
      return false;
    else if (__isset.locationBlockCmd && !(locationBlockCmd == rhs.locationBlockCmd))
      return false;
    if (__isset.proxyPass != rhs.__isset.proxyPass)
      return false;
    else if (__isset.proxyPass && !(proxyPass == rhs.proxyPass))
      return false;
    return true;
  }
  bool operator != (const HlbcLocation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HlbcLocation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HlbcServer__isset {
  _HlbcServer__isset() : serverName(false), business(false), serverBlockCmd(false), locationList(false) {}
  bool serverName;
  bool business;
  bool serverBlockCmd;
  bool locationList;
} _HlbcServer__isset;

class HlbcServer {
 public:

  static const char* ascii_fingerprint; // = "BD37D466633538819DD8ECA925A74220";
  static const uint8_t binary_fingerprint[16]; // = {0xBD,0x37,0xD4,0x66,0x63,0x35,0x38,0x81,0x9D,0xD8,0xEC,0xA9,0x25,0xA7,0x42,0x20};

  HlbcServer() : serverName(""), business(0), serverBlockCmd("") {
  }

  virtual ~HlbcServer() throw() {}

  std::string serverName;
  int32_t business;
  std::string serverBlockCmd;
  std::vector<HlbcLocation>  locationList;

  _HlbcServer__isset __isset;

  void __set_serverName(const std::string& val) {
    serverName = val;
  }

  void __set_business(const int32_t val) {
    business = val;
  }

  void __set_serverBlockCmd(const std::string& val) {
    serverBlockCmd = val;
    __isset.serverBlockCmd = true;
  }

  void __set_locationList(const std::vector<HlbcLocation> & val) {
    locationList = val;
  }

  bool operator == (const HlbcServer & rhs) const
  {
    if (!(serverName == rhs.serverName))
      return false;
    if (!(business == rhs.business))
      return false;
    if (__isset.serverBlockCmd != rhs.__isset.serverBlockCmd)
      return false;
    else if (__isset.serverBlockCmd && !(serverBlockCmd == rhs.serverBlockCmd))
      return false;
    if (!(locationList == rhs.locationList))
      return false;
    return true;
  }
  bool operator != (const HlbcServer &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HlbcServer & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ServerDataResponse__isset {
  _ServerDataResponse__isset() : serverBlocks(false) {}
  bool serverBlocks;
} _ServerDataResponse__isset;

class ServerDataResponse {
 public:

  static const char* ascii_fingerprint; // = "EC2BC101620495291CDB8CA0CC8E7E14";
  static const uint8_t binary_fingerprint[16]; // = {0xEC,0x2B,0xC1,0x01,0x62,0x04,0x95,0x29,0x1C,0xDB,0x8C,0xA0,0xCC,0x8E,0x7E,0x14};

  ServerDataResponse() : code(200) {
  }

  virtual ~ServerDataResponse() throw() {}

  int32_t code;
  std::map<std::string, HlbcServer>  serverBlocks;

  _ServerDataResponse__isset __isset;

  void __set_code(const int32_t val) {
    code = val;
  }

  void __set_serverBlocks(const std::map<std::string, HlbcServer> & val) {
    serverBlocks = val;
  }

  bool operator == (const ServerDataResponse & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(serverBlocks == rhs.serverBlocks))
      return false;
    return true;
  }
  bool operator != (const ServerDataResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServerDataResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ServerBlockResponse__isset {
  _ServerBlockResponse__isset() : serverBlocks(false), ext(false) {}
  bool serverBlocks;
  bool ext;
} _ServerBlockResponse__isset;

class ServerBlockResponse {
 public:

  static const char* ascii_fingerprint; // = "20A57526680CA4CBC28C94966623FAC2";
  static const uint8_t binary_fingerprint[16]; // = {0x20,0xA5,0x75,0x26,0x68,0x0C,0xA4,0xCB,0xC2,0x8C,0x94,0x96,0x66,0x23,0xFA,0xC2};

  ServerBlockResponse() : code(200), ext("") {
  }

  virtual ~ServerBlockResponse() throw() {}

  int32_t code;
  std::map<std::string, std::string>  serverBlocks;
  std::string ext;

  _ServerBlockResponse__isset __isset;

  void __set_code(const int32_t val) {
    code = val;
  }

  void __set_serverBlocks(const std::map<std::string, std::string> & val) {
    serverBlocks = val;
  }

  void __set_ext(const std::string& val) {
    ext = val;
  }

  bool operator == (const ServerBlockResponse & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(serverBlocks == rhs.serverBlocks))
      return false;
    if (!(ext == rhs.ext))
      return false;
    return true;
  }
  bool operator != (const ServerBlockResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServerBlockResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
