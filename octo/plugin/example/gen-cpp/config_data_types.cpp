/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "config_data_types.h"



const char* PullRequest::ascii_fingerprint = "8EC78C0365E0B4A60DCD45CD4CDFBF4D";
const uint8_t PullRequest::binary_fingerprint[16] = {0x8E,0xC7,0x8C,0x03,0x65,0xE0,0xB4,0xA6,0x0D,0xCD,0x45,0xCD,0x4C,0xDF,0xBF,0x4D};

uint32_t PullRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->prID);
          this->__isset.prID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->note);
          this->__isset.note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->prMisID);
          this->__isset.prMisID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->appkey);
          this->__isset.appkey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->env);
          this->__isset.env = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->prTime);
          this->__isset.prTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PullRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PullRequest");
  xfer += oprot->writeFieldBegin("prID", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->prID);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("note", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->note);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("prMisID", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->prMisID);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->status);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("appkey", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->appkey);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("env", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->env);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("prTime", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->prTime);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* PRDetail::ascii_fingerprint = "3666855326828A45CAB2FBA2ECF88210";
const uint8_t PRDetail::binary_fingerprint[16] = {0x36,0x66,0x85,0x53,0x26,0x82,0x8A,0x45,0xCA,0xB2,0xFB,0xA2,0xEC,0xF8,0x82,0x10};

uint32_t PRDetail::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_key = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->prDetailID);
          this->__isset.prDetailID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->prID);
          this->__isset.prID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          isset_key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->newValue);
          this->__isset.newValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->oldValue);
          this->__isset.oldValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->newComment);
          this->__isset.newComment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->oldComment);
          this->__isset.oldComment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isDeleted);
          this->__isset.isDeleted = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_key)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PRDetail::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PRDetail");
  xfer += oprot->writeFieldBegin("prDetailID", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->prDetailID);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("prID", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->prID);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("newValue", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->newValue);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("oldValue", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->oldValue);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("newComment", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->newComment);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("oldComment", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->oldComment);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("isDeleted", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->isDeleted);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Review::ascii_fingerprint = "4EFD525DB97852951AD20DEF07C09D78";
const uint8_t Review::binary_fingerprint[16] = {0x4E,0xFD,0x52,0x5D,0xB9,0x78,0x52,0x95,0x1A,0xD2,0x0D,0xEF,0x07,0xC0,0x9D,0x78};

uint32_t Review::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->reviewID);
          this->__isset.reviewID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->prID);
          this->__isset.prID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->reviewerMisID);
          this->__isset.reviewerMisID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->note);
          this->__isset.note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->reviewTime);
          this->__isset.reviewTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->approve);
          this->__isset.approve = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Review::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Review");
  xfer += oprot->writeFieldBegin("reviewID", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->reviewID);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("prID", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->prID);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("reviewerMisID", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->reviewerMisID);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("note", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->note);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("reviewTime", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->reviewTime);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("approve", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->approve);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


