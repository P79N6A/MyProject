/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef config_data_TYPES_H
#define config_data_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>





typedef struct _PullRequest__isset {
  _PullRequest__isset() : prID(false), note(false), prMisID(false), status(false), appkey(false), env(false), prTime(false) {}
  bool prID;
  bool note;
  bool prMisID;
  bool status;
  bool appkey;
  bool env;
  bool prTime;
} _PullRequest__isset;

class PullRequest {
 public:

  static const char* ascii_fingerprint; // = "8EC78C0365E0B4A60DCD45CD4CDFBF4D";
  static const uint8_t binary_fingerprint[16]; // = {0x8E,0xC7,0x8C,0x03,0x65,0xE0,0xB4,0xA6,0x0D,0xCD,0x45,0xCD,0x4C,0xDF,0xBF,0x4D};

  PullRequest() : prID(0), note(""), prMisID(""), status(0), appkey(""), env(0), prTime(0) {
  }

  virtual ~PullRequest() throw() {}

  int64_t prID;
  std::string note;
  std::string prMisID;
  int32_t status;
  std::string appkey;
  int32_t env;
  int64_t prTime;

  _PullRequest__isset __isset;

  void __set_prID(const int64_t val) {
    prID = val;
  }

  void __set_note(const std::string& val) {
    note = val;
  }

  void __set_prMisID(const std::string& val) {
    prMisID = val;
  }

  void __set_status(const int32_t val) {
    status = val;
  }

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_env(const int32_t val) {
    env = val;
  }

  void __set_prTime(const int64_t val) {
    prTime = val;
  }

  bool operator == (const PullRequest & rhs) const
  {
    if (!(prID == rhs.prID))
      return false;
    if (!(note == rhs.note))
      return false;
    if (!(prMisID == rhs.prMisID))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(appkey == rhs.appkey))
      return false;
    if (!(env == rhs.env))
      return false;
    if (!(prTime == rhs.prTime))
      return false;
    return true;
  }
  bool operator != (const PullRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PullRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PRDetail__isset {
  _PRDetail__isset() : prDetailID(false), prID(false), newValue(false), oldValue(false), newComment(false), oldComment(false), isDeleted(false) {}
  bool prDetailID;
  bool prID;
  bool newValue;
  bool oldValue;
  bool newComment;
  bool oldComment;
  bool isDeleted;
} _PRDetail__isset;

class PRDetail {
 public:

  static const char* ascii_fingerprint; // = "3666855326828A45CAB2FBA2ECF88210";
  static const uint8_t binary_fingerprint[16]; // = {0x36,0x66,0x85,0x53,0x26,0x82,0x8A,0x45,0xCA,0xB2,0xFB,0xA2,0xEC,0xF8,0x82,0x10};

  PRDetail() : prDetailID(0), prID(0), key(""), newValue(""), oldValue(""), newComment(""), oldComment(""), isDeleted(0) {
  }

  virtual ~PRDetail() throw() {}

  int64_t prDetailID;
  int64_t prID;
  std::string key;
  std::string newValue;
  std::string oldValue;
  std::string newComment;
  std::string oldComment;
  bool isDeleted;

  _PRDetail__isset __isset;

  void __set_prDetailID(const int64_t val) {
    prDetailID = val;
  }

  void __set_prID(const int64_t val) {
    prID = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_newValue(const std::string& val) {
    newValue = val;
  }

  void __set_oldValue(const std::string& val) {
    oldValue = val;
  }

  void __set_newComment(const std::string& val) {
    newComment = val;
  }

  void __set_oldComment(const std::string& val) {
    oldComment = val;
  }

  void __set_isDeleted(const bool val) {
    isDeleted = val;
  }

  bool operator == (const PRDetail & rhs) const
  {
    if (!(prDetailID == rhs.prDetailID))
      return false;
    if (!(prID == rhs.prID))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(newValue == rhs.newValue))
      return false;
    if (!(oldValue == rhs.oldValue))
      return false;
    if (!(newComment == rhs.newComment))
      return false;
    if (!(oldComment == rhs.oldComment))
      return false;
    if (!(isDeleted == rhs.isDeleted))
      return false;
    return true;
  }
  bool operator != (const PRDetail &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PRDetail & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Review__isset {
  _Review__isset() : reviewID(false), prID(false), reviewerMisID(false), note(false), reviewTime(false), approve(false) {}
  bool reviewID;
  bool prID;
  bool reviewerMisID;
  bool note;
  bool reviewTime;
  bool approve;
} _Review__isset;

class Review {
 public:

  static const char* ascii_fingerprint; // = "4EFD525DB97852951AD20DEF07C09D78";
  static const uint8_t binary_fingerprint[16]; // = {0x4E,0xFD,0x52,0x5D,0xB9,0x78,0x52,0x95,0x1A,0xD2,0x0D,0xEF,0x07,0xC0,0x9D,0x78};

  Review() : reviewID(0), prID(0), reviewerMisID(""), note(""), reviewTime(0), approve(0) {
  }

  virtual ~Review() throw() {}

  int64_t reviewID;
  int64_t prID;
  std::string reviewerMisID;
  std::string note;
  int64_t reviewTime;
  int32_t approve;

  _Review__isset __isset;

  void __set_reviewID(const int64_t val) {
    reviewID = val;
  }

  void __set_prID(const int64_t val) {
    prID = val;
  }

  void __set_reviewerMisID(const std::string& val) {
    reviewerMisID = val;
  }

  void __set_note(const std::string& val) {
    note = val;
  }

  void __set_reviewTime(const int64_t val) {
    reviewTime = val;
  }

  void __set_approve(const int32_t val) {
    approve = val;
  }

  bool operator == (const Review & rhs) const
  {
    if (!(reviewID == rhs.reviewID))
      return false;
    if (!(prID == rhs.prID))
      return false;
    if (!(reviewerMisID == rhs.reviewerMisID))
      return false;
    if (!(note == rhs.note))
      return false;
    if (!(reviewTime == rhs.reviewTime))
      return false;
    if (!(approve == rhs.approve))
      return false;
    return true;
  }
  bool operator != (const Review &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Review & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
