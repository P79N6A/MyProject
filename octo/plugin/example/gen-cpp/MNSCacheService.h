/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MNSCacheService_H
#define MNSCacheService_H

#include <TProcessor.h>
#include "mnsc_service_types.h"



class MNSCacheServiceIf {
 public:
  virtual ~MNSCacheServiceIf() {}
  virtual void getMNSCache(MNSResponse& _return, const std::string& appkey, const std::string& version, const std::string& env) = 0;
  virtual void getMNSCache4HLB(MNSResponse& _return, const std::string& appkey, const std::string& version, const std::string& env) = 0;
  virtual void getAppKeyListByBusinessLine(AppKeyListResponse& _return, const int32_t bizCode, const std::string& env) = 0;
  virtual void getHttpPropertiesByBusinessLine(HttpPropertiesResponse& _return, const int32_t bizCode, const std::string& env) = 0;
  virtual void getHttpPropertiesByAppkey(HttpPropertiesResponse& _return, const std::string& appkey, const std::string& env) = 0;
  virtual void getHlbUpstream(UpstreamResponse& _return, const std::string& nginx_type, const std::string& idc_type, const std::string& env) = 0;
  virtual void getHlbUpstreamData(UpstreamDataResponse& _return, const std::string& nginx_type, const std::string& idc_type, const std::string& env) = 0;
  virtual void getHLBCDyup(UpstreamResponse& _return, const std::string& duyp_name, const std::string& env) = 0;
  virtual void getHLBCDyupData(UpstreamDataResponse& _return, const std::string& dyup_name, const std::string& env) = 0;
  virtual void getHLBCDyupByEnv(UpstreamResponse& _return, const std::string& env) = 0;
  virtual void getHLBCDyupDataByEnv(UpstreamDataResponse& _return, const std::string& env) = 0;
  virtual void getHLBCServerBlockByDomainName(ServerBlockResponse& _return, const std::string& serverName, const std::string& env) = 0;
  virtual void getHLBCServerDataByDomainName(ServerDataResponse& _return, const std::string& serverName, const std::string& env) = 0;
  virtual void getHLBCServerBlockByBusinessLine(ServerBlockResponse& _return, const int32_t bizCode, const std::string& env) = 0;
  virtual void getHLBCServerDataByBusinessLine(ServerDataResponse& _return, const int32_t bizCode, const std::string& env) = 0;
  virtual void getHLBCDyupListByIp(std::vector<std::string> & _return, const std::string& ip) = 0;
  virtual void getHLBCDyupDataListByIp(std::vector< ::HttpUpstream> & _return, const std::string& ip) = 0;
  virtual void getHLBCServerBlockListByDyupName(std::vector<std::string> & _return, const std::string& dyupName, const std::string& env) = 0;
  virtual void getHLBCServerDataListByDyupName(std::vector< ::HlbcServer> & _return, const std::string& dyupName, const std::string& env) = 0;
  virtual void getSandbox(SandboxResponse& _return, const std::string& appkey, const std::string& env) = 0;
  virtual bool saveSandbox(const std::string& id, const std::string& env, const std::string& data) = 0;
  virtual bool deleteSandbox(const std::string& id, const std::string& env) = 0;
  virtual void getSandboxConfig(std::vector<SandboxConfig> & _return, const std::vector<std::string> & appkeys, const std::string& env) = 0;
  virtual void getProvidersByIP(MNSResponse& _return, const std::string& ip) = 0;
  virtual bool delProvider(const std::string& appkey, const int32_t env, const int32_t serverType, const std::string& ip, const int32_t port) = 0;
};

class MNSCacheServiceIfFactory {
 public:
  typedef MNSCacheServiceIf Handler;

  virtual ~MNSCacheServiceIfFactory() {}

  virtual MNSCacheServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MNSCacheServiceIf* /* handler */) = 0;
};

class MNSCacheServiceIfSingletonFactory : virtual public MNSCacheServiceIfFactory {
 public:
  MNSCacheServiceIfSingletonFactory(const boost::shared_ptr<MNSCacheServiceIf>& iface) : iface_(iface) {}
  virtual ~MNSCacheServiceIfSingletonFactory() {}

  virtual MNSCacheServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MNSCacheServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<MNSCacheServiceIf> iface_;
};

class MNSCacheServiceNull : virtual public MNSCacheServiceIf {
 public:
  virtual ~MNSCacheServiceNull() {}
  void getMNSCache(MNSResponse& /* _return */, const std::string& /* appkey */, const std::string& /* version */, const std::string& /* env */) {
    return;
  }
  void getMNSCache4HLB(MNSResponse& /* _return */, const std::string& /* appkey */, const std::string& /* version */, const std::string& /* env */) {
    return;
  }
  void getAppKeyListByBusinessLine(AppKeyListResponse& /* _return */, const int32_t /* bizCode */, const std::string& /* env */) {
    return;
  }
  void getHttpPropertiesByBusinessLine(HttpPropertiesResponse& /* _return */, const int32_t /* bizCode */, const std::string& /* env */) {
    return;
  }
  void getHttpPropertiesByAppkey(HttpPropertiesResponse& /* _return */, const std::string& /* appkey */, const std::string& /* env */) {
    return;
  }
  void getHlbUpstream(UpstreamResponse& /* _return */, const std::string& /* nginx_type */, const std::string& /* idc_type */, const std::string& /* env */) {
    return;
  }
  void getHlbUpstreamData(UpstreamDataResponse& /* _return */, const std::string& /* nginx_type */, const std::string& /* idc_type */, const std::string& /* env */) {
    return;
  }
  void getHLBCDyup(UpstreamResponse& /* _return */, const std::string& /* duyp_name */, const std::string& /* env */) {
    return;
  }
  void getHLBCDyupData(UpstreamDataResponse& /* _return */, const std::string& /* dyup_name */, const std::string& /* env */) {
    return;
  }
  void getHLBCDyupByEnv(UpstreamResponse& /* _return */, const std::string& /* env */) {
    return;
  }
  void getHLBCDyupDataByEnv(UpstreamDataResponse& /* _return */, const std::string& /* env */) {
    return;
  }
  void getHLBCServerBlockByDomainName(ServerBlockResponse& /* _return */, const std::string& /* serverName */, const std::string& /* env */) {
    return;
  }
  void getHLBCServerDataByDomainName(ServerDataResponse& /* _return */, const std::string& /* serverName */, const std::string& /* env */) {
    return;
  }
  void getHLBCServerBlockByBusinessLine(ServerBlockResponse& /* _return */, const int32_t /* bizCode */, const std::string& /* env */) {
    return;
  }
  void getHLBCServerDataByBusinessLine(ServerDataResponse& /* _return */, const int32_t /* bizCode */, const std::string& /* env */) {
    return;
  }
  void getHLBCDyupListByIp(std::vector<std::string> & /* _return */, const std::string& /* ip */) {
    return;
  }
  void getHLBCDyupDataListByIp(std::vector< ::HttpUpstream> & /* _return */, const std::string& /* ip */) {
    return;
  }
  void getHLBCServerBlockListByDyupName(std::vector<std::string> & /* _return */, const std::string& /* dyupName */, const std::string& /* env */) {
    return;
  }
  void getHLBCServerDataListByDyupName(std::vector< ::HlbcServer> & /* _return */, const std::string& /* dyupName */, const std::string& /* env */) {
    return;
  }
  void getSandbox(SandboxResponse& /* _return */, const std::string& /* appkey */, const std::string& /* env */) {
    return;
  }
  bool saveSandbox(const std::string& /* id */, const std::string& /* env */, const std::string& /* data */) {
    bool _return = false;
    return _return;
  }
  bool deleteSandbox(const std::string& /* id */, const std::string& /* env */) {
    bool _return = false;
    return _return;
  }
  void getSandboxConfig(std::vector<SandboxConfig> & /* _return */, const std::vector<std::string> & /* appkeys */, const std::string& /* env */) {
    return;
  }
  void getProvidersByIP(MNSResponse& /* _return */, const std::string& /* ip */) {
    return;
  }
  bool delProvider(const std::string& /* appkey */, const int32_t /* env */, const int32_t /* serverType */, const std::string& /* ip */, const int32_t /* port */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _MNSCacheService_getMNSCache_args__isset {
  _MNSCacheService_getMNSCache_args__isset() : appkey(false), version(false), env(false) {}
  bool appkey;
  bool version;
  bool env;
} _MNSCacheService_getMNSCache_args__isset;

class MNSCacheService_getMNSCache_args {
 public:

  MNSCacheService_getMNSCache_args() : appkey(""), version(""), env("") {
  }

  virtual ~MNSCacheService_getMNSCache_args() throw() {}

  std::string appkey;
  std::string version;
  std::string env;

  _MNSCacheService_getMNSCache_args__isset __isset;

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_version(const std::string& val) {
    version = val;
  }

  void __set_env(const std::string& val) {
    env = val;
  }

  bool operator == (const MNSCacheService_getMNSCache_args & rhs) const
  {
    if (!(appkey == rhs.appkey))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(env == rhs.env))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getMNSCache_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getMNSCache_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MNSCacheService_getMNSCache_pargs {
 public:


  virtual ~MNSCacheService_getMNSCache_pargs() throw() {}

  const std::string* appkey;
  const std::string* version;
  const std::string* env;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getMNSCache_result__isset {
  _MNSCacheService_getMNSCache_result__isset() : success(false) {}
  bool success;
} _MNSCacheService_getMNSCache_result__isset;

class MNSCacheService_getMNSCache_result {
 public:

  MNSCacheService_getMNSCache_result() {
  }

  virtual ~MNSCacheService_getMNSCache_result() throw() {}

  MNSResponse success;

  _MNSCacheService_getMNSCache_result__isset __isset;

  void __set_success(const MNSResponse& val) {
    success = val;
  }

  bool operator == (const MNSCacheService_getMNSCache_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getMNSCache_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getMNSCache_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getMNSCache_presult__isset {
  _MNSCacheService_getMNSCache_presult__isset() : success(false) {}
  bool success;
} _MNSCacheService_getMNSCache_presult__isset;

class MNSCacheService_getMNSCache_presult {
 public:


  virtual ~MNSCacheService_getMNSCache_presult() throw() {}

  MNSResponse* success;

  _MNSCacheService_getMNSCache_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MNSCacheService_getMNSCache4HLB_args__isset {
  _MNSCacheService_getMNSCache4HLB_args__isset() : appkey(false), version(false), env(false) {}
  bool appkey;
  bool version;
  bool env;
} _MNSCacheService_getMNSCache4HLB_args__isset;

class MNSCacheService_getMNSCache4HLB_args {
 public:

  MNSCacheService_getMNSCache4HLB_args() : appkey(""), version(""), env("") {
  }

  virtual ~MNSCacheService_getMNSCache4HLB_args() throw() {}

  std::string appkey;
  std::string version;
  std::string env;

  _MNSCacheService_getMNSCache4HLB_args__isset __isset;

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_version(const std::string& val) {
    version = val;
  }

  void __set_env(const std::string& val) {
    env = val;
  }

  bool operator == (const MNSCacheService_getMNSCache4HLB_args & rhs) const
  {
    if (!(appkey == rhs.appkey))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(env == rhs.env))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getMNSCache4HLB_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getMNSCache4HLB_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MNSCacheService_getMNSCache4HLB_pargs {
 public:


  virtual ~MNSCacheService_getMNSCache4HLB_pargs() throw() {}

  const std::string* appkey;
  const std::string* version;
  const std::string* env;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getMNSCache4HLB_result__isset {
  _MNSCacheService_getMNSCache4HLB_result__isset() : success(false) {}
  bool success;
} _MNSCacheService_getMNSCache4HLB_result__isset;

class MNSCacheService_getMNSCache4HLB_result {
 public:

  MNSCacheService_getMNSCache4HLB_result() {
  }

  virtual ~MNSCacheService_getMNSCache4HLB_result() throw() {}

  MNSResponse success;

  _MNSCacheService_getMNSCache4HLB_result__isset __isset;

  void __set_success(const MNSResponse& val) {
    success = val;
  }

  bool operator == (const MNSCacheService_getMNSCache4HLB_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getMNSCache4HLB_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getMNSCache4HLB_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getMNSCache4HLB_presult__isset {
  _MNSCacheService_getMNSCache4HLB_presult__isset() : success(false) {}
  bool success;
} _MNSCacheService_getMNSCache4HLB_presult__isset;

class MNSCacheService_getMNSCache4HLB_presult {
 public:


  virtual ~MNSCacheService_getMNSCache4HLB_presult() throw() {}

  MNSResponse* success;

  _MNSCacheService_getMNSCache4HLB_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MNSCacheService_getAppKeyListByBusinessLine_args__isset {
  _MNSCacheService_getAppKeyListByBusinessLine_args__isset() : bizCode(false), env(false) {}
  bool bizCode;
  bool env;
} _MNSCacheService_getAppKeyListByBusinessLine_args__isset;

class MNSCacheService_getAppKeyListByBusinessLine_args {
 public:

  MNSCacheService_getAppKeyListByBusinessLine_args() : bizCode(0), env("") {
  }

  virtual ~MNSCacheService_getAppKeyListByBusinessLine_args() throw() {}

  int32_t bizCode;
  std::string env;

  _MNSCacheService_getAppKeyListByBusinessLine_args__isset __isset;

  void __set_bizCode(const int32_t val) {
    bizCode = val;
  }

  void __set_env(const std::string& val) {
    env = val;
  }

  bool operator == (const MNSCacheService_getAppKeyListByBusinessLine_args & rhs) const
  {
    if (!(bizCode == rhs.bizCode))
      return false;
    if (!(env == rhs.env))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getAppKeyListByBusinessLine_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getAppKeyListByBusinessLine_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MNSCacheService_getAppKeyListByBusinessLine_pargs {
 public:


  virtual ~MNSCacheService_getAppKeyListByBusinessLine_pargs() throw() {}

  const int32_t* bizCode;
  const std::string* env;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getAppKeyListByBusinessLine_result__isset {
  _MNSCacheService_getAppKeyListByBusinessLine_result__isset() : success(false) {}
  bool success;
} _MNSCacheService_getAppKeyListByBusinessLine_result__isset;

class MNSCacheService_getAppKeyListByBusinessLine_result {
 public:

  MNSCacheService_getAppKeyListByBusinessLine_result() {
  }

  virtual ~MNSCacheService_getAppKeyListByBusinessLine_result() throw() {}

  AppKeyListResponse success;

  _MNSCacheService_getAppKeyListByBusinessLine_result__isset __isset;

  void __set_success(const AppKeyListResponse& val) {
    success = val;
  }

  bool operator == (const MNSCacheService_getAppKeyListByBusinessLine_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getAppKeyListByBusinessLine_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getAppKeyListByBusinessLine_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getAppKeyListByBusinessLine_presult__isset {
  _MNSCacheService_getAppKeyListByBusinessLine_presult__isset() : success(false) {}
  bool success;
} _MNSCacheService_getAppKeyListByBusinessLine_presult__isset;

class MNSCacheService_getAppKeyListByBusinessLine_presult {
 public:


  virtual ~MNSCacheService_getAppKeyListByBusinessLine_presult() throw() {}

  AppKeyListResponse* success;

  _MNSCacheService_getAppKeyListByBusinessLine_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MNSCacheService_getHttpPropertiesByBusinessLine_args__isset {
  _MNSCacheService_getHttpPropertiesByBusinessLine_args__isset() : bizCode(false), env(false) {}
  bool bizCode;
  bool env;
} _MNSCacheService_getHttpPropertiesByBusinessLine_args__isset;

class MNSCacheService_getHttpPropertiesByBusinessLine_args {
 public:

  MNSCacheService_getHttpPropertiesByBusinessLine_args() : bizCode(0), env("") {
  }

  virtual ~MNSCacheService_getHttpPropertiesByBusinessLine_args() throw() {}

  int32_t bizCode;
  std::string env;

  _MNSCacheService_getHttpPropertiesByBusinessLine_args__isset __isset;

  void __set_bizCode(const int32_t val) {
    bizCode = val;
  }

  void __set_env(const std::string& val) {
    env = val;
  }

  bool operator == (const MNSCacheService_getHttpPropertiesByBusinessLine_args & rhs) const
  {
    if (!(bizCode == rhs.bizCode))
      return false;
    if (!(env == rhs.env))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getHttpPropertiesByBusinessLine_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getHttpPropertiesByBusinessLine_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MNSCacheService_getHttpPropertiesByBusinessLine_pargs {
 public:


  virtual ~MNSCacheService_getHttpPropertiesByBusinessLine_pargs() throw() {}

  const int32_t* bizCode;
  const std::string* env;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getHttpPropertiesByBusinessLine_result__isset {
  _MNSCacheService_getHttpPropertiesByBusinessLine_result__isset() : success(false) {}
  bool success;
} _MNSCacheService_getHttpPropertiesByBusinessLine_result__isset;

class MNSCacheService_getHttpPropertiesByBusinessLine_result {
 public:

  MNSCacheService_getHttpPropertiesByBusinessLine_result() {
  }

  virtual ~MNSCacheService_getHttpPropertiesByBusinessLine_result() throw() {}

  HttpPropertiesResponse success;

  _MNSCacheService_getHttpPropertiesByBusinessLine_result__isset __isset;

  void __set_success(const HttpPropertiesResponse& val) {
    success = val;
  }

  bool operator == (const MNSCacheService_getHttpPropertiesByBusinessLine_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getHttpPropertiesByBusinessLine_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getHttpPropertiesByBusinessLine_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getHttpPropertiesByBusinessLine_presult__isset {
  _MNSCacheService_getHttpPropertiesByBusinessLine_presult__isset() : success(false) {}
  bool success;
} _MNSCacheService_getHttpPropertiesByBusinessLine_presult__isset;

class MNSCacheService_getHttpPropertiesByBusinessLine_presult {
 public:


  virtual ~MNSCacheService_getHttpPropertiesByBusinessLine_presult() throw() {}

  HttpPropertiesResponse* success;

  _MNSCacheService_getHttpPropertiesByBusinessLine_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MNSCacheService_getHttpPropertiesByAppkey_args__isset {
  _MNSCacheService_getHttpPropertiesByAppkey_args__isset() : appkey(false), env(false) {}
  bool appkey;
  bool env;
} _MNSCacheService_getHttpPropertiesByAppkey_args__isset;

class MNSCacheService_getHttpPropertiesByAppkey_args {
 public:

  MNSCacheService_getHttpPropertiesByAppkey_args() : appkey(""), env("") {
  }

  virtual ~MNSCacheService_getHttpPropertiesByAppkey_args() throw() {}

  std::string appkey;
  std::string env;

  _MNSCacheService_getHttpPropertiesByAppkey_args__isset __isset;

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_env(const std::string& val) {
    env = val;
  }

  bool operator == (const MNSCacheService_getHttpPropertiesByAppkey_args & rhs) const
  {
    if (!(appkey == rhs.appkey))
      return false;
    if (!(env == rhs.env))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getHttpPropertiesByAppkey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getHttpPropertiesByAppkey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MNSCacheService_getHttpPropertiesByAppkey_pargs {
 public:


  virtual ~MNSCacheService_getHttpPropertiesByAppkey_pargs() throw() {}

  const std::string* appkey;
  const std::string* env;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getHttpPropertiesByAppkey_result__isset {
  _MNSCacheService_getHttpPropertiesByAppkey_result__isset() : success(false) {}
  bool success;
} _MNSCacheService_getHttpPropertiesByAppkey_result__isset;

class MNSCacheService_getHttpPropertiesByAppkey_result {
 public:

  MNSCacheService_getHttpPropertiesByAppkey_result() {
  }

  virtual ~MNSCacheService_getHttpPropertiesByAppkey_result() throw() {}

  HttpPropertiesResponse success;

  _MNSCacheService_getHttpPropertiesByAppkey_result__isset __isset;

  void __set_success(const HttpPropertiesResponse& val) {
    success = val;
  }

  bool operator == (const MNSCacheService_getHttpPropertiesByAppkey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getHttpPropertiesByAppkey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getHttpPropertiesByAppkey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getHttpPropertiesByAppkey_presult__isset {
  _MNSCacheService_getHttpPropertiesByAppkey_presult__isset() : success(false) {}
  bool success;
} _MNSCacheService_getHttpPropertiesByAppkey_presult__isset;

class MNSCacheService_getHttpPropertiesByAppkey_presult {
 public:


  virtual ~MNSCacheService_getHttpPropertiesByAppkey_presult() throw() {}

  HttpPropertiesResponse* success;

  _MNSCacheService_getHttpPropertiesByAppkey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MNSCacheService_getHlbUpstream_args__isset {
  _MNSCacheService_getHlbUpstream_args__isset() : nginx_type(false), idc_type(false), env(false) {}
  bool nginx_type;
  bool idc_type;
  bool env;
} _MNSCacheService_getHlbUpstream_args__isset;

class MNSCacheService_getHlbUpstream_args {
 public:

  MNSCacheService_getHlbUpstream_args() : nginx_type(""), idc_type(""), env("") {
  }

  virtual ~MNSCacheService_getHlbUpstream_args() throw() {}

  std::string nginx_type;
  std::string idc_type;
  std::string env;

  _MNSCacheService_getHlbUpstream_args__isset __isset;

  void __set_nginx_type(const std::string& val) {
    nginx_type = val;
  }

  void __set_idc_type(const std::string& val) {
    idc_type = val;
  }

  void __set_env(const std::string& val) {
    env = val;
  }

  bool operator == (const MNSCacheService_getHlbUpstream_args & rhs) const
  {
    if (!(nginx_type == rhs.nginx_type))
      return false;
    if (!(idc_type == rhs.idc_type))
      return false;
    if (!(env == rhs.env))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getHlbUpstream_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getHlbUpstream_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MNSCacheService_getHlbUpstream_pargs {
 public:


  virtual ~MNSCacheService_getHlbUpstream_pargs() throw() {}

  const std::string* nginx_type;
  const std::string* idc_type;
  const std::string* env;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getHlbUpstream_result__isset {
  _MNSCacheService_getHlbUpstream_result__isset() : success(false) {}
  bool success;
} _MNSCacheService_getHlbUpstream_result__isset;

class MNSCacheService_getHlbUpstream_result {
 public:

  MNSCacheService_getHlbUpstream_result() {
  }

  virtual ~MNSCacheService_getHlbUpstream_result() throw() {}

  UpstreamResponse success;

  _MNSCacheService_getHlbUpstream_result__isset __isset;

  void __set_success(const UpstreamResponse& val) {
    success = val;
  }

  bool operator == (const MNSCacheService_getHlbUpstream_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getHlbUpstream_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getHlbUpstream_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getHlbUpstream_presult__isset {
  _MNSCacheService_getHlbUpstream_presult__isset() : success(false) {}
  bool success;
} _MNSCacheService_getHlbUpstream_presult__isset;

class MNSCacheService_getHlbUpstream_presult {
 public:


  virtual ~MNSCacheService_getHlbUpstream_presult() throw() {}

  UpstreamResponse* success;

  _MNSCacheService_getHlbUpstream_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MNSCacheService_getHlbUpstreamData_args__isset {
  _MNSCacheService_getHlbUpstreamData_args__isset() : nginx_type(false), idc_type(false), env(false) {}
  bool nginx_type;
  bool idc_type;
  bool env;
} _MNSCacheService_getHlbUpstreamData_args__isset;

class MNSCacheService_getHlbUpstreamData_args {
 public:

  MNSCacheService_getHlbUpstreamData_args() : nginx_type(""), idc_type(""), env("") {
  }

  virtual ~MNSCacheService_getHlbUpstreamData_args() throw() {}

  std::string nginx_type;
  std::string idc_type;
  std::string env;

  _MNSCacheService_getHlbUpstreamData_args__isset __isset;

  void __set_nginx_type(const std::string& val) {
    nginx_type = val;
  }

  void __set_idc_type(const std::string& val) {
    idc_type = val;
  }

  void __set_env(const std::string& val) {
    env = val;
  }

  bool operator == (const MNSCacheService_getHlbUpstreamData_args & rhs) const
  {
    if (!(nginx_type == rhs.nginx_type))
      return false;
    if (!(idc_type == rhs.idc_type))
      return false;
    if (!(env == rhs.env))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getHlbUpstreamData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getHlbUpstreamData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MNSCacheService_getHlbUpstreamData_pargs {
 public:


  virtual ~MNSCacheService_getHlbUpstreamData_pargs() throw() {}

  const std::string* nginx_type;
  const std::string* idc_type;
  const std::string* env;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getHlbUpstreamData_result__isset {
  _MNSCacheService_getHlbUpstreamData_result__isset() : success(false) {}
  bool success;
} _MNSCacheService_getHlbUpstreamData_result__isset;

class MNSCacheService_getHlbUpstreamData_result {
 public:

  MNSCacheService_getHlbUpstreamData_result() {
  }

  virtual ~MNSCacheService_getHlbUpstreamData_result() throw() {}

  UpstreamDataResponse success;

  _MNSCacheService_getHlbUpstreamData_result__isset __isset;

  void __set_success(const UpstreamDataResponse& val) {
    success = val;
  }

  bool operator == (const MNSCacheService_getHlbUpstreamData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getHlbUpstreamData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getHlbUpstreamData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getHlbUpstreamData_presult__isset {
  _MNSCacheService_getHlbUpstreamData_presult__isset() : success(false) {}
  bool success;
} _MNSCacheService_getHlbUpstreamData_presult__isset;

class MNSCacheService_getHlbUpstreamData_presult {
 public:


  virtual ~MNSCacheService_getHlbUpstreamData_presult() throw() {}

  UpstreamDataResponse* success;

  _MNSCacheService_getHlbUpstreamData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MNSCacheService_getHLBCDyup_args__isset {
  _MNSCacheService_getHLBCDyup_args__isset() : duyp_name(false), env(false) {}
  bool duyp_name;
  bool env;
} _MNSCacheService_getHLBCDyup_args__isset;

class MNSCacheService_getHLBCDyup_args {
 public:

  MNSCacheService_getHLBCDyup_args() : duyp_name(""), env("") {
  }

  virtual ~MNSCacheService_getHLBCDyup_args() throw() {}

  std::string duyp_name;
  std::string env;

  _MNSCacheService_getHLBCDyup_args__isset __isset;

  void __set_duyp_name(const std::string& val) {
    duyp_name = val;
  }

  void __set_env(const std::string& val) {
    env = val;
  }

  bool operator == (const MNSCacheService_getHLBCDyup_args & rhs) const
  {
    if (!(duyp_name == rhs.duyp_name))
      return false;
    if (!(env == rhs.env))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getHLBCDyup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getHLBCDyup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MNSCacheService_getHLBCDyup_pargs {
 public:


  virtual ~MNSCacheService_getHLBCDyup_pargs() throw() {}

  const std::string* duyp_name;
  const std::string* env;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getHLBCDyup_result__isset {
  _MNSCacheService_getHLBCDyup_result__isset() : success(false) {}
  bool success;
} _MNSCacheService_getHLBCDyup_result__isset;

class MNSCacheService_getHLBCDyup_result {
 public:

  MNSCacheService_getHLBCDyup_result() {
  }

  virtual ~MNSCacheService_getHLBCDyup_result() throw() {}

  UpstreamResponse success;

  _MNSCacheService_getHLBCDyup_result__isset __isset;

  void __set_success(const UpstreamResponse& val) {
    success = val;
  }

  bool operator == (const MNSCacheService_getHLBCDyup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getHLBCDyup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getHLBCDyup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getHLBCDyup_presult__isset {
  _MNSCacheService_getHLBCDyup_presult__isset() : success(false) {}
  bool success;
} _MNSCacheService_getHLBCDyup_presult__isset;

class MNSCacheService_getHLBCDyup_presult {
 public:


  virtual ~MNSCacheService_getHLBCDyup_presult() throw() {}

  UpstreamResponse* success;

  _MNSCacheService_getHLBCDyup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MNSCacheService_getHLBCDyupData_args__isset {
  _MNSCacheService_getHLBCDyupData_args__isset() : dyup_name(false), env(false) {}
  bool dyup_name;
  bool env;
} _MNSCacheService_getHLBCDyupData_args__isset;

class MNSCacheService_getHLBCDyupData_args {
 public:

  MNSCacheService_getHLBCDyupData_args() : dyup_name(""), env("") {
  }

  virtual ~MNSCacheService_getHLBCDyupData_args() throw() {}

  std::string dyup_name;
  std::string env;

  _MNSCacheService_getHLBCDyupData_args__isset __isset;

  void __set_dyup_name(const std::string& val) {
    dyup_name = val;
  }

  void __set_env(const std::string& val) {
    env = val;
  }

  bool operator == (const MNSCacheService_getHLBCDyupData_args & rhs) const
  {
    if (!(dyup_name == rhs.dyup_name))
      return false;
    if (!(env == rhs.env))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getHLBCDyupData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getHLBCDyupData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MNSCacheService_getHLBCDyupData_pargs {
 public:


  virtual ~MNSCacheService_getHLBCDyupData_pargs() throw() {}

  const std::string* dyup_name;
  const std::string* env;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getHLBCDyupData_result__isset {
  _MNSCacheService_getHLBCDyupData_result__isset() : success(false) {}
  bool success;
} _MNSCacheService_getHLBCDyupData_result__isset;

class MNSCacheService_getHLBCDyupData_result {
 public:

  MNSCacheService_getHLBCDyupData_result() {
  }

  virtual ~MNSCacheService_getHLBCDyupData_result() throw() {}

  UpstreamDataResponse success;

  _MNSCacheService_getHLBCDyupData_result__isset __isset;

  void __set_success(const UpstreamDataResponse& val) {
    success = val;
  }

  bool operator == (const MNSCacheService_getHLBCDyupData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getHLBCDyupData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getHLBCDyupData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getHLBCDyupData_presult__isset {
  _MNSCacheService_getHLBCDyupData_presult__isset() : success(false) {}
  bool success;
} _MNSCacheService_getHLBCDyupData_presult__isset;

class MNSCacheService_getHLBCDyupData_presult {
 public:


  virtual ~MNSCacheService_getHLBCDyupData_presult() throw() {}

  UpstreamDataResponse* success;

  _MNSCacheService_getHLBCDyupData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MNSCacheService_getHLBCDyupByEnv_args__isset {
  _MNSCacheService_getHLBCDyupByEnv_args__isset() : env(false) {}
  bool env;
} _MNSCacheService_getHLBCDyupByEnv_args__isset;

class MNSCacheService_getHLBCDyupByEnv_args {
 public:

  MNSCacheService_getHLBCDyupByEnv_args() : env("") {
  }

  virtual ~MNSCacheService_getHLBCDyupByEnv_args() throw() {}

  std::string env;

  _MNSCacheService_getHLBCDyupByEnv_args__isset __isset;

  void __set_env(const std::string& val) {
    env = val;
  }

  bool operator == (const MNSCacheService_getHLBCDyupByEnv_args & rhs) const
  {
    if (!(env == rhs.env))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getHLBCDyupByEnv_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getHLBCDyupByEnv_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MNSCacheService_getHLBCDyupByEnv_pargs {
 public:


  virtual ~MNSCacheService_getHLBCDyupByEnv_pargs() throw() {}

  const std::string* env;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getHLBCDyupByEnv_result__isset {
  _MNSCacheService_getHLBCDyupByEnv_result__isset() : success(false) {}
  bool success;
} _MNSCacheService_getHLBCDyupByEnv_result__isset;

class MNSCacheService_getHLBCDyupByEnv_result {
 public:

  MNSCacheService_getHLBCDyupByEnv_result() {
  }

  virtual ~MNSCacheService_getHLBCDyupByEnv_result() throw() {}

  UpstreamResponse success;

  _MNSCacheService_getHLBCDyupByEnv_result__isset __isset;

  void __set_success(const UpstreamResponse& val) {
    success = val;
  }

  bool operator == (const MNSCacheService_getHLBCDyupByEnv_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getHLBCDyupByEnv_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getHLBCDyupByEnv_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getHLBCDyupByEnv_presult__isset {
  _MNSCacheService_getHLBCDyupByEnv_presult__isset() : success(false) {}
  bool success;
} _MNSCacheService_getHLBCDyupByEnv_presult__isset;

class MNSCacheService_getHLBCDyupByEnv_presult {
 public:


  virtual ~MNSCacheService_getHLBCDyupByEnv_presult() throw() {}

  UpstreamResponse* success;

  _MNSCacheService_getHLBCDyupByEnv_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MNSCacheService_getHLBCDyupDataByEnv_args__isset {
  _MNSCacheService_getHLBCDyupDataByEnv_args__isset() : env(false) {}
  bool env;
} _MNSCacheService_getHLBCDyupDataByEnv_args__isset;

class MNSCacheService_getHLBCDyupDataByEnv_args {
 public:

  MNSCacheService_getHLBCDyupDataByEnv_args() : env("") {
  }

  virtual ~MNSCacheService_getHLBCDyupDataByEnv_args() throw() {}

  std::string env;

  _MNSCacheService_getHLBCDyupDataByEnv_args__isset __isset;

  void __set_env(const std::string& val) {
    env = val;
  }

  bool operator == (const MNSCacheService_getHLBCDyupDataByEnv_args & rhs) const
  {
    if (!(env == rhs.env))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getHLBCDyupDataByEnv_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getHLBCDyupDataByEnv_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MNSCacheService_getHLBCDyupDataByEnv_pargs {
 public:


  virtual ~MNSCacheService_getHLBCDyupDataByEnv_pargs() throw() {}

  const std::string* env;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getHLBCDyupDataByEnv_result__isset {
  _MNSCacheService_getHLBCDyupDataByEnv_result__isset() : success(false) {}
  bool success;
} _MNSCacheService_getHLBCDyupDataByEnv_result__isset;

class MNSCacheService_getHLBCDyupDataByEnv_result {
 public:

  MNSCacheService_getHLBCDyupDataByEnv_result() {
  }

  virtual ~MNSCacheService_getHLBCDyupDataByEnv_result() throw() {}

  UpstreamDataResponse success;

  _MNSCacheService_getHLBCDyupDataByEnv_result__isset __isset;

  void __set_success(const UpstreamDataResponse& val) {
    success = val;
  }

  bool operator == (const MNSCacheService_getHLBCDyupDataByEnv_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getHLBCDyupDataByEnv_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getHLBCDyupDataByEnv_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getHLBCDyupDataByEnv_presult__isset {
  _MNSCacheService_getHLBCDyupDataByEnv_presult__isset() : success(false) {}
  bool success;
} _MNSCacheService_getHLBCDyupDataByEnv_presult__isset;

class MNSCacheService_getHLBCDyupDataByEnv_presult {
 public:


  virtual ~MNSCacheService_getHLBCDyupDataByEnv_presult() throw() {}

  UpstreamDataResponse* success;

  _MNSCacheService_getHLBCDyupDataByEnv_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MNSCacheService_getHLBCServerBlockByDomainName_args__isset {
  _MNSCacheService_getHLBCServerBlockByDomainName_args__isset() : serverName(false), env(false) {}
  bool serverName;
  bool env;
} _MNSCacheService_getHLBCServerBlockByDomainName_args__isset;

class MNSCacheService_getHLBCServerBlockByDomainName_args {
 public:

  MNSCacheService_getHLBCServerBlockByDomainName_args() : serverName(""), env("") {
  }

  virtual ~MNSCacheService_getHLBCServerBlockByDomainName_args() throw() {}

  std::string serverName;
  std::string env;

  _MNSCacheService_getHLBCServerBlockByDomainName_args__isset __isset;

  void __set_serverName(const std::string& val) {
    serverName = val;
  }

  void __set_env(const std::string& val) {
    env = val;
  }

  bool operator == (const MNSCacheService_getHLBCServerBlockByDomainName_args & rhs) const
  {
    if (!(serverName == rhs.serverName))
      return false;
    if (!(env == rhs.env))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getHLBCServerBlockByDomainName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getHLBCServerBlockByDomainName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MNSCacheService_getHLBCServerBlockByDomainName_pargs {
 public:


  virtual ~MNSCacheService_getHLBCServerBlockByDomainName_pargs() throw() {}

  const std::string* serverName;
  const std::string* env;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getHLBCServerBlockByDomainName_result__isset {
  _MNSCacheService_getHLBCServerBlockByDomainName_result__isset() : success(false) {}
  bool success;
} _MNSCacheService_getHLBCServerBlockByDomainName_result__isset;

class MNSCacheService_getHLBCServerBlockByDomainName_result {
 public:

  MNSCacheService_getHLBCServerBlockByDomainName_result() {
  }

  virtual ~MNSCacheService_getHLBCServerBlockByDomainName_result() throw() {}

  ServerBlockResponse success;

  _MNSCacheService_getHLBCServerBlockByDomainName_result__isset __isset;

  void __set_success(const ServerBlockResponse& val) {
    success = val;
  }

  bool operator == (const MNSCacheService_getHLBCServerBlockByDomainName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getHLBCServerBlockByDomainName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getHLBCServerBlockByDomainName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getHLBCServerBlockByDomainName_presult__isset {
  _MNSCacheService_getHLBCServerBlockByDomainName_presult__isset() : success(false) {}
  bool success;
} _MNSCacheService_getHLBCServerBlockByDomainName_presult__isset;

class MNSCacheService_getHLBCServerBlockByDomainName_presult {
 public:


  virtual ~MNSCacheService_getHLBCServerBlockByDomainName_presult() throw() {}

  ServerBlockResponse* success;

  _MNSCacheService_getHLBCServerBlockByDomainName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MNSCacheService_getHLBCServerDataByDomainName_args__isset {
  _MNSCacheService_getHLBCServerDataByDomainName_args__isset() : serverName(false), env(false) {}
  bool serverName;
  bool env;
} _MNSCacheService_getHLBCServerDataByDomainName_args__isset;

class MNSCacheService_getHLBCServerDataByDomainName_args {
 public:

  MNSCacheService_getHLBCServerDataByDomainName_args() : serverName(""), env("") {
  }

  virtual ~MNSCacheService_getHLBCServerDataByDomainName_args() throw() {}

  std::string serverName;
  std::string env;

  _MNSCacheService_getHLBCServerDataByDomainName_args__isset __isset;

  void __set_serverName(const std::string& val) {
    serverName = val;
  }

  void __set_env(const std::string& val) {
    env = val;
  }

  bool operator == (const MNSCacheService_getHLBCServerDataByDomainName_args & rhs) const
  {
    if (!(serverName == rhs.serverName))
      return false;
    if (!(env == rhs.env))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getHLBCServerDataByDomainName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getHLBCServerDataByDomainName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MNSCacheService_getHLBCServerDataByDomainName_pargs {
 public:


  virtual ~MNSCacheService_getHLBCServerDataByDomainName_pargs() throw() {}

  const std::string* serverName;
  const std::string* env;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getHLBCServerDataByDomainName_result__isset {
  _MNSCacheService_getHLBCServerDataByDomainName_result__isset() : success(false) {}
  bool success;
} _MNSCacheService_getHLBCServerDataByDomainName_result__isset;

class MNSCacheService_getHLBCServerDataByDomainName_result {
 public:

  MNSCacheService_getHLBCServerDataByDomainName_result() {
  }

  virtual ~MNSCacheService_getHLBCServerDataByDomainName_result() throw() {}

  ServerDataResponse success;

  _MNSCacheService_getHLBCServerDataByDomainName_result__isset __isset;

  void __set_success(const ServerDataResponse& val) {
    success = val;
  }

  bool operator == (const MNSCacheService_getHLBCServerDataByDomainName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getHLBCServerDataByDomainName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getHLBCServerDataByDomainName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getHLBCServerDataByDomainName_presult__isset {
  _MNSCacheService_getHLBCServerDataByDomainName_presult__isset() : success(false) {}
  bool success;
} _MNSCacheService_getHLBCServerDataByDomainName_presult__isset;

class MNSCacheService_getHLBCServerDataByDomainName_presult {
 public:


  virtual ~MNSCacheService_getHLBCServerDataByDomainName_presult() throw() {}

  ServerDataResponse* success;

  _MNSCacheService_getHLBCServerDataByDomainName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MNSCacheService_getHLBCServerBlockByBusinessLine_args__isset {
  _MNSCacheService_getHLBCServerBlockByBusinessLine_args__isset() : bizCode(false), env(false) {}
  bool bizCode;
  bool env;
} _MNSCacheService_getHLBCServerBlockByBusinessLine_args__isset;

class MNSCacheService_getHLBCServerBlockByBusinessLine_args {
 public:

  MNSCacheService_getHLBCServerBlockByBusinessLine_args() : bizCode(0), env("") {
  }

  virtual ~MNSCacheService_getHLBCServerBlockByBusinessLine_args() throw() {}

  int32_t bizCode;
  std::string env;

  _MNSCacheService_getHLBCServerBlockByBusinessLine_args__isset __isset;

  void __set_bizCode(const int32_t val) {
    bizCode = val;
  }

  void __set_env(const std::string& val) {
    env = val;
  }

  bool operator == (const MNSCacheService_getHLBCServerBlockByBusinessLine_args & rhs) const
  {
    if (!(bizCode == rhs.bizCode))
      return false;
    if (!(env == rhs.env))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getHLBCServerBlockByBusinessLine_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getHLBCServerBlockByBusinessLine_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MNSCacheService_getHLBCServerBlockByBusinessLine_pargs {
 public:


  virtual ~MNSCacheService_getHLBCServerBlockByBusinessLine_pargs() throw() {}

  const int32_t* bizCode;
  const std::string* env;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getHLBCServerBlockByBusinessLine_result__isset {
  _MNSCacheService_getHLBCServerBlockByBusinessLine_result__isset() : success(false) {}
  bool success;
} _MNSCacheService_getHLBCServerBlockByBusinessLine_result__isset;

class MNSCacheService_getHLBCServerBlockByBusinessLine_result {
 public:

  MNSCacheService_getHLBCServerBlockByBusinessLine_result() {
  }

  virtual ~MNSCacheService_getHLBCServerBlockByBusinessLine_result() throw() {}

  ServerBlockResponse success;

  _MNSCacheService_getHLBCServerBlockByBusinessLine_result__isset __isset;

  void __set_success(const ServerBlockResponse& val) {
    success = val;
  }

  bool operator == (const MNSCacheService_getHLBCServerBlockByBusinessLine_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getHLBCServerBlockByBusinessLine_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getHLBCServerBlockByBusinessLine_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getHLBCServerBlockByBusinessLine_presult__isset {
  _MNSCacheService_getHLBCServerBlockByBusinessLine_presult__isset() : success(false) {}
  bool success;
} _MNSCacheService_getHLBCServerBlockByBusinessLine_presult__isset;

class MNSCacheService_getHLBCServerBlockByBusinessLine_presult {
 public:


  virtual ~MNSCacheService_getHLBCServerBlockByBusinessLine_presult() throw() {}

  ServerBlockResponse* success;

  _MNSCacheService_getHLBCServerBlockByBusinessLine_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MNSCacheService_getHLBCServerDataByBusinessLine_args__isset {
  _MNSCacheService_getHLBCServerDataByBusinessLine_args__isset() : bizCode(false), env(false) {}
  bool bizCode;
  bool env;
} _MNSCacheService_getHLBCServerDataByBusinessLine_args__isset;

class MNSCacheService_getHLBCServerDataByBusinessLine_args {
 public:

  MNSCacheService_getHLBCServerDataByBusinessLine_args() : bizCode(0), env("") {
  }

  virtual ~MNSCacheService_getHLBCServerDataByBusinessLine_args() throw() {}

  int32_t bizCode;
  std::string env;

  _MNSCacheService_getHLBCServerDataByBusinessLine_args__isset __isset;

  void __set_bizCode(const int32_t val) {
    bizCode = val;
  }

  void __set_env(const std::string& val) {
    env = val;
  }

  bool operator == (const MNSCacheService_getHLBCServerDataByBusinessLine_args & rhs) const
  {
    if (!(bizCode == rhs.bizCode))
      return false;
    if (!(env == rhs.env))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getHLBCServerDataByBusinessLine_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getHLBCServerDataByBusinessLine_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MNSCacheService_getHLBCServerDataByBusinessLine_pargs {
 public:


  virtual ~MNSCacheService_getHLBCServerDataByBusinessLine_pargs() throw() {}

  const int32_t* bizCode;
  const std::string* env;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getHLBCServerDataByBusinessLine_result__isset {
  _MNSCacheService_getHLBCServerDataByBusinessLine_result__isset() : success(false) {}
  bool success;
} _MNSCacheService_getHLBCServerDataByBusinessLine_result__isset;

class MNSCacheService_getHLBCServerDataByBusinessLine_result {
 public:

  MNSCacheService_getHLBCServerDataByBusinessLine_result() {
  }

  virtual ~MNSCacheService_getHLBCServerDataByBusinessLine_result() throw() {}

  ServerDataResponse success;

  _MNSCacheService_getHLBCServerDataByBusinessLine_result__isset __isset;

  void __set_success(const ServerDataResponse& val) {
    success = val;
  }

  bool operator == (const MNSCacheService_getHLBCServerDataByBusinessLine_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getHLBCServerDataByBusinessLine_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getHLBCServerDataByBusinessLine_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getHLBCServerDataByBusinessLine_presult__isset {
  _MNSCacheService_getHLBCServerDataByBusinessLine_presult__isset() : success(false) {}
  bool success;
} _MNSCacheService_getHLBCServerDataByBusinessLine_presult__isset;

class MNSCacheService_getHLBCServerDataByBusinessLine_presult {
 public:


  virtual ~MNSCacheService_getHLBCServerDataByBusinessLine_presult() throw() {}

  ServerDataResponse* success;

  _MNSCacheService_getHLBCServerDataByBusinessLine_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MNSCacheService_getHLBCDyupListByIp_args__isset {
  _MNSCacheService_getHLBCDyupListByIp_args__isset() : ip(false) {}
  bool ip;
} _MNSCacheService_getHLBCDyupListByIp_args__isset;

class MNSCacheService_getHLBCDyupListByIp_args {
 public:

  MNSCacheService_getHLBCDyupListByIp_args() : ip("") {
  }

  virtual ~MNSCacheService_getHLBCDyupListByIp_args() throw() {}

  std::string ip;

  _MNSCacheService_getHLBCDyupListByIp_args__isset __isset;

  void __set_ip(const std::string& val) {
    ip = val;
  }

  bool operator == (const MNSCacheService_getHLBCDyupListByIp_args & rhs) const
  {
    if (!(ip == rhs.ip))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getHLBCDyupListByIp_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getHLBCDyupListByIp_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MNSCacheService_getHLBCDyupListByIp_pargs {
 public:


  virtual ~MNSCacheService_getHLBCDyupListByIp_pargs() throw() {}

  const std::string* ip;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getHLBCDyupListByIp_result__isset {
  _MNSCacheService_getHLBCDyupListByIp_result__isset() : success(false) {}
  bool success;
} _MNSCacheService_getHLBCDyupListByIp_result__isset;

class MNSCacheService_getHLBCDyupListByIp_result {
 public:

  MNSCacheService_getHLBCDyupListByIp_result() {
  }

  virtual ~MNSCacheService_getHLBCDyupListByIp_result() throw() {}

  std::vector<std::string>  success;

  _MNSCacheService_getHLBCDyupListByIp_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const MNSCacheService_getHLBCDyupListByIp_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getHLBCDyupListByIp_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getHLBCDyupListByIp_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getHLBCDyupListByIp_presult__isset {
  _MNSCacheService_getHLBCDyupListByIp_presult__isset() : success(false) {}
  bool success;
} _MNSCacheService_getHLBCDyupListByIp_presult__isset;

class MNSCacheService_getHLBCDyupListByIp_presult {
 public:


  virtual ~MNSCacheService_getHLBCDyupListByIp_presult() throw() {}

  std::vector<std::string> * success;

  _MNSCacheService_getHLBCDyupListByIp_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MNSCacheService_getHLBCDyupDataListByIp_args__isset {
  _MNSCacheService_getHLBCDyupDataListByIp_args__isset() : ip(false) {}
  bool ip;
} _MNSCacheService_getHLBCDyupDataListByIp_args__isset;

class MNSCacheService_getHLBCDyupDataListByIp_args {
 public:

  MNSCacheService_getHLBCDyupDataListByIp_args() : ip("") {
  }

  virtual ~MNSCacheService_getHLBCDyupDataListByIp_args() throw() {}

  std::string ip;

  _MNSCacheService_getHLBCDyupDataListByIp_args__isset __isset;

  void __set_ip(const std::string& val) {
    ip = val;
  }

  bool operator == (const MNSCacheService_getHLBCDyupDataListByIp_args & rhs) const
  {
    if (!(ip == rhs.ip))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getHLBCDyupDataListByIp_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getHLBCDyupDataListByIp_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MNSCacheService_getHLBCDyupDataListByIp_pargs {
 public:


  virtual ~MNSCacheService_getHLBCDyupDataListByIp_pargs() throw() {}

  const std::string* ip;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getHLBCDyupDataListByIp_result__isset {
  _MNSCacheService_getHLBCDyupDataListByIp_result__isset() : success(false) {}
  bool success;
} _MNSCacheService_getHLBCDyupDataListByIp_result__isset;

class MNSCacheService_getHLBCDyupDataListByIp_result {
 public:

  MNSCacheService_getHLBCDyupDataListByIp_result() {
  }

  virtual ~MNSCacheService_getHLBCDyupDataListByIp_result() throw() {}

  std::vector< ::HttpUpstream>  success;

  _MNSCacheService_getHLBCDyupDataListByIp_result__isset __isset;

  void __set_success(const std::vector< ::HttpUpstream> & val) {
    success = val;
  }

  bool operator == (const MNSCacheService_getHLBCDyupDataListByIp_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getHLBCDyupDataListByIp_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getHLBCDyupDataListByIp_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getHLBCDyupDataListByIp_presult__isset {
  _MNSCacheService_getHLBCDyupDataListByIp_presult__isset() : success(false) {}
  bool success;
} _MNSCacheService_getHLBCDyupDataListByIp_presult__isset;

class MNSCacheService_getHLBCDyupDataListByIp_presult {
 public:


  virtual ~MNSCacheService_getHLBCDyupDataListByIp_presult() throw() {}

  std::vector< ::HttpUpstream> * success;

  _MNSCacheService_getHLBCDyupDataListByIp_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MNSCacheService_getHLBCServerBlockListByDyupName_args__isset {
  _MNSCacheService_getHLBCServerBlockListByDyupName_args__isset() : dyupName(false), env(false) {}
  bool dyupName;
  bool env;
} _MNSCacheService_getHLBCServerBlockListByDyupName_args__isset;

class MNSCacheService_getHLBCServerBlockListByDyupName_args {
 public:

  MNSCacheService_getHLBCServerBlockListByDyupName_args() : dyupName(""), env("") {
  }

  virtual ~MNSCacheService_getHLBCServerBlockListByDyupName_args() throw() {}

  std::string dyupName;
  std::string env;

  _MNSCacheService_getHLBCServerBlockListByDyupName_args__isset __isset;

  void __set_dyupName(const std::string& val) {
    dyupName = val;
  }

  void __set_env(const std::string& val) {
    env = val;
  }

  bool operator == (const MNSCacheService_getHLBCServerBlockListByDyupName_args & rhs) const
  {
    if (!(dyupName == rhs.dyupName))
      return false;
    if (!(env == rhs.env))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getHLBCServerBlockListByDyupName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getHLBCServerBlockListByDyupName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MNSCacheService_getHLBCServerBlockListByDyupName_pargs {
 public:


  virtual ~MNSCacheService_getHLBCServerBlockListByDyupName_pargs() throw() {}

  const std::string* dyupName;
  const std::string* env;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getHLBCServerBlockListByDyupName_result__isset {
  _MNSCacheService_getHLBCServerBlockListByDyupName_result__isset() : success(false) {}
  bool success;
} _MNSCacheService_getHLBCServerBlockListByDyupName_result__isset;

class MNSCacheService_getHLBCServerBlockListByDyupName_result {
 public:

  MNSCacheService_getHLBCServerBlockListByDyupName_result() {
  }

  virtual ~MNSCacheService_getHLBCServerBlockListByDyupName_result() throw() {}

  std::vector<std::string>  success;

  _MNSCacheService_getHLBCServerBlockListByDyupName_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const MNSCacheService_getHLBCServerBlockListByDyupName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getHLBCServerBlockListByDyupName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getHLBCServerBlockListByDyupName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getHLBCServerBlockListByDyupName_presult__isset {
  _MNSCacheService_getHLBCServerBlockListByDyupName_presult__isset() : success(false) {}
  bool success;
} _MNSCacheService_getHLBCServerBlockListByDyupName_presult__isset;

class MNSCacheService_getHLBCServerBlockListByDyupName_presult {
 public:


  virtual ~MNSCacheService_getHLBCServerBlockListByDyupName_presult() throw() {}

  std::vector<std::string> * success;

  _MNSCacheService_getHLBCServerBlockListByDyupName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MNSCacheService_getHLBCServerDataListByDyupName_args__isset {
  _MNSCacheService_getHLBCServerDataListByDyupName_args__isset() : dyupName(false), env(false) {}
  bool dyupName;
  bool env;
} _MNSCacheService_getHLBCServerDataListByDyupName_args__isset;

class MNSCacheService_getHLBCServerDataListByDyupName_args {
 public:

  MNSCacheService_getHLBCServerDataListByDyupName_args() : dyupName(""), env("") {
  }

  virtual ~MNSCacheService_getHLBCServerDataListByDyupName_args() throw() {}

  std::string dyupName;
  std::string env;

  _MNSCacheService_getHLBCServerDataListByDyupName_args__isset __isset;

  void __set_dyupName(const std::string& val) {
    dyupName = val;
  }

  void __set_env(const std::string& val) {
    env = val;
  }

  bool operator == (const MNSCacheService_getHLBCServerDataListByDyupName_args & rhs) const
  {
    if (!(dyupName == rhs.dyupName))
      return false;
    if (!(env == rhs.env))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getHLBCServerDataListByDyupName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getHLBCServerDataListByDyupName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MNSCacheService_getHLBCServerDataListByDyupName_pargs {
 public:


  virtual ~MNSCacheService_getHLBCServerDataListByDyupName_pargs() throw() {}

  const std::string* dyupName;
  const std::string* env;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getHLBCServerDataListByDyupName_result__isset {
  _MNSCacheService_getHLBCServerDataListByDyupName_result__isset() : success(false) {}
  bool success;
} _MNSCacheService_getHLBCServerDataListByDyupName_result__isset;

class MNSCacheService_getHLBCServerDataListByDyupName_result {
 public:

  MNSCacheService_getHLBCServerDataListByDyupName_result() {
  }

  virtual ~MNSCacheService_getHLBCServerDataListByDyupName_result() throw() {}

  std::vector< ::HlbcServer>  success;

  _MNSCacheService_getHLBCServerDataListByDyupName_result__isset __isset;

  void __set_success(const std::vector< ::HlbcServer> & val) {
    success = val;
  }

  bool operator == (const MNSCacheService_getHLBCServerDataListByDyupName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getHLBCServerDataListByDyupName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getHLBCServerDataListByDyupName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getHLBCServerDataListByDyupName_presult__isset {
  _MNSCacheService_getHLBCServerDataListByDyupName_presult__isset() : success(false) {}
  bool success;
} _MNSCacheService_getHLBCServerDataListByDyupName_presult__isset;

class MNSCacheService_getHLBCServerDataListByDyupName_presult {
 public:


  virtual ~MNSCacheService_getHLBCServerDataListByDyupName_presult() throw() {}

  std::vector< ::HlbcServer> * success;

  _MNSCacheService_getHLBCServerDataListByDyupName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MNSCacheService_getSandbox_args__isset {
  _MNSCacheService_getSandbox_args__isset() : appkey(false), env(false) {}
  bool appkey;
  bool env;
} _MNSCacheService_getSandbox_args__isset;

class MNSCacheService_getSandbox_args {
 public:

  MNSCacheService_getSandbox_args() : appkey(""), env("") {
  }

  virtual ~MNSCacheService_getSandbox_args() throw() {}

  std::string appkey;
  std::string env;

  _MNSCacheService_getSandbox_args__isset __isset;

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_env(const std::string& val) {
    env = val;
  }

  bool operator == (const MNSCacheService_getSandbox_args & rhs) const
  {
    if (!(appkey == rhs.appkey))
      return false;
    if (!(env == rhs.env))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getSandbox_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getSandbox_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MNSCacheService_getSandbox_pargs {
 public:


  virtual ~MNSCacheService_getSandbox_pargs() throw() {}

  const std::string* appkey;
  const std::string* env;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getSandbox_result__isset {
  _MNSCacheService_getSandbox_result__isset() : success(false) {}
  bool success;
} _MNSCacheService_getSandbox_result__isset;

class MNSCacheService_getSandbox_result {
 public:

  MNSCacheService_getSandbox_result() {
  }

  virtual ~MNSCacheService_getSandbox_result() throw() {}

  SandboxResponse success;

  _MNSCacheService_getSandbox_result__isset __isset;

  void __set_success(const SandboxResponse& val) {
    success = val;
  }

  bool operator == (const MNSCacheService_getSandbox_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getSandbox_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getSandbox_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getSandbox_presult__isset {
  _MNSCacheService_getSandbox_presult__isset() : success(false) {}
  bool success;
} _MNSCacheService_getSandbox_presult__isset;

class MNSCacheService_getSandbox_presult {
 public:


  virtual ~MNSCacheService_getSandbox_presult() throw() {}

  SandboxResponse* success;

  _MNSCacheService_getSandbox_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MNSCacheService_saveSandbox_args__isset {
  _MNSCacheService_saveSandbox_args__isset() : id(false), env(false), data(false) {}
  bool id;
  bool env;
  bool data;
} _MNSCacheService_saveSandbox_args__isset;

class MNSCacheService_saveSandbox_args {
 public:

  MNSCacheService_saveSandbox_args() : id(""), env(""), data("") {
  }

  virtual ~MNSCacheService_saveSandbox_args() throw() {}

  std::string id;
  std::string env;
  std::string data;

  _MNSCacheService_saveSandbox_args__isset __isset;

  void __set_id(const std::string& val) {
    id = val;
  }

  void __set_env(const std::string& val) {
    env = val;
  }

  void __set_data(const std::string& val) {
    data = val;
  }

  bool operator == (const MNSCacheService_saveSandbox_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(env == rhs.env))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_saveSandbox_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_saveSandbox_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MNSCacheService_saveSandbox_pargs {
 public:


  virtual ~MNSCacheService_saveSandbox_pargs() throw() {}

  const std::string* id;
  const std::string* env;
  const std::string* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_saveSandbox_result__isset {
  _MNSCacheService_saveSandbox_result__isset() : success(false) {}
  bool success;
} _MNSCacheService_saveSandbox_result__isset;

class MNSCacheService_saveSandbox_result {
 public:

  MNSCacheService_saveSandbox_result() : success(0) {
  }

  virtual ~MNSCacheService_saveSandbox_result() throw() {}

  bool success;

  _MNSCacheService_saveSandbox_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const MNSCacheService_saveSandbox_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_saveSandbox_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_saveSandbox_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_saveSandbox_presult__isset {
  _MNSCacheService_saveSandbox_presult__isset() : success(false) {}
  bool success;
} _MNSCacheService_saveSandbox_presult__isset;

class MNSCacheService_saveSandbox_presult {
 public:


  virtual ~MNSCacheService_saveSandbox_presult() throw() {}

  bool* success;

  _MNSCacheService_saveSandbox_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MNSCacheService_deleteSandbox_args__isset {
  _MNSCacheService_deleteSandbox_args__isset() : id(false), env(false) {}
  bool id;
  bool env;
} _MNSCacheService_deleteSandbox_args__isset;

class MNSCacheService_deleteSandbox_args {
 public:

  MNSCacheService_deleteSandbox_args() : id(""), env("") {
  }

  virtual ~MNSCacheService_deleteSandbox_args() throw() {}

  std::string id;
  std::string env;

  _MNSCacheService_deleteSandbox_args__isset __isset;

  void __set_id(const std::string& val) {
    id = val;
  }

  void __set_env(const std::string& val) {
    env = val;
  }

  bool operator == (const MNSCacheService_deleteSandbox_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(env == rhs.env))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_deleteSandbox_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_deleteSandbox_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MNSCacheService_deleteSandbox_pargs {
 public:


  virtual ~MNSCacheService_deleteSandbox_pargs() throw() {}

  const std::string* id;
  const std::string* env;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_deleteSandbox_result__isset {
  _MNSCacheService_deleteSandbox_result__isset() : success(false) {}
  bool success;
} _MNSCacheService_deleteSandbox_result__isset;

class MNSCacheService_deleteSandbox_result {
 public:

  MNSCacheService_deleteSandbox_result() : success(0) {
  }

  virtual ~MNSCacheService_deleteSandbox_result() throw() {}

  bool success;

  _MNSCacheService_deleteSandbox_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const MNSCacheService_deleteSandbox_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_deleteSandbox_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_deleteSandbox_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_deleteSandbox_presult__isset {
  _MNSCacheService_deleteSandbox_presult__isset() : success(false) {}
  bool success;
} _MNSCacheService_deleteSandbox_presult__isset;

class MNSCacheService_deleteSandbox_presult {
 public:


  virtual ~MNSCacheService_deleteSandbox_presult() throw() {}

  bool* success;

  _MNSCacheService_deleteSandbox_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MNSCacheService_getSandboxConfig_args__isset {
  _MNSCacheService_getSandboxConfig_args__isset() : appkeys(false), env(false) {}
  bool appkeys;
  bool env;
} _MNSCacheService_getSandboxConfig_args__isset;

class MNSCacheService_getSandboxConfig_args {
 public:

  MNSCacheService_getSandboxConfig_args() : env("") {
  }

  virtual ~MNSCacheService_getSandboxConfig_args() throw() {}

  std::vector<std::string>  appkeys;
  std::string env;

  _MNSCacheService_getSandboxConfig_args__isset __isset;

  void __set_appkeys(const std::vector<std::string> & val) {
    appkeys = val;
  }

  void __set_env(const std::string& val) {
    env = val;
  }

  bool operator == (const MNSCacheService_getSandboxConfig_args & rhs) const
  {
    if (!(appkeys == rhs.appkeys))
      return false;
    if (!(env == rhs.env))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getSandboxConfig_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getSandboxConfig_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MNSCacheService_getSandboxConfig_pargs {
 public:


  virtual ~MNSCacheService_getSandboxConfig_pargs() throw() {}

  const std::vector<std::string> * appkeys;
  const std::string* env;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getSandboxConfig_result__isset {
  _MNSCacheService_getSandboxConfig_result__isset() : success(false) {}
  bool success;
} _MNSCacheService_getSandboxConfig_result__isset;

class MNSCacheService_getSandboxConfig_result {
 public:

  MNSCacheService_getSandboxConfig_result() {
  }

  virtual ~MNSCacheService_getSandboxConfig_result() throw() {}

  std::vector<SandboxConfig>  success;

  _MNSCacheService_getSandboxConfig_result__isset __isset;

  void __set_success(const std::vector<SandboxConfig> & val) {
    success = val;
  }

  bool operator == (const MNSCacheService_getSandboxConfig_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getSandboxConfig_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getSandboxConfig_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getSandboxConfig_presult__isset {
  _MNSCacheService_getSandboxConfig_presult__isset() : success(false) {}
  bool success;
} _MNSCacheService_getSandboxConfig_presult__isset;

class MNSCacheService_getSandboxConfig_presult {
 public:


  virtual ~MNSCacheService_getSandboxConfig_presult() throw() {}

  std::vector<SandboxConfig> * success;

  _MNSCacheService_getSandboxConfig_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MNSCacheService_getProvidersByIP_args__isset {
  _MNSCacheService_getProvidersByIP_args__isset() : ip(false) {}
  bool ip;
} _MNSCacheService_getProvidersByIP_args__isset;

class MNSCacheService_getProvidersByIP_args {
 public:

  MNSCacheService_getProvidersByIP_args() : ip("") {
  }

  virtual ~MNSCacheService_getProvidersByIP_args() throw() {}

  std::string ip;

  _MNSCacheService_getProvidersByIP_args__isset __isset;

  void __set_ip(const std::string& val) {
    ip = val;
  }

  bool operator == (const MNSCacheService_getProvidersByIP_args & rhs) const
  {
    if (!(ip == rhs.ip))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getProvidersByIP_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getProvidersByIP_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MNSCacheService_getProvidersByIP_pargs {
 public:


  virtual ~MNSCacheService_getProvidersByIP_pargs() throw() {}

  const std::string* ip;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getProvidersByIP_result__isset {
  _MNSCacheService_getProvidersByIP_result__isset() : success(false) {}
  bool success;
} _MNSCacheService_getProvidersByIP_result__isset;

class MNSCacheService_getProvidersByIP_result {
 public:

  MNSCacheService_getProvidersByIP_result() {
  }

  virtual ~MNSCacheService_getProvidersByIP_result() throw() {}

  MNSResponse success;

  _MNSCacheService_getProvidersByIP_result__isset __isset;

  void __set_success(const MNSResponse& val) {
    success = val;
  }

  bool operator == (const MNSCacheService_getProvidersByIP_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getProvidersByIP_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getProvidersByIP_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getProvidersByIP_presult__isset {
  _MNSCacheService_getProvidersByIP_presult__isset() : success(false) {}
  bool success;
} _MNSCacheService_getProvidersByIP_presult__isset;

class MNSCacheService_getProvidersByIP_presult {
 public:


  virtual ~MNSCacheService_getProvidersByIP_presult() throw() {}

  MNSResponse* success;

  _MNSCacheService_getProvidersByIP_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MNSCacheService_delProvider_args__isset {
  _MNSCacheService_delProvider_args__isset() : appkey(false), env(false), serverType(false), ip(false), port(false) {}
  bool appkey;
  bool env;
  bool serverType;
  bool ip;
  bool port;
} _MNSCacheService_delProvider_args__isset;

class MNSCacheService_delProvider_args {
 public:

  MNSCacheService_delProvider_args() : appkey(""), env(0), serverType(0), ip(""), port(0) {
  }

  virtual ~MNSCacheService_delProvider_args() throw() {}

  std::string appkey;
  int32_t env;
  int32_t serverType;
  std::string ip;
  int32_t port;

  _MNSCacheService_delProvider_args__isset __isset;

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_env(const int32_t val) {
    env = val;
  }

  void __set_serverType(const int32_t val) {
    serverType = val;
  }

  void __set_ip(const std::string& val) {
    ip = val;
  }

  void __set_port(const int32_t val) {
    port = val;
  }

  bool operator == (const MNSCacheService_delProvider_args & rhs) const
  {
    if (!(appkey == rhs.appkey))
      return false;
    if (!(env == rhs.env))
      return false;
    if (!(serverType == rhs.serverType))
      return false;
    if (!(ip == rhs.ip))
      return false;
    if (!(port == rhs.port))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_delProvider_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_delProvider_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MNSCacheService_delProvider_pargs {
 public:


  virtual ~MNSCacheService_delProvider_pargs() throw() {}

  const std::string* appkey;
  const int32_t* env;
  const int32_t* serverType;
  const std::string* ip;
  const int32_t* port;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_delProvider_result__isset {
  _MNSCacheService_delProvider_result__isset() : success(false) {}
  bool success;
} _MNSCacheService_delProvider_result__isset;

class MNSCacheService_delProvider_result {
 public:

  MNSCacheService_delProvider_result() : success(0) {
  }

  virtual ~MNSCacheService_delProvider_result() throw() {}

  bool success;

  _MNSCacheService_delProvider_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const MNSCacheService_delProvider_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_delProvider_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_delProvider_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_delProvider_presult__isset {
  _MNSCacheService_delProvider_presult__isset() : success(false) {}
  bool success;
} _MNSCacheService_delProvider_presult__isset;

class MNSCacheService_delProvider_presult {
 public:


  virtual ~MNSCacheService_delProvider_presult() throw() {}

  bool* success;

  _MNSCacheService_delProvider_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MNSCacheServiceClient : virtual public MNSCacheServiceIf {
 public:
  MNSCacheServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  MNSCacheServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getMNSCache(MNSResponse& _return, const std::string& appkey, const std::string& version, const std::string& env);
  void send_getMNSCache(const std::string& appkey, const std::string& version, const std::string& env);
  void recv_getMNSCache(MNSResponse& _return);
  void getMNSCache4HLB(MNSResponse& _return, const std::string& appkey, const std::string& version, const std::string& env);
  void send_getMNSCache4HLB(const std::string& appkey, const std::string& version, const std::string& env);
  void recv_getMNSCache4HLB(MNSResponse& _return);
  void getAppKeyListByBusinessLine(AppKeyListResponse& _return, const int32_t bizCode, const std::string& env);
  void send_getAppKeyListByBusinessLine(const int32_t bizCode, const std::string& env);
  void recv_getAppKeyListByBusinessLine(AppKeyListResponse& _return);
  void getHttpPropertiesByBusinessLine(HttpPropertiesResponse& _return, const int32_t bizCode, const std::string& env);
  void send_getHttpPropertiesByBusinessLine(const int32_t bizCode, const std::string& env);
  void recv_getHttpPropertiesByBusinessLine(HttpPropertiesResponse& _return);
  void getHttpPropertiesByAppkey(HttpPropertiesResponse& _return, const std::string& appkey, const std::string& env);
  void send_getHttpPropertiesByAppkey(const std::string& appkey, const std::string& env);
  void recv_getHttpPropertiesByAppkey(HttpPropertiesResponse& _return);
  void getHlbUpstream(UpstreamResponse& _return, const std::string& nginx_type, const std::string& idc_type, const std::string& env);
  void send_getHlbUpstream(const std::string& nginx_type, const std::string& idc_type, const std::string& env);
  void recv_getHlbUpstream(UpstreamResponse& _return);
  void getHlbUpstreamData(UpstreamDataResponse& _return, const std::string& nginx_type, const std::string& idc_type, const std::string& env);
  void send_getHlbUpstreamData(const std::string& nginx_type, const std::string& idc_type, const std::string& env);
  void recv_getHlbUpstreamData(UpstreamDataResponse& _return);
  void getHLBCDyup(UpstreamResponse& _return, const std::string& duyp_name, const std::string& env);
  void send_getHLBCDyup(const std::string& duyp_name, const std::string& env);
  void recv_getHLBCDyup(UpstreamResponse& _return);
  void getHLBCDyupData(UpstreamDataResponse& _return, const std::string& dyup_name, const std::string& env);
  void send_getHLBCDyupData(const std::string& dyup_name, const std::string& env);
  void recv_getHLBCDyupData(UpstreamDataResponse& _return);
  void getHLBCDyupByEnv(UpstreamResponse& _return, const std::string& env);
  void send_getHLBCDyupByEnv(const std::string& env);
  void recv_getHLBCDyupByEnv(UpstreamResponse& _return);
  void getHLBCDyupDataByEnv(UpstreamDataResponse& _return, const std::string& env);
  void send_getHLBCDyupDataByEnv(const std::string& env);
  void recv_getHLBCDyupDataByEnv(UpstreamDataResponse& _return);
  void getHLBCServerBlockByDomainName(ServerBlockResponse& _return, const std::string& serverName, const std::string& env);
  void send_getHLBCServerBlockByDomainName(const std::string& serverName, const std::string& env);
  void recv_getHLBCServerBlockByDomainName(ServerBlockResponse& _return);
  void getHLBCServerDataByDomainName(ServerDataResponse& _return, const std::string& serverName, const std::string& env);
  void send_getHLBCServerDataByDomainName(const std::string& serverName, const std::string& env);
  void recv_getHLBCServerDataByDomainName(ServerDataResponse& _return);
  void getHLBCServerBlockByBusinessLine(ServerBlockResponse& _return, const int32_t bizCode, const std::string& env);
  void send_getHLBCServerBlockByBusinessLine(const int32_t bizCode, const std::string& env);
  void recv_getHLBCServerBlockByBusinessLine(ServerBlockResponse& _return);
  void getHLBCServerDataByBusinessLine(ServerDataResponse& _return, const int32_t bizCode, const std::string& env);
  void send_getHLBCServerDataByBusinessLine(const int32_t bizCode, const std::string& env);
  void recv_getHLBCServerDataByBusinessLine(ServerDataResponse& _return);
  void getHLBCDyupListByIp(std::vector<std::string> & _return, const std::string& ip);
  void send_getHLBCDyupListByIp(const std::string& ip);
  void recv_getHLBCDyupListByIp(std::vector<std::string> & _return);
  void getHLBCDyupDataListByIp(std::vector< ::HttpUpstream> & _return, const std::string& ip);
  void send_getHLBCDyupDataListByIp(const std::string& ip);
  void recv_getHLBCDyupDataListByIp(std::vector< ::HttpUpstream> & _return);
  void getHLBCServerBlockListByDyupName(std::vector<std::string> & _return, const std::string& dyupName, const std::string& env);
  void send_getHLBCServerBlockListByDyupName(const std::string& dyupName, const std::string& env);
  void recv_getHLBCServerBlockListByDyupName(std::vector<std::string> & _return);
  void getHLBCServerDataListByDyupName(std::vector< ::HlbcServer> & _return, const std::string& dyupName, const std::string& env);
  void send_getHLBCServerDataListByDyupName(const std::string& dyupName, const std::string& env);
  void recv_getHLBCServerDataListByDyupName(std::vector< ::HlbcServer> & _return);
  void getSandbox(SandboxResponse& _return, const std::string& appkey, const std::string& env);
  void send_getSandbox(const std::string& appkey, const std::string& env);
  void recv_getSandbox(SandboxResponse& _return);
  bool saveSandbox(const std::string& id, const std::string& env, const std::string& data);
  void send_saveSandbox(const std::string& id, const std::string& env, const std::string& data);
  bool recv_saveSandbox();
  bool deleteSandbox(const std::string& id, const std::string& env);
  void send_deleteSandbox(const std::string& id, const std::string& env);
  bool recv_deleteSandbox();
  void getSandboxConfig(std::vector<SandboxConfig> & _return, const std::vector<std::string> & appkeys, const std::string& env);
  void send_getSandboxConfig(const std::vector<std::string> & appkeys, const std::string& env);
  void recv_getSandboxConfig(std::vector<SandboxConfig> & _return);
  void getProvidersByIP(MNSResponse& _return, const std::string& ip);
  void send_getProvidersByIP(const std::string& ip);
  void recv_getProvidersByIP(MNSResponse& _return);
  bool delProvider(const std::string& appkey, const int32_t env, const int32_t serverType, const std::string& ip, const int32_t port);
  void send_delProvider(const std::string& appkey, const int32_t env, const int32_t serverType, const std::string& ip, const int32_t port);
  bool recv_delProvider();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MNSCacheServiceProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<MNSCacheServiceIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (MNSCacheServiceProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_getMNSCache(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMNSCache4HLB(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAppKeyListByBusinessLine(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getHttpPropertiesByBusinessLine(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getHttpPropertiesByAppkey(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getHlbUpstream(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getHlbUpstreamData(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getHLBCDyup(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getHLBCDyupData(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getHLBCDyupByEnv(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getHLBCDyupDataByEnv(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getHLBCServerBlockByDomainName(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getHLBCServerDataByDomainName(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getHLBCServerBlockByBusinessLine(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getHLBCServerDataByBusinessLine(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getHLBCDyupListByIp(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getHLBCDyupDataListByIp(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getHLBCServerBlockListByDyupName(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getHLBCServerDataListByDyupName(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSandbox(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveSandbox(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteSandbox(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSandboxConfig(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getProvidersByIP(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delProvider(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MNSCacheServiceProcessor(boost::shared_ptr<MNSCacheServiceIf> iface) :
    iface_(iface) {
    processMap_["getMNSCache"] = &MNSCacheServiceProcessor::process_getMNSCache;
    processMap_["getMNSCache4HLB"] = &MNSCacheServiceProcessor::process_getMNSCache4HLB;
    processMap_["getAppKeyListByBusinessLine"] = &MNSCacheServiceProcessor::process_getAppKeyListByBusinessLine;
    processMap_["getHttpPropertiesByBusinessLine"] = &MNSCacheServiceProcessor::process_getHttpPropertiesByBusinessLine;
    processMap_["getHttpPropertiesByAppkey"] = &MNSCacheServiceProcessor::process_getHttpPropertiesByAppkey;
    processMap_["getHlbUpstream"] = &MNSCacheServiceProcessor::process_getHlbUpstream;
    processMap_["getHlbUpstreamData"] = &MNSCacheServiceProcessor::process_getHlbUpstreamData;
    processMap_["getHLBCDyup"] = &MNSCacheServiceProcessor::process_getHLBCDyup;
    processMap_["getHLBCDyupData"] = &MNSCacheServiceProcessor::process_getHLBCDyupData;
    processMap_["getHLBCDyupByEnv"] = &MNSCacheServiceProcessor::process_getHLBCDyupByEnv;
    processMap_["getHLBCDyupDataByEnv"] = &MNSCacheServiceProcessor::process_getHLBCDyupDataByEnv;
    processMap_["getHLBCServerBlockByDomainName"] = &MNSCacheServiceProcessor::process_getHLBCServerBlockByDomainName;
    processMap_["getHLBCServerDataByDomainName"] = &MNSCacheServiceProcessor::process_getHLBCServerDataByDomainName;
    processMap_["getHLBCServerBlockByBusinessLine"] = &MNSCacheServiceProcessor::process_getHLBCServerBlockByBusinessLine;
    processMap_["getHLBCServerDataByBusinessLine"] = &MNSCacheServiceProcessor::process_getHLBCServerDataByBusinessLine;
    processMap_["getHLBCDyupListByIp"] = &MNSCacheServiceProcessor::process_getHLBCDyupListByIp;
    processMap_["getHLBCDyupDataListByIp"] = &MNSCacheServiceProcessor::process_getHLBCDyupDataListByIp;
    processMap_["getHLBCServerBlockListByDyupName"] = &MNSCacheServiceProcessor::process_getHLBCServerBlockListByDyupName;
    processMap_["getHLBCServerDataListByDyupName"] = &MNSCacheServiceProcessor::process_getHLBCServerDataListByDyupName;
    processMap_["getSandbox"] = &MNSCacheServiceProcessor::process_getSandbox;
    processMap_["saveSandbox"] = &MNSCacheServiceProcessor::process_saveSandbox;
    processMap_["deleteSandbox"] = &MNSCacheServiceProcessor::process_deleteSandbox;
    processMap_["getSandboxConfig"] = &MNSCacheServiceProcessor::process_getSandboxConfig;
    processMap_["getProvidersByIP"] = &MNSCacheServiceProcessor::process_getProvidersByIP;
    processMap_["delProvider"] = &MNSCacheServiceProcessor::process_delProvider;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~MNSCacheServiceProcessor() {}
};

class MNSCacheServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MNSCacheServiceProcessorFactory(const ::boost::shared_ptr< MNSCacheServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MNSCacheServiceIfFactory > handlerFactory_;
};

class MNSCacheServiceMultiface : virtual public MNSCacheServiceIf {
 public:
  MNSCacheServiceMultiface(std::vector<boost::shared_ptr<MNSCacheServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MNSCacheServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MNSCacheServiceIf> > ifaces_;
  MNSCacheServiceMultiface() {}
  void add(boost::shared_ptr<MNSCacheServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getMNSCache(MNSResponse& _return, const std::string& appkey, const std::string& version, const std::string& env) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getMNSCache(_return, appkey, version, env);
        return;
      } else {
        ifaces_[i]->getMNSCache(_return, appkey, version, env);
      }
    }
  }

  void getMNSCache4HLB(MNSResponse& _return, const std::string& appkey, const std::string& version, const std::string& env) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getMNSCache4HLB(_return, appkey, version, env);
        return;
      } else {
        ifaces_[i]->getMNSCache4HLB(_return, appkey, version, env);
      }
    }
  }

  void getAppKeyListByBusinessLine(AppKeyListResponse& _return, const int32_t bizCode, const std::string& env) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getAppKeyListByBusinessLine(_return, bizCode, env);
        return;
      } else {
        ifaces_[i]->getAppKeyListByBusinessLine(_return, bizCode, env);
      }
    }
  }

  void getHttpPropertiesByBusinessLine(HttpPropertiesResponse& _return, const int32_t bizCode, const std::string& env) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getHttpPropertiesByBusinessLine(_return, bizCode, env);
        return;
      } else {
        ifaces_[i]->getHttpPropertiesByBusinessLine(_return, bizCode, env);
      }
    }
  }

  void getHttpPropertiesByAppkey(HttpPropertiesResponse& _return, const std::string& appkey, const std::string& env) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getHttpPropertiesByAppkey(_return, appkey, env);
        return;
      } else {
        ifaces_[i]->getHttpPropertiesByAppkey(_return, appkey, env);
      }
    }
  }

  void getHlbUpstream(UpstreamResponse& _return, const std::string& nginx_type, const std::string& idc_type, const std::string& env) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getHlbUpstream(_return, nginx_type, idc_type, env);
        return;
      } else {
        ifaces_[i]->getHlbUpstream(_return, nginx_type, idc_type, env);
      }
    }
  }

  void getHlbUpstreamData(UpstreamDataResponse& _return, const std::string& nginx_type, const std::string& idc_type, const std::string& env) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getHlbUpstreamData(_return, nginx_type, idc_type, env);
        return;
      } else {
        ifaces_[i]->getHlbUpstreamData(_return, nginx_type, idc_type, env);
      }
    }
  }

  void getHLBCDyup(UpstreamResponse& _return, const std::string& duyp_name, const std::string& env) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getHLBCDyup(_return, duyp_name, env);
        return;
      } else {
        ifaces_[i]->getHLBCDyup(_return, duyp_name, env);
      }
    }
  }

  void getHLBCDyupData(UpstreamDataResponse& _return, const std::string& dyup_name, const std::string& env) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getHLBCDyupData(_return, dyup_name, env);
        return;
      } else {
        ifaces_[i]->getHLBCDyupData(_return, dyup_name, env);
      }
    }
  }

  void getHLBCDyupByEnv(UpstreamResponse& _return, const std::string& env) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getHLBCDyupByEnv(_return, env);
        return;
      } else {
        ifaces_[i]->getHLBCDyupByEnv(_return, env);
      }
    }
  }

  void getHLBCDyupDataByEnv(UpstreamDataResponse& _return, const std::string& env) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getHLBCDyupDataByEnv(_return, env);
        return;
      } else {
        ifaces_[i]->getHLBCDyupDataByEnv(_return, env);
      }
    }
  }

  void getHLBCServerBlockByDomainName(ServerBlockResponse& _return, const std::string& serverName, const std::string& env) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getHLBCServerBlockByDomainName(_return, serverName, env);
        return;
      } else {
        ifaces_[i]->getHLBCServerBlockByDomainName(_return, serverName, env);
      }
    }
  }

  void getHLBCServerDataByDomainName(ServerDataResponse& _return, const std::string& serverName, const std::string& env) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getHLBCServerDataByDomainName(_return, serverName, env);
        return;
      } else {
        ifaces_[i]->getHLBCServerDataByDomainName(_return, serverName, env);
      }
    }
  }

  void getHLBCServerBlockByBusinessLine(ServerBlockResponse& _return, const int32_t bizCode, const std::string& env) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getHLBCServerBlockByBusinessLine(_return, bizCode, env);
        return;
      } else {
        ifaces_[i]->getHLBCServerBlockByBusinessLine(_return, bizCode, env);
      }
    }
  }

  void getHLBCServerDataByBusinessLine(ServerDataResponse& _return, const int32_t bizCode, const std::string& env) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getHLBCServerDataByBusinessLine(_return, bizCode, env);
        return;
      } else {
        ifaces_[i]->getHLBCServerDataByBusinessLine(_return, bizCode, env);
      }
    }
  }

  void getHLBCDyupListByIp(std::vector<std::string> & _return, const std::string& ip) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getHLBCDyupListByIp(_return, ip);
        return;
      } else {
        ifaces_[i]->getHLBCDyupListByIp(_return, ip);
      }
    }
  }

  void getHLBCDyupDataListByIp(std::vector< ::HttpUpstream> & _return, const std::string& ip) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getHLBCDyupDataListByIp(_return, ip);
        return;
      } else {
        ifaces_[i]->getHLBCDyupDataListByIp(_return, ip);
      }
    }
  }

  void getHLBCServerBlockListByDyupName(std::vector<std::string> & _return, const std::string& dyupName, const std::string& env) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getHLBCServerBlockListByDyupName(_return, dyupName, env);
        return;
      } else {
        ifaces_[i]->getHLBCServerBlockListByDyupName(_return, dyupName, env);
      }
    }
  }

  void getHLBCServerDataListByDyupName(std::vector< ::HlbcServer> & _return, const std::string& dyupName, const std::string& env) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getHLBCServerDataListByDyupName(_return, dyupName, env);
        return;
      } else {
        ifaces_[i]->getHLBCServerDataListByDyupName(_return, dyupName, env);
      }
    }
  }

  void getSandbox(SandboxResponse& _return, const std::string& appkey, const std::string& env) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getSandbox(_return, appkey, env);
        return;
      } else {
        ifaces_[i]->getSandbox(_return, appkey, env);
      }
    }
  }

  bool saveSandbox(const std::string& id, const std::string& env, const std::string& data) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->saveSandbox(id, env, data);
      } else {
        ifaces_[i]->saveSandbox(id, env, data);
      }
    }
  }

  bool deleteSandbox(const std::string& id, const std::string& env) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->deleteSandbox(id, env);
      } else {
        ifaces_[i]->deleteSandbox(id, env);
      }
    }
  }

  void getSandboxConfig(std::vector<SandboxConfig> & _return, const std::vector<std::string> & appkeys, const std::string& env) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getSandboxConfig(_return, appkeys, env);
        return;
      } else {
        ifaces_[i]->getSandboxConfig(_return, appkeys, env);
      }
    }
  }

  void getProvidersByIP(MNSResponse& _return, const std::string& ip) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getProvidersByIP(_return, ip);
        return;
      } else {
        ifaces_[i]->getProvidersByIP(_return, ip);
      }
    }
  }

  bool delProvider(const std::string& appkey, const int32_t env, const int32_t serverType, const std::string& ip, const int32_t port) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->delProvider(appkey, env, serverType, ip, port);
      } else {
        ifaces_[i]->delProvider(appkey, env, serverType, ip, port);
      }
    }
  }

};



#endif
