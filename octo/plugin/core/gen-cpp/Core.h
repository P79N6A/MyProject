/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Core_H
#define Core_H

#include <TProcessor.h>
#include "core_types.h"

namespace cplugin {

class CoreIf {
 public:
  virtual ~CoreIf() {}
  virtual int32_t KeepAlive() = 0;
  virtual int32_t Start(const std::string& plugin_name, const int32_t plugin_id, const int32_t task_id) = 0;
  virtual int32_t ReStart(const std::string& plugin_name, const int32_t plugin_id, const int32_t task_id) = 0;
  virtual int32_t Stop(const std::string& plugin_name, const int32_t plugin_id, const int32_t task_id) = 0;
  virtual int32_t Remove(const std::string& plugin_name, const int32_t plugin_id, const int32_t task_id) = 0;
  virtual int32_t Upgrade(const std::string& plugin_name, const std::string& plugin_version, const int32_t plugin_id, const int32_t task_id) = 0;
  virtual int32_t StartNew(const std::string& plugin_name, const std::string& plugin_version, const int32_t plugin_id, const int32_t task_id) = 0;
  virtual int32_t RollBack(const std::string& plugin_name, const std::string& plugin_version, const int32_t plugin_id, const int32_t task_id) = 0;
  virtual int32_t UpdateFile(const std::string& path, const std::string& content, const int32_t plugin_id, const int32_t task_id) = 0;
  virtual void GetMonitorInfos(std::map<std::string, std::string> & _return, const std::vector<std::string> & sgs) = 0;
  virtual void GetPluginInfos(std::map<std::string, TInfos> & _return) = 0;
  virtual void GetVersion(std::string& _return) = 0;
  virtual int32_t notifyPluginAction(const std::vector<PluginAction> & plugin_list) = 0;
};

class CoreIfFactory {
 public:
  typedef CoreIf Handler;

  virtual ~CoreIfFactory() {}

  virtual CoreIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CoreIf* /* handler */) = 0;
};

class CoreIfSingletonFactory : virtual public CoreIfFactory {
 public:
  CoreIfSingletonFactory(const boost::shared_ptr<CoreIf>& iface) : iface_(iface) {}
  virtual ~CoreIfSingletonFactory() {}

  virtual CoreIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CoreIf* /* handler */) {}

 protected:
  boost::shared_ptr<CoreIf> iface_;
};

class CoreNull : virtual public CoreIf {
 public:
  virtual ~CoreNull() {}
  int32_t KeepAlive() {
    int32_t _return = 0;
    return _return;
  }
  int32_t Start(const std::string& /* plugin_name */, const int32_t /* plugin_id */, const int32_t /* task_id */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t ReStart(const std::string& /* plugin_name */, const int32_t /* plugin_id */, const int32_t /* task_id */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t Stop(const std::string& /* plugin_name */, const int32_t /* plugin_id */, const int32_t /* task_id */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t Remove(const std::string& /* plugin_name */, const int32_t /* plugin_id */, const int32_t /* task_id */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t Upgrade(const std::string& /* plugin_name */, const std::string& /* plugin_version */, const int32_t /* plugin_id */, const int32_t /* task_id */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t StartNew(const std::string& /* plugin_name */, const std::string& /* plugin_version */, const int32_t /* plugin_id */, const int32_t /* task_id */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t RollBack(const std::string& /* plugin_name */, const std::string& /* plugin_version */, const int32_t /* plugin_id */, const int32_t /* task_id */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t UpdateFile(const std::string& /* path */, const std::string& /* content */, const int32_t /* plugin_id */, const int32_t /* task_id */) {
    int32_t _return = 0;
    return _return;
  }
  void GetMonitorInfos(std::map<std::string, std::string> & /* _return */, const std::vector<std::string> & /* sgs */) {
    return;
  }
  void GetPluginInfos(std::map<std::string, TInfos> & /* _return */) {
    return;
  }
  void GetVersion(std::string& /* _return */) {
    return;
  }
  int32_t notifyPluginAction(const std::vector<PluginAction> & /* plugin_list */) {
    int32_t _return = 0;
    return _return;
  }
};


class Core_KeepAlive_args {
 public:

  Core_KeepAlive_args() {
  }

  virtual ~Core_KeepAlive_args() throw() {}


  bool operator == (const Core_KeepAlive_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Core_KeepAlive_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Core_KeepAlive_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Core_KeepAlive_pargs {
 public:


  virtual ~Core_KeepAlive_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Core_KeepAlive_result__isset {
  _Core_KeepAlive_result__isset() : success(false) {}
  bool success;
} _Core_KeepAlive_result__isset;

class Core_KeepAlive_result {
 public:

  Core_KeepAlive_result() : success(0) {
  }

  virtual ~Core_KeepAlive_result() throw() {}

  int32_t success;

  _Core_KeepAlive_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Core_KeepAlive_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Core_KeepAlive_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Core_KeepAlive_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Core_KeepAlive_presult__isset {
  _Core_KeepAlive_presult__isset() : success(false) {}
  bool success;
} _Core_KeepAlive_presult__isset;

class Core_KeepAlive_presult {
 public:


  virtual ~Core_KeepAlive_presult() throw() {}

  int32_t* success;

  _Core_KeepAlive_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Core_Start_args__isset {
  _Core_Start_args__isset() : plugin_name(false), plugin_id(false), task_id(false) {}
  bool plugin_name;
  bool plugin_id;
  bool task_id;
} _Core_Start_args__isset;

class Core_Start_args {
 public:

  Core_Start_args() : plugin_name(""), plugin_id(0), task_id(0) {
  }

  virtual ~Core_Start_args() throw() {}

  std::string plugin_name;
  int32_t plugin_id;
  int32_t task_id;

  _Core_Start_args__isset __isset;

  void __set_plugin_name(const std::string& val) {
    plugin_name = val;
  }

  void __set_plugin_id(const int32_t val) {
    plugin_id = val;
  }

  void __set_task_id(const int32_t val) {
    task_id = val;
  }

  bool operator == (const Core_Start_args & rhs) const
  {
    if (!(plugin_name == rhs.plugin_name))
      return false;
    if (!(plugin_id == rhs.plugin_id))
      return false;
    if (!(task_id == rhs.task_id))
      return false;
    return true;
  }
  bool operator != (const Core_Start_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Core_Start_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Core_Start_pargs {
 public:


  virtual ~Core_Start_pargs() throw() {}

  const std::string* plugin_name;
  const int32_t* plugin_id;
  const int32_t* task_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Core_Start_result__isset {
  _Core_Start_result__isset() : success(false) {}
  bool success;
} _Core_Start_result__isset;

class Core_Start_result {
 public:

  Core_Start_result() : success(0) {
  }

  virtual ~Core_Start_result() throw() {}

  int32_t success;

  _Core_Start_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Core_Start_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Core_Start_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Core_Start_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Core_Start_presult__isset {
  _Core_Start_presult__isset() : success(false) {}
  bool success;
} _Core_Start_presult__isset;

class Core_Start_presult {
 public:


  virtual ~Core_Start_presult() throw() {}

  int32_t* success;

  _Core_Start_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Core_ReStart_args__isset {
  _Core_ReStart_args__isset() : plugin_name(false), plugin_id(false), task_id(false) {}
  bool plugin_name;
  bool plugin_id;
  bool task_id;
} _Core_ReStart_args__isset;

class Core_ReStart_args {
 public:

  Core_ReStart_args() : plugin_name(""), plugin_id(0), task_id(0) {
  }

  virtual ~Core_ReStart_args() throw() {}

  std::string plugin_name;
  int32_t plugin_id;
  int32_t task_id;

  _Core_ReStart_args__isset __isset;

  void __set_plugin_name(const std::string& val) {
    plugin_name = val;
  }

  void __set_plugin_id(const int32_t val) {
    plugin_id = val;
  }

  void __set_task_id(const int32_t val) {
    task_id = val;
  }

  bool operator == (const Core_ReStart_args & rhs) const
  {
    if (!(plugin_name == rhs.plugin_name))
      return false;
    if (!(plugin_id == rhs.plugin_id))
      return false;
    if (!(task_id == rhs.task_id))
      return false;
    return true;
  }
  bool operator != (const Core_ReStart_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Core_ReStart_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Core_ReStart_pargs {
 public:


  virtual ~Core_ReStart_pargs() throw() {}

  const std::string* plugin_name;
  const int32_t* plugin_id;
  const int32_t* task_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Core_ReStart_result__isset {
  _Core_ReStart_result__isset() : success(false) {}
  bool success;
} _Core_ReStart_result__isset;

class Core_ReStart_result {
 public:

  Core_ReStart_result() : success(0) {
  }

  virtual ~Core_ReStart_result() throw() {}

  int32_t success;

  _Core_ReStart_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Core_ReStart_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Core_ReStart_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Core_ReStart_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Core_ReStart_presult__isset {
  _Core_ReStart_presult__isset() : success(false) {}
  bool success;
} _Core_ReStart_presult__isset;

class Core_ReStart_presult {
 public:


  virtual ~Core_ReStart_presult() throw() {}

  int32_t* success;

  _Core_ReStart_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Core_Stop_args__isset {
  _Core_Stop_args__isset() : plugin_name(false), plugin_id(false), task_id(false) {}
  bool plugin_name;
  bool plugin_id;
  bool task_id;
} _Core_Stop_args__isset;

class Core_Stop_args {
 public:

  Core_Stop_args() : plugin_name(""), plugin_id(0), task_id(0) {
  }

  virtual ~Core_Stop_args() throw() {}

  std::string plugin_name;
  int32_t plugin_id;
  int32_t task_id;

  _Core_Stop_args__isset __isset;

  void __set_plugin_name(const std::string& val) {
    plugin_name = val;
  }

  void __set_plugin_id(const int32_t val) {
    plugin_id = val;
  }

  void __set_task_id(const int32_t val) {
    task_id = val;
  }

  bool operator == (const Core_Stop_args & rhs) const
  {
    if (!(plugin_name == rhs.plugin_name))
      return false;
    if (!(plugin_id == rhs.plugin_id))
      return false;
    if (!(task_id == rhs.task_id))
      return false;
    return true;
  }
  bool operator != (const Core_Stop_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Core_Stop_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Core_Stop_pargs {
 public:


  virtual ~Core_Stop_pargs() throw() {}

  const std::string* plugin_name;
  const int32_t* plugin_id;
  const int32_t* task_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Core_Stop_result__isset {
  _Core_Stop_result__isset() : success(false) {}
  bool success;
} _Core_Stop_result__isset;

class Core_Stop_result {
 public:

  Core_Stop_result() : success(0) {
  }

  virtual ~Core_Stop_result() throw() {}

  int32_t success;

  _Core_Stop_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Core_Stop_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Core_Stop_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Core_Stop_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Core_Stop_presult__isset {
  _Core_Stop_presult__isset() : success(false) {}
  bool success;
} _Core_Stop_presult__isset;

class Core_Stop_presult {
 public:


  virtual ~Core_Stop_presult() throw() {}

  int32_t* success;

  _Core_Stop_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Core_Remove_args__isset {
  _Core_Remove_args__isset() : plugin_name(false), plugin_id(false), task_id(false) {}
  bool plugin_name;
  bool plugin_id;
  bool task_id;
} _Core_Remove_args__isset;

class Core_Remove_args {
 public:

  Core_Remove_args() : plugin_name(""), plugin_id(0), task_id(0) {
  }

  virtual ~Core_Remove_args() throw() {}

  std::string plugin_name;
  int32_t plugin_id;
  int32_t task_id;

  _Core_Remove_args__isset __isset;

  void __set_plugin_name(const std::string& val) {
    plugin_name = val;
  }

  void __set_plugin_id(const int32_t val) {
    plugin_id = val;
  }

  void __set_task_id(const int32_t val) {
    task_id = val;
  }

  bool operator == (const Core_Remove_args & rhs) const
  {
    if (!(plugin_name == rhs.plugin_name))
      return false;
    if (!(plugin_id == rhs.plugin_id))
      return false;
    if (!(task_id == rhs.task_id))
      return false;
    return true;
  }
  bool operator != (const Core_Remove_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Core_Remove_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Core_Remove_pargs {
 public:


  virtual ~Core_Remove_pargs() throw() {}

  const std::string* plugin_name;
  const int32_t* plugin_id;
  const int32_t* task_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Core_Remove_result__isset {
  _Core_Remove_result__isset() : success(false) {}
  bool success;
} _Core_Remove_result__isset;

class Core_Remove_result {
 public:

  Core_Remove_result() : success(0) {
  }

  virtual ~Core_Remove_result() throw() {}

  int32_t success;

  _Core_Remove_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Core_Remove_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Core_Remove_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Core_Remove_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Core_Remove_presult__isset {
  _Core_Remove_presult__isset() : success(false) {}
  bool success;
} _Core_Remove_presult__isset;

class Core_Remove_presult {
 public:


  virtual ~Core_Remove_presult() throw() {}

  int32_t* success;

  _Core_Remove_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Core_Upgrade_args__isset {
  _Core_Upgrade_args__isset() : plugin_name(false), plugin_version(false), plugin_id(false), task_id(false) {}
  bool plugin_name;
  bool plugin_version;
  bool plugin_id;
  bool task_id;
} _Core_Upgrade_args__isset;

class Core_Upgrade_args {
 public:

  Core_Upgrade_args() : plugin_name(""), plugin_version(""), plugin_id(0), task_id(0) {
  }

  virtual ~Core_Upgrade_args() throw() {}

  std::string plugin_name;
  std::string plugin_version;
  int32_t plugin_id;
  int32_t task_id;

  _Core_Upgrade_args__isset __isset;

  void __set_plugin_name(const std::string& val) {
    plugin_name = val;
  }

  void __set_plugin_version(const std::string& val) {
    plugin_version = val;
  }

  void __set_plugin_id(const int32_t val) {
    plugin_id = val;
  }

  void __set_task_id(const int32_t val) {
    task_id = val;
  }

  bool operator == (const Core_Upgrade_args & rhs) const
  {
    if (!(plugin_name == rhs.plugin_name))
      return false;
    if (!(plugin_version == rhs.plugin_version))
      return false;
    if (!(plugin_id == rhs.plugin_id))
      return false;
    if (!(task_id == rhs.task_id))
      return false;
    return true;
  }
  bool operator != (const Core_Upgrade_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Core_Upgrade_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Core_Upgrade_pargs {
 public:


  virtual ~Core_Upgrade_pargs() throw() {}

  const std::string* plugin_name;
  const std::string* plugin_version;
  const int32_t* plugin_id;
  const int32_t* task_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Core_Upgrade_result__isset {
  _Core_Upgrade_result__isset() : success(false) {}
  bool success;
} _Core_Upgrade_result__isset;

class Core_Upgrade_result {
 public:

  Core_Upgrade_result() : success(0) {
  }

  virtual ~Core_Upgrade_result() throw() {}

  int32_t success;

  _Core_Upgrade_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Core_Upgrade_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Core_Upgrade_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Core_Upgrade_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Core_Upgrade_presult__isset {
  _Core_Upgrade_presult__isset() : success(false) {}
  bool success;
} _Core_Upgrade_presult__isset;

class Core_Upgrade_presult {
 public:


  virtual ~Core_Upgrade_presult() throw() {}

  int32_t* success;

  _Core_Upgrade_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Core_StartNew_args__isset {
  _Core_StartNew_args__isset() : plugin_name(false), plugin_version(false), plugin_id(false), task_id(false) {}
  bool plugin_name;
  bool plugin_version;
  bool plugin_id;
  bool task_id;
} _Core_StartNew_args__isset;

class Core_StartNew_args {
 public:

  Core_StartNew_args() : plugin_name(""), plugin_version(""), plugin_id(0), task_id(0) {
  }

  virtual ~Core_StartNew_args() throw() {}

  std::string plugin_name;
  std::string plugin_version;
  int32_t plugin_id;
  int32_t task_id;

  _Core_StartNew_args__isset __isset;

  void __set_plugin_name(const std::string& val) {
    plugin_name = val;
  }

  void __set_plugin_version(const std::string& val) {
    plugin_version = val;
  }

  void __set_plugin_id(const int32_t val) {
    plugin_id = val;
  }

  void __set_task_id(const int32_t val) {
    task_id = val;
  }

  bool operator == (const Core_StartNew_args & rhs) const
  {
    if (!(plugin_name == rhs.plugin_name))
      return false;
    if (!(plugin_version == rhs.plugin_version))
      return false;
    if (!(plugin_id == rhs.plugin_id))
      return false;
    if (!(task_id == rhs.task_id))
      return false;
    return true;
  }
  bool operator != (const Core_StartNew_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Core_StartNew_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Core_StartNew_pargs {
 public:


  virtual ~Core_StartNew_pargs() throw() {}

  const std::string* plugin_name;
  const std::string* plugin_version;
  const int32_t* plugin_id;
  const int32_t* task_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Core_StartNew_result__isset {
  _Core_StartNew_result__isset() : success(false) {}
  bool success;
} _Core_StartNew_result__isset;

class Core_StartNew_result {
 public:

  Core_StartNew_result() : success(0) {
  }

  virtual ~Core_StartNew_result() throw() {}

  int32_t success;

  _Core_StartNew_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Core_StartNew_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Core_StartNew_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Core_StartNew_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Core_StartNew_presult__isset {
  _Core_StartNew_presult__isset() : success(false) {}
  bool success;
} _Core_StartNew_presult__isset;

class Core_StartNew_presult {
 public:


  virtual ~Core_StartNew_presult() throw() {}

  int32_t* success;

  _Core_StartNew_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Core_RollBack_args__isset {
  _Core_RollBack_args__isset() : plugin_name(false), plugin_version(false), plugin_id(false), task_id(false) {}
  bool plugin_name;
  bool plugin_version;
  bool plugin_id;
  bool task_id;
} _Core_RollBack_args__isset;

class Core_RollBack_args {
 public:

  Core_RollBack_args() : plugin_name(""), plugin_version(""), plugin_id(0), task_id(0) {
  }

  virtual ~Core_RollBack_args() throw() {}

  std::string plugin_name;
  std::string plugin_version;
  int32_t plugin_id;
  int32_t task_id;

  _Core_RollBack_args__isset __isset;

  void __set_plugin_name(const std::string& val) {
    plugin_name = val;
  }

  void __set_plugin_version(const std::string& val) {
    plugin_version = val;
  }

  void __set_plugin_id(const int32_t val) {
    plugin_id = val;
  }

  void __set_task_id(const int32_t val) {
    task_id = val;
  }

  bool operator == (const Core_RollBack_args & rhs) const
  {
    if (!(plugin_name == rhs.plugin_name))
      return false;
    if (!(plugin_version == rhs.plugin_version))
      return false;
    if (!(plugin_id == rhs.plugin_id))
      return false;
    if (!(task_id == rhs.task_id))
      return false;
    return true;
  }
  bool operator != (const Core_RollBack_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Core_RollBack_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Core_RollBack_pargs {
 public:


  virtual ~Core_RollBack_pargs() throw() {}

  const std::string* plugin_name;
  const std::string* plugin_version;
  const int32_t* plugin_id;
  const int32_t* task_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Core_RollBack_result__isset {
  _Core_RollBack_result__isset() : success(false) {}
  bool success;
} _Core_RollBack_result__isset;

class Core_RollBack_result {
 public:

  Core_RollBack_result() : success(0) {
  }

  virtual ~Core_RollBack_result() throw() {}

  int32_t success;

  _Core_RollBack_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Core_RollBack_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Core_RollBack_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Core_RollBack_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Core_RollBack_presult__isset {
  _Core_RollBack_presult__isset() : success(false) {}
  bool success;
} _Core_RollBack_presult__isset;

class Core_RollBack_presult {
 public:


  virtual ~Core_RollBack_presult() throw() {}

  int32_t* success;

  _Core_RollBack_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Core_UpdateFile_args__isset {
  _Core_UpdateFile_args__isset() : path(false), content(false), plugin_id(false), task_id(false) {}
  bool path;
  bool content;
  bool plugin_id;
  bool task_id;
} _Core_UpdateFile_args__isset;

class Core_UpdateFile_args {
 public:

  Core_UpdateFile_args() : path(""), content(""), plugin_id(0), task_id(0) {
  }

  virtual ~Core_UpdateFile_args() throw() {}

  std::string path;
  std::string content;
  int32_t plugin_id;
  int32_t task_id;

  _Core_UpdateFile_args__isset __isset;

  void __set_path(const std::string& val) {
    path = val;
  }

  void __set_content(const std::string& val) {
    content = val;
  }

  void __set_plugin_id(const int32_t val) {
    plugin_id = val;
  }

  void __set_task_id(const int32_t val) {
    task_id = val;
  }

  bool operator == (const Core_UpdateFile_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(content == rhs.content))
      return false;
    if (!(plugin_id == rhs.plugin_id))
      return false;
    if (!(task_id == rhs.task_id))
      return false;
    return true;
  }
  bool operator != (const Core_UpdateFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Core_UpdateFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Core_UpdateFile_pargs {
 public:


  virtual ~Core_UpdateFile_pargs() throw() {}

  const std::string* path;
  const std::string* content;
  const int32_t* plugin_id;
  const int32_t* task_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Core_UpdateFile_result__isset {
  _Core_UpdateFile_result__isset() : success(false) {}
  bool success;
} _Core_UpdateFile_result__isset;

class Core_UpdateFile_result {
 public:

  Core_UpdateFile_result() : success(0) {
  }

  virtual ~Core_UpdateFile_result() throw() {}

  int32_t success;

  _Core_UpdateFile_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Core_UpdateFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Core_UpdateFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Core_UpdateFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Core_UpdateFile_presult__isset {
  _Core_UpdateFile_presult__isset() : success(false) {}
  bool success;
} _Core_UpdateFile_presult__isset;

class Core_UpdateFile_presult {
 public:


  virtual ~Core_UpdateFile_presult() throw() {}

  int32_t* success;

  _Core_UpdateFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Core_GetMonitorInfos_args__isset {
  _Core_GetMonitorInfos_args__isset() : sgs(false) {}
  bool sgs;
} _Core_GetMonitorInfos_args__isset;

class Core_GetMonitorInfos_args {
 public:

  Core_GetMonitorInfos_args() {
  }

  virtual ~Core_GetMonitorInfos_args() throw() {}

  std::vector<std::string>  sgs;

  _Core_GetMonitorInfos_args__isset __isset;

  void __set_sgs(const std::vector<std::string> & val) {
    sgs = val;
  }

  bool operator == (const Core_GetMonitorInfos_args & rhs) const
  {
    if (!(sgs == rhs.sgs))
      return false;
    return true;
  }
  bool operator != (const Core_GetMonitorInfos_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Core_GetMonitorInfos_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Core_GetMonitorInfos_pargs {
 public:


  virtual ~Core_GetMonitorInfos_pargs() throw() {}

  const std::vector<std::string> * sgs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Core_GetMonitorInfos_result__isset {
  _Core_GetMonitorInfos_result__isset() : success(false) {}
  bool success;
} _Core_GetMonitorInfos_result__isset;

class Core_GetMonitorInfos_result {
 public:

  Core_GetMonitorInfos_result() {
  }

  virtual ~Core_GetMonitorInfos_result() throw() {}

  std::map<std::string, std::string>  success;

  _Core_GetMonitorInfos_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val) {
    success = val;
  }

  bool operator == (const Core_GetMonitorInfos_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Core_GetMonitorInfos_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Core_GetMonitorInfos_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Core_GetMonitorInfos_presult__isset {
  _Core_GetMonitorInfos_presult__isset() : success(false) {}
  bool success;
} _Core_GetMonitorInfos_presult__isset;

class Core_GetMonitorInfos_presult {
 public:


  virtual ~Core_GetMonitorInfos_presult() throw() {}

  std::map<std::string, std::string> * success;

  _Core_GetMonitorInfos_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Core_GetPluginInfos_args {
 public:

  Core_GetPluginInfos_args() {
  }

  virtual ~Core_GetPluginInfos_args() throw() {}


  bool operator == (const Core_GetPluginInfos_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Core_GetPluginInfos_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Core_GetPluginInfos_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Core_GetPluginInfos_pargs {
 public:


  virtual ~Core_GetPluginInfos_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Core_GetPluginInfos_result__isset {
  _Core_GetPluginInfos_result__isset() : success(false) {}
  bool success;
} _Core_GetPluginInfos_result__isset;

class Core_GetPluginInfos_result {
 public:

  Core_GetPluginInfos_result() {
  }

  virtual ~Core_GetPluginInfos_result() throw() {}

  std::map<std::string, TInfos>  success;

  _Core_GetPluginInfos_result__isset __isset;

  void __set_success(const std::map<std::string, TInfos> & val) {
    success = val;
  }

  bool operator == (const Core_GetPluginInfos_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Core_GetPluginInfos_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Core_GetPluginInfos_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Core_GetPluginInfos_presult__isset {
  _Core_GetPluginInfos_presult__isset() : success(false) {}
  bool success;
} _Core_GetPluginInfos_presult__isset;

class Core_GetPluginInfos_presult {
 public:


  virtual ~Core_GetPluginInfos_presult() throw() {}

  std::map<std::string, TInfos> * success;

  _Core_GetPluginInfos_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Core_GetVersion_args {
 public:

  Core_GetVersion_args() {
  }

  virtual ~Core_GetVersion_args() throw() {}


  bool operator == (const Core_GetVersion_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Core_GetVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Core_GetVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Core_GetVersion_pargs {
 public:


  virtual ~Core_GetVersion_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Core_GetVersion_result__isset {
  _Core_GetVersion_result__isset() : success(false) {}
  bool success;
} _Core_GetVersion_result__isset;

class Core_GetVersion_result {
 public:

  Core_GetVersion_result() : success("") {
  }

  virtual ~Core_GetVersion_result() throw() {}

  std::string success;

  _Core_GetVersion_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const Core_GetVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Core_GetVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Core_GetVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Core_GetVersion_presult__isset {
  _Core_GetVersion_presult__isset() : success(false) {}
  bool success;
} _Core_GetVersion_presult__isset;

class Core_GetVersion_presult {
 public:


  virtual ~Core_GetVersion_presult() throw() {}

  std::string* success;

  _Core_GetVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Core_notifyPluginAction_args__isset {
  _Core_notifyPluginAction_args__isset() : plugin_list(false) {}
  bool plugin_list;
} _Core_notifyPluginAction_args__isset;

class Core_notifyPluginAction_args {
 public:

  Core_notifyPluginAction_args() {
  }

  virtual ~Core_notifyPluginAction_args() throw() {}

  std::vector<PluginAction>  plugin_list;

  _Core_notifyPluginAction_args__isset __isset;

  void __set_plugin_list(const std::vector<PluginAction> & val) {
    plugin_list = val;
  }

  bool operator == (const Core_notifyPluginAction_args & rhs) const
  {
    if (!(plugin_list == rhs.plugin_list))
      return false;
    return true;
  }
  bool operator != (const Core_notifyPluginAction_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Core_notifyPluginAction_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Core_notifyPluginAction_pargs {
 public:


  virtual ~Core_notifyPluginAction_pargs() throw() {}

  const std::vector<PluginAction> * plugin_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Core_notifyPluginAction_result__isset {
  _Core_notifyPluginAction_result__isset() : success(false) {}
  bool success;
} _Core_notifyPluginAction_result__isset;

class Core_notifyPluginAction_result {
 public:

  Core_notifyPluginAction_result() : success(0) {
  }

  virtual ~Core_notifyPluginAction_result() throw() {}

  int32_t success;

  _Core_notifyPluginAction_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Core_notifyPluginAction_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Core_notifyPluginAction_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Core_notifyPluginAction_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Core_notifyPluginAction_presult__isset {
  _Core_notifyPluginAction_presult__isset() : success(false) {}
  bool success;
} _Core_notifyPluginAction_presult__isset;

class Core_notifyPluginAction_presult {
 public:


  virtual ~Core_notifyPluginAction_presult() throw() {}

  int32_t* success;

  _Core_notifyPluginAction_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CoreClient : virtual public CoreIf {
 public:
  CoreClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  CoreClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t KeepAlive();
  void send_KeepAlive();
  int32_t recv_KeepAlive();
  int32_t Start(const std::string& plugin_name, const int32_t plugin_id, const int32_t task_id);
  void send_Start(const std::string& plugin_name, const int32_t plugin_id, const int32_t task_id);
  int32_t recv_Start();
  int32_t ReStart(const std::string& plugin_name, const int32_t plugin_id, const int32_t task_id);
  void send_ReStart(const std::string& plugin_name, const int32_t plugin_id, const int32_t task_id);
  int32_t recv_ReStart();
  int32_t Stop(const std::string& plugin_name, const int32_t plugin_id, const int32_t task_id);
  void send_Stop(const std::string& plugin_name, const int32_t plugin_id, const int32_t task_id);
  int32_t recv_Stop();
  int32_t Remove(const std::string& plugin_name, const int32_t plugin_id, const int32_t task_id);
  void send_Remove(const std::string& plugin_name, const int32_t plugin_id, const int32_t task_id);
  int32_t recv_Remove();
  int32_t Upgrade(const std::string& plugin_name, const std::string& plugin_version, const int32_t plugin_id, const int32_t task_id);
  void send_Upgrade(const std::string& plugin_name, const std::string& plugin_version, const int32_t plugin_id, const int32_t task_id);
  int32_t recv_Upgrade();
  int32_t StartNew(const std::string& plugin_name, const std::string& plugin_version, const int32_t plugin_id, const int32_t task_id);
  void send_StartNew(const std::string& plugin_name, const std::string& plugin_version, const int32_t plugin_id, const int32_t task_id);
  int32_t recv_StartNew();
  int32_t RollBack(const std::string& plugin_name, const std::string& plugin_version, const int32_t plugin_id, const int32_t task_id);
  void send_RollBack(const std::string& plugin_name, const std::string& plugin_version, const int32_t plugin_id, const int32_t task_id);
  int32_t recv_RollBack();
  int32_t UpdateFile(const std::string& path, const std::string& content, const int32_t plugin_id, const int32_t task_id);
  void send_UpdateFile(const std::string& path, const std::string& content, const int32_t plugin_id, const int32_t task_id);
  int32_t recv_UpdateFile();
  void GetMonitorInfos(std::map<std::string, std::string> & _return, const std::vector<std::string> & sgs);
  void send_GetMonitorInfos(const std::vector<std::string> & sgs);
  void recv_GetMonitorInfos(std::map<std::string, std::string> & _return);
  void GetPluginInfos(std::map<std::string, TInfos> & _return);
  void send_GetPluginInfos();
  void recv_GetPluginInfos(std::map<std::string, TInfos> & _return);
  void GetVersion(std::string& _return);
  void send_GetVersion();
  void recv_GetVersion(std::string& _return);
  int32_t notifyPluginAction(const std::vector<PluginAction> & plugin_list);
  void send_notifyPluginAction(const std::vector<PluginAction> & plugin_list);
  int32_t recv_notifyPluginAction();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CoreProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<CoreIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (CoreProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_KeepAlive(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Start(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ReStart(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Stop(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Remove(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Upgrade(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_StartNew(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RollBack(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateFile(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMonitorInfos(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetPluginInfos(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetVersion(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_notifyPluginAction(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CoreProcessor(boost::shared_ptr<CoreIf> iface) :
    iface_(iface) {
    processMap_["KeepAlive"] = &CoreProcessor::process_KeepAlive;
    processMap_["Start"] = &CoreProcessor::process_Start;
    processMap_["ReStart"] = &CoreProcessor::process_ReStart;
    processMap_["Stop"] = &CoreProcessor::process_Stop;
    processMap_["Remove"] = &CoreProcessor::process_Remove;
    processMap_["Upgrade"] = &CoreProcessor::process_Upgrade;
    processMap_["StartNew"] = &CoreProcessor::process_StartNew;
    processMap_["RollBack"] = &CoreProcessor::process_RollBack;
    processMap_["UpdateFile"] = &CoreProcessor::process_UpdateFile;
    processMap_["GetMonitorInfos"] = &CoreProcessor::process_GetMonitorInfos;
    processMap_["GetPluginInfos"] = &CoreProcessor::process_GetPluginInfos;
    processMap_["GetVersion"] = &CoreProcessor::process_GetVersion;
    processMap_["notifyPluginAction"] = &CoreProcessor::process_notifyPluginAction;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~CoreProcessor() {}
};

class CoreProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CoreProcessorFactory(const ::boost::shared_ptr< CoreIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CoreIfFactory > handlerFactory_;
};

class CoreMultiface : virtual public CoreIf {
 public:
  CoreMultiface(std::vector<boost::shared_ptr<CoreIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CoreMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CoreIf> > ifaces_;
  CoreMultiface() {}
  void add(boost::shared_ptr<CoreIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t KeepAlive() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->KeepAlive();
      } else {
        ifaces_[i]->KeepAlive();
      }
    }
  }

  int32_t Start(const std::string& plugin_name, const int32_t plugin_id, const int32_t task_id) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->Start(plugin_name, plugin_id, task_id);
      } else {
        ifaces_[i]->Start(plugin_name, plugin_id, task_id);
      }
    }
  }

  int32_t ReStart(const std::string& plugin_name, const int32_t plugin_id, const int32_t task_id) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->ReStart(plugin_name, plugin_id, task_id);
      } else {
        ifaces_[i]->ReStart(plugin_name, plugin_id, task_id);
      }
    }
  }

  int32_t Stop(const std::string& plugin_name, const int32_t plugin_id, const int32_t task_id) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->Stop(plugin_name, plugin_id, task_id);
      } else {
        ifaces_[i]->Stop(plugin_name, plugin_id, task_id);
      }
    }
  }

  int32_t Remove(const std::string& plugin_name, const int32_t plugin_id, const int32_t task_id) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->Remove(plugin_name, plugin_id, task_id);
      } else {
        ifaces_[i]->Remove(plugin_name, plugin_id, task_id);
      }
    }
  }

  int32_t Upgrade(const std::string& plugin_name, const std::string& plugin_version, const int32_t plugin_id, const int32_t task_id) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->Upgrade(plugin_name, plugin_version, plugin_id, task_id);
      } else {
        ifaces_[i]->Upgrade(plugin_name, plugin_version, plugin_id, task_id);
      }
    }
  }

  int32_t StartNew(const std::string& plugin_name, const std::string& plugin_version, const int32_t plugin_id, const int32_t task_id) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->StartNew(plugin_name, plugin_version, plugin_id, task_id);
      } else {
        ifaces_[i]->StartNew(plugin_name, plugin_version, plugin_id, task_id);
      }
    }
  }

  int32_t RollBack(const std::string& plugin_name, const std::string& plugin_version, const int32_t plugin_id, const int32_t task_id) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->RollBack(plugin_name, plugin_version, plugin_id, task_id);
      } else {
        ifaces_[i]->RollBack(plugin_name, plugin_version, plugin_id, task_id);
      }
    }
  }

  int32_t UpdateFile(const std::string& path, const std::string& content, const int32_t plugin_id, const int32_t task_id) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->UpdateFile(path, content, plugin_id, task_id);
      } else {
        ifaces_[i]->UpdateFile(path, content, plugin_id, task_id);
      }
    }
  }

  void GetMonitorInfos(std::map<std::string, std::string> & _return, const std::vector<std::string> & sgs) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetMonitorInfos(_return, sgs);
        return;
      } else {
        ifaces_[i]->GetMonitorInfos(_return, sgs);
      }
    }
  }

  void GetPluginInfos(std::map<std::string, TInfos> & _return) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetPluginInfos(_return);
        return;
      } else {
        ifaces_[i]->GetPluginInfos(_return);
      }
    }
  }

  void GetVersion(std::string& _return) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetVersion(_return);
        return;
      } else {
        ifaces_[i]->GetVersion(_return);
      }
    }
  }

  int32_t notifyPluginAction(const std::vector<PluginAction> & plugin_list) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->notifyPluginAction(plugin_list);
      } else {
        ifaces_[i]->notifyPluginAction(plugin_list);
      }
    }
  }

};

} // namespace

#endif
