// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Core.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::cplugin;

class CoreHandler : virtual public CoreIf {
 public:
  CoreHandler() {
    // Your initialization goes here
  }

  int32_t KeepAlive() {
    // Your implementation goes here
    printf("KeepAlive\n");
  }

  int32_t Start(const std::string& plugin_name, const int32_t plugin_id, const int32_t task_id) {
    // Your implementation goes here
    printf("Start\n");
  }

  int32_t ReStart(const std::string& plugin_name, const int32_t plugin_id, const int32_t task_id) {
    // Your implementation goes here
    printf("ReStart\n");
  }

  int32_t Stop(const std::string& plugin_name, const int32_t plugin_id, const int32_t task_id) {
    // Your implementation goes here
    printf("Stop\n");
  }

  int32_t Remove(const std::string& plugin_name, const int32_t plugin_id, const int32_t task_id) {
    // Your implementation goes here
    printf("Remove\n");
  }

  int32_t Upgrade(const std::string& plugin_name, const std::string& plugin_version, const int32_t plugin_id, const int32_t task_id) {
    // Your implementation goes here
    printf("Upgrade\n");
  }

  int32_t StartNew(const std::string& plugin_name, const std::string& plugin_version, const int32_t plugin_id, const int32_t task_id) {
    // Your implementation goes here
    printf("StartNew\n");
  }

  int32_t RollBack(const std::string& plugin_name, const std::string& plugin_version, const int32_t plugin_id, const int32_t task_id) {
    // Your implementation goes here
    printf("RollBack\n");
  }

  int32_t UpdateFile(const std::string& path, const std::string& content, const int32_t plugin_id, const int32_t task_id) {
    // Your implementation goes here
    printf("UpdateFile\n");
  }

  void GetMonitorInfos(std::map<std::string, std::string> & _return, const std::vector<std::string> & sgs) {
    // Your implementation goes here
    printf("GetMonitorInfos\n");
  }

  void GetPluginInfos(std::map<std::string, TInfos> & _return) {
    // Your implementation goes here
    printf("GetPluginInfos\n");
  }

  void GetVersion(std::string& _return) {
    // Your implementation goes here
    printf("GetVersion\n");
  }

  int32_t notifyPluginAction(const std::vector<PluginAction> & plugin_list) {
    // Your implementation goes here
    printf("notifyPluginAction\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<CoreHandler> handler(new CoreHandler());
  shared_ptr<TProcessor> processor(new CoreProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

