/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ScribeLog_H
#define ScribeLog_H

#include <TProcessor.h>
#include "scribe_types.h"



class ScribeLogIf {
 public:
  virtual ~ScribeLogIf() {}
  virtual int32_t Log(const std::vector<LogEntry> & entrylist) = 0;
};

class ScribeLogIfFactory {
 public:
  typedef ScribeLogIf Handler;

  virtual ~ScribeLogIfFactory() {}

  virtual ScribeLogIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ScribeLogIf* /* handler */) = 0;
};

class ScribeLogIfSingletonFactory : virtual public ScribeLogIfFactory {
 public:
  ScribeLogIfSingletonFactory(const boost::shared_ptr<ScribeLogIf>& iface) : iface_(iface) {}
  virtual ~ScribeLogIfSingletonFactory() {}

  virtual ScribeLogIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ScribeLogIf* /* handler */) {}

 protected:
  boost::shared_ptr<ScribeLogIf> iface_;
};

class ScribeLogNull : virtual public ScribeLogIf {
 public:
  virtual ~ScribeLogNull() {}
  int32_t Log(const std::vector<LogEntry> & /* entrylist */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _ScribeLog_Log_args__isset {
  _ScribeLog_Log_args__isset() : entrylist(false) {}
  bool entrylist;
} _ScribeLog_Log_args__isset;

class ScribeLog_Log_args {
 public:

  ScribeLog_Log_args() {
  }

  virtual ~ScribeLog_Log_args() throw() {}

  std::vector<LogEntry>  entrylist;

  _ScribeLog_Log_args__isset __isset;

  void __set_entrylist(const std::vector<LogEntry> & val) {
    entrylist = val;
  }

  bool operator == (const ScribeLog_Log_args & rhs) const
  {
    if (!(entrylist == rhs.entrylist))
      return false;
    return true;
  }
  bool operator != (const ScribeLog_Log_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ScribeLog_Log_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ScribeLog_Log_pargs {
 public:


  virtual ~ScribeLog_Log_pargs() throw() {}

  const std::vector<LogEntry> * entrylist;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ScribeLog_Log_result__isset {
  _ScribeLog_Log_result__isset() : success(false) {}
  bool success;
} _ScribeLog_Log_result__isset;

class ScribeLog_Log_result {
 public:

  ScribeLog_Log_result() : success(0) {
  }

  virtual ~ScribeLog_Log_result() throw() {}

  int32_t success;

  _ScribeLog_Log_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ScribeLog_Log_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ScribeLog_Log_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ScribeLog_Log_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ScribeLog_Log_presult__isset {
  _ScribeLog_Log_presult__isset() : success(false) {}
  bool success;
} _ScribeLog_Log_presult__isset;

class ScribeLog_Log_presult {
 public:


  virtual ~ScribeLog_Log_presult() throw() {}

  int32_t* success;

  _ScribeLog_Log_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ScribeLogClient : virtual public ScribeLogIf {
 public:
  ScribeLogClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ScribeLogClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t Log(const std::vector<LogEntry> & entrylist);
  void send_Log(const std::vector<LogEntry> & entrylist);
  int32_t recv_Log();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ScribeLogProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<ScribeLogIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (ScribeLogProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_Log(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ScribeLogProcessor(boost::shared_ptr<ScribeLogIf> iface) :
    iface_(iface) {
    processMap_["Log"] = &ScribeLogProcessor::process_Log;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~ScribeLogProcessor() {}
};

class ScribeLogProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ScribeLogProcessorFactory(const ::boost::shared_ptr< ScribeLogIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ScribeLogIfFactory > handlerFactory_;
};

class ScribeLogMultiface : virtual public ScribeLogIf {
 public:
  ScribeLogMultiface(std::vector<boost::shared_ptr<ScribeLogIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ScribeLogMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ScribeLogIf> > ifaces_;
  ScribeLogMultiface() {}
  void add(boost::shared_ptr<ScribeLogIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t Log(const std::vector<LogEntry> & entrylist) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->Log(entrylist);
      } else {
        ifaces_[i]->Log(entrylist);
      }
    }

    return 0;
  }

};



#endif
