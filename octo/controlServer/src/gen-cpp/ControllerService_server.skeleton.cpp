// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "ControllerService.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::Controller;

class ControllerServiceHandler : virtual public ControllerServiceIf {
 public:
  ControllerServiceHandler() {
    // Your initialization goes here
  }

  int32_t installPlugin(const Plugin& p, const std::vector<std::string> & ip_addr_list) {
    // Your implementation goes here
    printf("installPlugin\n");
  }

  int32_t startPlugin(const Plugin& p, const std::vector<std::string> & ip_addr_list) {
    // Your implementation goes here
    printf("startPlugin\n");
  }

  int32_t stopPlugin(const Plugin& p, const std::vector<std::string> & ip_addr_list) {
    // Your implementation goes here
    printf("stopPlugin\n");
  }

  int32_t restartPlugin(const Plugin& p, const std::vector<std::string> & ip_addr_list) {
    // Your implementation goes here
    printf("restartPlugin\n");
  }

  int32_t handlePlugin(const Operation::type op, const Plugin& p, const std::string& ip_addr) {
    // Your implementation goes here
    printf("handlePlugin\n");
  }

  int32_t handlePluginList(const Operation::type op, const Plugin& p, const std::vector<std::string> & ip_addr_list) {
    // Your implementation goes here
    printf("handlePluginList\n");
  }

  int32_t handlePluginUnion(const Operation::type op, const Plugin& p, const Department& d, const Location& l, const std::string& env) {
    // Your implementation goes here
    printf("handlePluginUnion\n");
  }

  void checkPerformance(std::vector<Performance> & _return, const Plugin& p, const std::vector<std::string> & ip_addr_list) {
    // Your implementation goes here
    printf("checkPerformance\n");
  }

  void getVersionList(std::vector<PluginVersion> & _return, const Plugin& p, const std::vector<std::string> & ip_addr_list) {
    // Your implementation goes here
    printf("getVersionList\n");
  }

  void getVersionUnion(std::vector<PluginVersion> & _return, const Plugin& p, const Department& d, const Location& l) {
    // Your implementation goes here
    printf("getVersionUnion\n");
  }

  int32_t reportVersion(const std::string& ip_addr, const int32_t plugin_id, const int32_t task_id, const std::string& err_message) {
    // Your implementation goes here
    printf("reportVersion\n");
  }

  int32_t regularCheckPlugin(const std::string& ip_addr, const std::vector<Plugin> & plugin_list) {
    // Your implementation goes here
    printf("regularCheckPlugin\n");
  }

  int32_t reportHealth(const std::string& ip_addr, const std::vector<PluginHealth> & status) {
    // Your implementation goes here
    printf("reportHealth\n");
  }

  int32_t reportCpluginInfo(const std::string& ip_addr, const std::string& hostname, const Location& l, const CPluginInfo& info) {
    // Your implementation goes here
    printf("reportCpluginInfo\n");
  }

  void reportMoniterInfo(MoniterResponse& _return, const MoniterRequest& request) {
    // Your implementation goes here
    printf("reportMoniterInfo\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<ControllerServiceHandler> handler(new ControllerServiceHandler());
  shared_ptr<TProcessor> processor(new ControllerServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

