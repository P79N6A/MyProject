/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ControllerService_H
#define ControllerService_H

#include <TProcessor.h>
#include "controller_types.h"

namespace Controller {

class ControllerServiceIf {
 public:
  virtual ~ControllerServiceIf() {}
  virtual int32_t installPlugin(const Plugin& p, const std::vector<std::string> & ip_addr_list) = 0;
  virtual int32_t startPlugin(const Plugin& p, const std::vector<std::string> & ip_addr_list) = 0;
  virtual int32_t stopPlugin(const Plugin& p, const std::vector<std::string> & ip_addr_list) = 0;
  virtual int32_t restartPlugin(const Plugin& p, const std::vector<std::string> & ip_addr_list) = 0;
  virtual int32_t handlePlugin(const Operation::type op, const Plugin& p, const std::string& ip_addr) = 0;
  virtual int32_t handlePluginList(const Operation::type op, const Plugin& p, const std::vector<std::string> & ip_addr_list) = 0;
  virtual int32_t handlePluginUnion(const Operation::type op, const Plugin& p, const Department& d, const Location& l, const std::string& env) = 0;
  virtual void checkPerformance(std::vector<Performance> & _return, const Plugin& p, const std::vector<std::string> & ip_addr_list) = 0;
  virtual void getVersionList(std::vector<PluginVersion> & _return, const Plugin& p, const std::vector<std::string> & ip_addr_list) = 0;
  virtual void getVersionUnion(std::vector<PluginVersion> & _return, const Plugin& p, const Department& d, const Location& l) = 0;
  virtual int32_t reportVersion(const std::string& ip_addr, const int32_t plugin_id, const int32_t task_id, const std::string& err_message) = 0;
  virtual int32_t regularCheckPlugin(const std::string& ip_addr, const std::vector<Plugin> & plugin_list) = 0;
  virtual int32_t reportHealth(const std::string& ip_addr, const std::vector<PluginHealth> & status) = 0;
  virtual int32_t reportCpluginInfo(const std::string& ip_addr, const std::string& hostname, const Location& l, const CPluginInfo& info) = 0;
  virtual void reportMoniterInfo(MoniterResponse& _return, const MoniterRequest& request) = 0;
};

class ControllerServiceIfFactory {
 public:
  typedef ControllerServiceIf Handler;

  virtual ~ControllerServiceIfFactory() {}

  virtual ControllerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ControllerServiceIf* /* handler */) = 0;
};

class ControllerServiceIfSingletonFactory : virtual public ControllerServiceIfFactory {
 public:
  ControllerServiceIfSingletonFactory(const boost::shared_ptr<ControllerServiceIf>& iface) : iface_(iface) {}
  virtual ~ControllerServiceIfSingletonFactory() {}

  virtual ControllerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ControllerServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ControllerServiceIf> iface_;
};

class ControllerServiceNull : virtual public ControllerServiceIf {
 public:
  virtual ~ControllerServiceNull() {}
  int32_t installPlugin(const Plugin& /* p */, const std::vector<std::string> & /* ip_addr_list */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t startPlugin(const Plugin& /* p */, const std::vector<std::string> & /* ip_addr_list */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t stopPlugin(const Plugin& /* p */, const std::vector<std::string> & /* ip_addr_list */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t restartPlugin(const Plugin& /* p */, const std::vector<std::string> & /* ip_addr_list */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t handlePlugin(const Operation::type /* op */, const Plugin& /* p */, const std::string& /* ip_addr */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t handlePluginList(const Operation::type /* op */, const Plugin& /* p */, const std::vector<std::string> & /* ip_addr_list */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t handlePluginUnion(const Operation::type /* op */, const Plugin& /* p */, const Department& /* d */, const Location& /* l */, const std::string& /* env */) {
    int32_t _return = 0;
    return _return;
  }
  void checkPerformance(std::vector<Performance> & /* _return */, const Plugin& /* p */, const std::vector<std::string> & /* ip_addr_list */) {
    return;
  }
  void getVersionList(std::vector<PluginVersion> & /* _return */, const Plugin& /* p */, const std::vector<std::string> & /* ip_addr_list */) {
    return;
  }
  void getVersionUnion(std::vector<PluginVersion> & /* _return */, const Plugin& /* p */, const Department& /* d */, const Location& /* l */) {
    return;
  }
  int32_t reportVersion(const std::string& /* ip_addr */, const int32_t /* plugin_id */, const int32_t /* task_id */, const std::string& /* err_message */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t regularCheckPlugin(const std::string& /* ip_addr */, const std::vector<Plugin> & /* plugin_list */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t reportHealth(const std::string& /* ip_addr */, const std::vector<PluginHealth> & /* status */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t reportCpluginInfo(const std::string& /* ip_addr */, const std::string& /* hostname */, const Location& /* l */, const CPluginInfo& /* info */) {
    int32_t _return = 0;
    return _return;
  }
  void reportMoniterInfo(MoniterResponse& /* _return */, const MoniterRequest& /* request */) {
    return;
  }
};

typedef struct _ControllerService_installPlugin_args__isset {
  _ControllerService_installPlugin_args__isset() : p(false), ip_addr_list(false) {}
  bool p;
  bool ip_addr_list;
} _ControllerService_installPlugin_args__isset;

class ControllerService_installPlugin_args {
 public:

  ControllerService_installPlugin_args() {
  }

  virtual ~ControllerService_installPlugin_args() throw() {}

  Plugin p;
  std::vector<std::string>  ip_addr_list;

  _ControllerService_installPlugin_args__isset __isset;

  void __set_p(const Plugin& val) {
    p = val;
  }

  void __set_ip_addr_list(const std::vector<std::string> & val) {
    ip_addr_list = val;
  }

  bool operator == (const ControllerService_installPlugin_args & rhs) const
  {
    if (!(p == rhs.p))
      return false;
    if (!(ip_addr_list == rhs.ip_addr_list))
      return false;
    return true;
  }
  bool operator != (const ControllerService_installPlugin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControllerService_installPlugin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ControllerService_installPlugin_pargs {
 public:


  virtual ~ControllerService_installPlugin_pargs() throw() {}

  const Plugin* p;
  const std::vector<std::string> * ip_addr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ControllerService_installPlugin_result__isset {
  _ControllerService_installPlugin_result__isset() : success(false) {}
  bool success;
} _ControllerService_installPlugin_result__isset;

class ControllerService_installPlugin_result {
 public:

  ControllerService_installPlugin_result() : success(0) {
  }

  virtual ~ControllerService_installPlugin_result() throw() {}

  int32_t success;

  _ControllerService_installPlugin_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ControllerService_installPlugin_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ControllerService_installPlugin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControllerService_installPlugin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ControllerService_installPlugin_presult__isset {
  _ControllerService_installPlugin_presult__isset() : success(false) {}
  bool success;
} _ControllerService_installPlugin_presult__isset;

class ControllerService_installPlugin_presult {
 public:


  virtual ~ControllerService_installPlugin_presult() throw() {}

  int32_t* success;

  _ControllerService_installPlugin_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ControllerService_startPlugin_args__isset {
  _ControllerService_startPlugin_args__isset() : p(false), ip_addr_list(false) {}
  bool p;
  bool ip_addr_list;
} _ControllerService_startPlugin_args__isset;

class ControllerService_startPlugin_args {
 public:

  ControllerService_startPlugin_args() {
  }

  virtual ~ControllerService_startPlugin_args() throw() {}

  Plugin p;
  std::vector<std::string>  ip_addr_list;

  _ControllerService_startPlugin_args__isset __isset;

  void __set_p(const Plugin& val) {
    p = val;
  }

  void __set_ip_addr_list(const std::vector<std::string> & val) {
    ip_addr_list = val;
  }

  bool operator == (const ControllerService_startPlugin_args & rhs) const
  {
    if (!(p == rhs.p))
      return false;
    if (!(ip_addr_list == rhs.ip_addr_list))
      return false;
    return true;
  }
  bool operator != (const ControllerService_startPlugin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControllerService_startPlugin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ControllerService_startPlugin_pargs {
 public:


  virtual ~ControllerService_startPlugin_pargs() throw() {}

  const Plugin* p;
  const std::vector<std::string> * ip_addr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ControllerService_startPlugin_result__isset {
  _ControllerService_startPlugin_result__isset() : success(false) {}
  bool success;
} _ControllerService_startPlugin_result__isset;

class ControllerService_startPlugin_result {
 public:

  ControllerService_startPlugin_result() : success(0) {
  }

  virtual ~ControllerService_startPlugin_result() throw() {}

  int32_t success;

  _ControllerService_startPlugin_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ControllerService_startPlugin_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ControllerService_startPlugin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControllerService_startPlugin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ControllerService_startPlugin_presult__isset {
  _ControllerService_startPlugin_presult__isset() : success(false) {}
  bool success;
} _ControllerService_startPlugin_presult__isset;

class ControllerService_startPlugin_presult {
 public:


  virtual ~ControllerService_startPlugin_presult() throw() {}

  int32_t* success;

  _ControllerService_startPlugin_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ControllerService_stopPlugin_args__isset {
  _ControllerService_stopPlugin_args__isset() : p(false), ip_addr_list(false) {}
  bool p;
  bool ip_addr_list;
} _ControllerService_stopPlugin_args__isset;

class ControllerService_stopPlugin_args {
 public:

  ControllerService_stopPlugin_args() {
  }

  virtual ~ControllerService_stopPlugin_args() throw() {}

  Plugin p;
  std::vector<std::string>  ip_addr_list;

  _ControllerService_stopPlugin_args__isset __isset;

  void __set_p(const Plugin& val) {
    p = val;
  }

  void __set_ip_addr_list(const std::vector<std::string> & val) {
    ip_addr_list = val;
  }

  bool operator == (const ControllerService_stopPlugin_args & rhs) const
  {
    if (!(p == rhs.p))
      return false;
    if (!(ip_addr_list == rhs.ip_addr_list))
      return false;
    return true;
  }
  bool operator != (const ControllerService_stopPlugin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControllerService_stopPlugin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ControllerService_stopPlugin_pargs {
 public:


  virtual ~ControllerService_stopPlugin_pargs() throw() {}

  const Plugin* p;
  const std::vector<std::string> * ip_addr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ControllerService_stopPlugin_result__isset {
  _ControllerService_stopPlugin_result__isset() : success(false) {}
  bool success;
} _ControllerService_stopPlugin_result__isset;

class ControllerService_stopPlugin_result {
 public:

  ControllerService_stopPlugin_result() : success(0) {
  }

  virtual ~ControllerService_stopPlugin_result() throw() {}

  int32_t success;

  _ControllerService_stopPlugin_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ControllerService_stopPlugin_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ControllerService_stopPlugin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControllerService_stopPlugin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ControllerService_stopPlugin_presult__isset {
  _ControllerService_stopPlugin_presult__isset() : success(false) {}
  bool success;
} _ControllerService_stopPlugin_presult__isset;

class ControllerService_stopPlugin_presult {
 public:


  virtual ~ControllerService_stopPlugin_presult() throw() {}

  int32_t* success;

  _ControllerService_stopPlugin_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ControllerService_restartPlugin_args__isset {
  _ControllerService_restartPlugin_args__isset() : p(false), ip_addr_list(false) {}
  bool p;
  bool ip_addr_list;
} _ControllerService_restartPlugin_args__isset;

class ControllerService_restartPlugin_args {
 public:

  ControllerService_restartPlugin_args() {
  }

  virtual ~ControllerService_restartPlugin_args() throw() {}

  Plugin p;
  std::vector<std::string>  ip_addr_list;

  _ControllerService_restartPlugin_args__isset __isset;

  void __set_p(const Plugin& val) {
    p = val;
  }

  void __set_ip_addr_list(const std::vector<std::string> & val) {
    ip_addr_list = val;
  }

  bool operator == (const ControllerService_restartPlugin_args & rhs) const
  {
    if (!(p == rhs.p))
      return false;
    if (!(ip_addr_list == rhs.ip_addr_list))
      return false;
    return true;
  }
  bool operator != (const ControllerService_restartPlugin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControllerService_restartPlugin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ControllerService_restartPlugin_pargs {
 public:


  virtual ~ControllerService_restartPlugin_pargs() throw() {}

  const Plugin* p;
  const std::vector<std::string> * ip_addr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ControllerService_restartPlugin_result__isset {
  _ControllerService_restartPlugin_result__isset() : success(false) {}
  bool success;
} _ControllerService_restartPlugin_result__isset;

class ControllerService_restartPlugin_result {
 public:

  ControllerService_restartPlugin_result() : success(0) {
  }

  virtual ~ControllerService_restartPlugin_result() throw() {}

  int32_t success;

  _ControllerService_restartPlugin_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ControllerService_restartPlugin_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ControllerService_restartPlugin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControllerService_restartPlugin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ControllerService_restartPlugin_presult__isset {
  _ControllerService_restartPlugin_presult__isset() : success(false) {}
  bool success;
} _ControllerService_restartPlugin_presult__isset;

class ControllerService_restartPlugin_presult {
 public:


  virtual ~ControllerService_restartPlugin_presult() throw() {}

  int32_t* success;

  _ControllerService_restartPlugin_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ControllerService_handlePlugin_args__isset {
  _ControllerService_handlePlugin_args__isset() : op(false), p(false), ip_addr(false) {}
  bool op;
  bool p;
  bool ip_addr;
} _ControllerService_handlePlugin_args__isset;

class ControllerService_handlePlugin_args {
 public:

  ControllerService_handlePlugin_args() : op((Operation::type)0), ip_addr("") {
  }

  virtual ~ControllerService_handlePlugin_args() throw() {}

  Operation::type op;
  Plugin p;
  std::string ip_addr;

  _ControllerService_handlePlugin_args__isset __isset;

  void __set_op(const Operation::type val) {
    op = val;
  }

  void __set_p(const Plugin& val) {
    p = val;
  }

  void __set_ip_addr(const std::string& val) {
    ip_addr = val;
  }

  bool operator == (const ControllerService_handlePlugin_args & rhs) const
  {
    if (!(op == rhs.op))
      return false;
    if (!(p == rhs.p))
      return false;
    if (!(ip_addr == rhs.ip_addr))
      return false;
    return true;
  }
  bool operator != (const ControllerService_handlePlugin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControllerService_handlePlugin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ControllerService_handlePlugin_pargs {
 public:


  virtual ~ControllerService_handlePlugin_pargs() throw() {}

  const Operation::type* op;
  const Plugin* p;
  const std::string* ip_addr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ControllerService_handlePlugin_result__isset {
  _ControllerService_handlePlugin_result__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ControllerService_handlePlugin_result__isset;

class ControllerService_handlePlugin_result {
 public:

  ControllerService_handlePlugin_result() : success(0) {
  }

  virtual ~ControllerService_handlePlugin_result() throw() {}

  int32_t success;
  InvalidOperation ouch;

  _ControllerService_handlePlugin_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  void __set_ouch(const InvalidOperation& val) {
    ouch = val;
  }

  bool operator == (const ControllerService_handlePlugin_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ControllerService_handlePlugin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControllerService_handlePlugin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ControllerService_handlePlugin_presult__isset {
  _ControllerService_handlePlugin_presult__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ControllerService_handlePlugin_presult__isset;

class ControllerService_handlePlugin_presult {
 public:


  virtual ~ControllerService_handlePlugin_presult() throw() {}

  int32_t* success;
  InvalidOperation ouch;

  _ControllerService_handlePlugin_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ControllerService_handlePluginList_args__isset {
  _ControllerService_handlePluginList_args__isset() : op(false), p(false), ip_addr_list(false) {}
  bool op;
  bool p;
  bool ip_addr_list;
} _ControllerService_handlePluginList_args__isset;

class ControllerService_handlePluginList_args {
 public:

  ControllerService_handlePluginList_args() : op((Operation::type)0) {
  }

  virtual ~ControllerService_handlePluginList_args() throw() {}

  Operation::type op;
  Plugin p;
  std::vector<std::string>  ip_addr_list;

  _ControllerService_handlePluginList_args__isset __isset;

  void __set_op(const Operation::type val) {
    op = val;
  }

  void __set_p(const Plugin& val) {
    p = val;
  }

  void __set_ip_addr_list(const std::vector<std::string> & val) {
    ip_addr_list = val;
  }

  bool operator == (const ControllerService_handlePluginList_args & rhs) const
  {
    if (!(op == rhs.op))
      return false;
    if (!(p == rhs.p))
      return false;
    if (!(ip_addr_list == rhs.ip_addr_list))
      return false;
    return true;
  }
  bool operator != (const ControllerService_handlePluginList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControllerService_handlePluginList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ControllerService_handlePluginList_pargs {
 public:


  virtual ~ControllerService_handlePluginList_pargs() throw() {}

  const Operation::type* op;
  const Plugin* p;
  const std::vector<std::string> * ip_addr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ControllerService_handlePluginList_result__isset {
  _ControllerService_handlePluginList_result__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ControllerService_handlePluginList_result__isset;

class ControllerService_handlePluginList_result {
 public:

  ControllerService_handlePluginList_result() : success(0) {
  }

  virtual ~ControllerService_handlePluginList_result() throw() {}

  int32_t success;
  InvalidOperation ouch;

  _ControllerService_handlePluginList_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  void __set_ouch(const InvalidOperation& val) {
    ouch = val;
  }

  bool operator == (const ControllerService_handlePluginList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ControllerService_handlePluginList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControllerService_handlePluginList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ControllerService_handlePluginList_presult__isset {
  _ControllerService_handlePluginList_presult__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ControllerService_handlePluginList_presult__isset;

class ControllerService_handlePluginList_presult {
 public:


  virtual ~ControllerService_handlePluginList_presult() throw() {}

  int32_t* success;
  InvalidOperation ouch;

  _ControllerService_handlePluginList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ControllerService_handlePluginUnion_args__isset {
  _ControllerService_handlePluginUnion_args__isset() : op(false), p(false), d(false), l(false), env(false) {}
  bool op;
  bool p;
  bool d;
  bool l;
  bool env;
} _ControllerService_handlePluginUnion_args__isset;

class ControllerService_handlePluginUnion_args {
 public:

  ControllerService_handlePluginUnion_args() : op((Operation::type)0), env("") {
  }

  virtual ~ControllerService_handlePluginUnion_args() throw() {}

  Operation::type op;
  Plugin p;
  Department d;
  Location l;
  std::string env;

  _ControllerService_handlePluginUnion_args__isset __isset;

  void __set_op(const Operation::type val) {
    op = val;
  }

  void __set_p(const Plugin& val) {
    p = val;
  }

  void __set_d(const Department& val) {
    d = val;
  }

  void __set_l(const Location& val) {
    l = val;
  }

  void __set_env(const std::string& val) {
    env = val;
  }

  bool operator == (const ControllerService_handlePluginUnion_args & rhs) const
  {
    if (!(op == rhs.op))
      return false;
    if (!(p == rhs.p))
      return false;
    if (!(d == rhs.d))
      return false;
    if (!(l == rhs.l))
      return false;
    if (!(env == rhs.env))
      return false;
    return true;
  }
  bool operator != (const ControllerService_handlePluginUnion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControllerService_handlePluginUnion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ControllerService_handlePluginUnion_pargs {
 public:


  virtual ~ControllerService_handlePluginUnion_pargs() throw() {}

  const Operation::type* op;
  const Plugin* p;
  const Department* d;
  const Location* l;
  const std::string* env;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ControllerService_handlePluginUnion_result__isset {
  _ControllerService_handlePluginUnion_result__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ControllerService_handlePluginUnion_result__isset;

class ControllerService_handlePluginUnion_result {
 public:

  ControllerService_handlePluginUnion_result() : success(0) {
  }

  virtual ~ControllerService_handlePluginUnion_result() throw() {}

  int32_t success;
  InvalidOperation ouch;

  _ControllerService_handlePluginUnion_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  void __set_ouch(const InvalidOperation& val) {
    ouch = val;
  }

  bool operator == (const ControllerService_handlePluginUnion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ControllerService_handlePluginUnion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControllerService_handlePluginUnion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ControllerService_handlePluginUnion_presult__isset {
  _ControllerService_handlePluginUnion_presult__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _ControllerService_handlePluginUnion_presult__isset;

class ControllerService_handlePluginUnion_presult {
 public:


  virtual ~ControllerService_handlePluginUnion_presult() throw() {}

  int32_t* success;
  InvalidOperation ouch;

  _ControllerService_handlePluginUnion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ControllerService_checkPerformance_args__isset {
  _ControllerService_checkPerformance_args__isset() : p(false), ip_addr_list(false) {}
  bool p;
  bool ip_addr_list;
} _ControllerService_checkPerformance_args__isset;

class ControllerService_checkPerformance_args {
 public:

  ControllerService_checkPerformance_args() {
  }

  virtual ~ControllerService_checkPerformance_args() throw() {}

  Plugin p;
  std::vector<std::string>  ip_addr_list;

  _ControllerService_checkPerformance_args__isset __isset;

  void __set_p(const Plugin& val) {
    p = val;
  }

  void __set_ip_addr_list(const std::vector<std::string> & val) {
    ip_addr_list = val;
  }

  bool operator == (const ControllerService_checkPerformance_args & rhs) const
  {
    if (!(p == rhs.p))
      return false;
    if (!(ip_addr_list == rhs.ip_addr_list))
      return false;
    return true;
  }
  bool operator != (const ControllerService_checkPerformance_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControllerService_checkPerformance_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ControllerService_checkPerformance_pargs {
 public:


  virtual ~ControllerService_checkPerformance_pargs() throw() {}

  const Plugin* p;
  const std::vector<std::string> * ip_addr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ControllerService_checkPerformance_result__isset {
  _ControllerService_checkPerformance_result__isset() : success(false) {}
  bool success;
} _ControllerService_checkPerformance_result__isset;

class ControllerService_checkPerformance_result {
 public:

  ControllerService_checkPerformance_result() {
  }

  virtual ~ControllerService_checkPerformance_result() throw() {}

  std::vector<Performance>  success;

  _ControllerService_checkPerformance_result__isset __isset;

  void __set_success(const std::vector<Performance> & val) {
    success = val;
  }

  bool operator == (const ControllerService_checkPerformance_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ControllerService_checkPerformance_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControllerService_checkPerformance_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ControllerService_checkPerformance_presult__isset {
  _ControllerService_checkPerformance_presult__isset() : success(false) {}
  bool success;
} _ControllerService_checkPerformance_presult__isset;

class ControllerService_checkPerformance_presult {
 public:


  virtual ~ControllerService_checkPerformance_presult() throw() {}

  std::vector<Performance> * success;

  _ControllerService_checkPerformance_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ControllerService_getVersionList_args__isset {
  _ControllerService_getVersionList_args__isset() : p(false), ip_addr_list(false) {}
  bool p;
  bool ip_addr_list;
} _ControllerService_getVersionList_args__isset;

class ControllerService_getVersionList_args {
 public:

  ControllerService_getVersionList_args() {
  }

  virtual ~ControllerService_getVersionList_args() throw() {}

  Plugin p;
  std::vector<std::string>  ip_addr_list;

  _ControllerService_getVersionList_args__isset __isset;

  void __set_p(const Plugin& val) {
    p = val;
  }

  void __set_ip_addr_list(const std::vector<std::string> & val) {
    ip_addr_list = val;
  }

  bool operator == (const ControllerService_getVersionList_args & rhs) const
  {
    if (!(p == rhs.p))
      return false;
    if (!(ip_addr_list == rhs.ip_addr_list))
      return false;
    return true;
  }
  bool operator != (const ControllerService_getVersionList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControllerService_getVersionList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ControllerService_getVersionList_pargs {
 public:


  virtual ~ControllerService_getVersionList_pargs() throw() {}

  const Plugin* p;
  const std::vector<std::string> * ip_addr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ControllerService_getVersionList_result__isset {
  _ControllerService_getVersionList_result__isset() : success(false) {}
  bool success;
} _ControllerService_getVersionList_result__isset;

class ControllerService_getVersionList_result {
 public:

  ControllerService_getVersionList_result() {
  }

  virtual ~ControllerService_getVersionList_result() throw() {}

  std::vector<PluginVersion>  success;

  _ControllerService_getVersionList_result__isset __isset;

  void __set_success(const std::vector<PluginVersion> & val) {
    success = val;
  }

  bool operator == (const ControllerService_getVersionList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ControllerService_getVersionList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControllerService_getVersionList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ControllerService_getVersionList_presult__isset {
  _ControllerService_getVersionList_presult__isset() : success(false) {}
  bool success;
} _ControllerService_getVersionList_presult__isset;

class ControllerService_getVersionList_presult {
 public:


  virtual ~ControllerService_getVersionList_presult() throw() {}

  std::vector<PluginVersion> * success;

  _ControllerService_getVersionList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ControllerService_getVersionUnion_args__isset {
  _ControllerService_getVersionUnion_args__isset() : p(false), d(false), l(false) {}
  bool p;
  bool d;
  bool l;
} _ControllerService_getVersionUnion_args__isset;

class ControllerService_getVersionUnion_args {
 public:

  ControllerService_getVersionUnion_args() {
  }

  virtual ~ControllerService_getVersionUnion_args() throw() {}

  Plugin p;
  Department d;
  Location l;

  _ControllerService_getVersionUnion_args__isset __isset;

  void __set_p(const Plugin& val) {
    p = val;
  }

  void __set_d(const Department& val) {
    d = val;
  }

  void __set_l(const Location& val) {
    l = val;
  }

  bool operator == (const ControllerService_getVersionUnion_args & rhs) const
  {
    if (!(p == rhs.p))
      return false;
    if (!(d == rhs.d))
      return false;
    if (!(l == rhs.l))
      return false;
    return true;
  }
  bool operator != (const ControllerService_getVersionUnion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControllerService_getVersionUnion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ControllerService_getVersionUnion_pargs {
 public:


  virtual ~ControllerService_getVersionUnion_pargs() throw() {}

  const Plugin* p;
  const Department* d;
  const Location* l;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ControllerService_getVersionUnion_result__isset {
  _ControllerService_getVersionUnion_result__isset() : success(false) {}
  bool success;
} _ControllerService_getVersionUnion_result__isset;

class ControllerService_getVersionUnion_result {
 public:

  ControllerService_getVersionUnion_result() {
  }

  virtual ~ControllerService_getVersionUnion_result() throw() {}

  std::vector<PluginVersion>  success;

  _ControllerService_getVersionUnion_result__isset __isset;

  void __set_success(const std::vector<PluginVersion> & val) {
    success = val;
  }

  bool operator == (const ControllerService_getVersionUnion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ControllerService_getVersionUnion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControllerService_getVersionUnion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ControllerService_getVersionUnion_presult__isset {
  _ControllerService_getVersionUnion_presult__isset() : success(false) {}
  bool success;
} _ControllerService_getVersionUnion_presult__isset;

class ControllerService_getVersionUnion_presult {
 public:


  virtual ~ControllerService_getVersionUnion_presult() throw() {}

  std::vector<PluginVersion> * success;

  _ControllerService_getVersionUnion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ControllerService_reportVersion_args__isset {
  _ControllerService_reportVersion_args__isset() : ip_addr(false), plugin_id(false), task_id(false), err_message(false) {}
  bool ip_addr;
  bool plugin_id;
  bool task_id;
  bool err_message;
} _ControllerService_reportVersion_args__isset;

class ControllerService_reportVersion_args {
 public:

  ControllerService_reportVersion_args() : ip_addr(""), plugin_id(0), task_id(0), err_message("") {
  }

  virtual ~ControllerService_reportVersion_args() throw() {}

  std::string ip_addr;
  int32_t plugin_id;
  int32_t task_id;
  std::string err_message;

  _ControllerService_reportVersion_args__isset __isset;

  void __set_ip_addr(const std::string& val) {
    ip_addr = val;
  }

  void __set_plugin_id(const int32_t val) {
    plugin_id = val;
  }

  void __set_task_id(const int32_t val) {
    task_id = val;
  }

  void __set_err_message(const std::string& val) {
    err_message = val;
  }

  bool operator == (const ControllerService_reportVersion_args & rhs) const
  {
    if (!(ip_addr == rhs.ip_addr))
      return false;
    if (!(plugin_id == rhs.plugin_id))
      return false;
    if (!(task_id == rhs.task_id))
      return false;
    if (!(err_message == rhs.err_message))
      return false;
    return true;
  }
  bool operator != (const ControllerService_reportVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControllerService_reportVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ControllerService_reportVersion_pargs {
 public:


  virtual ~ControllerService_reportVersion_pargs() throw() {}

  const std::string* ip_addr;
  const int32_t* plugin_id;
  const int32_t* task_id;
  const std::string* err_message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ControllerService_reportVersion_result__isset {
  _ControllerService_reportVersion_result__isset() : success(false) {}
  bool success;
} _ControllerService_reportVersion_result__isset;

class ControllerService_reportVersion_result {
 public:

  ControllerService_reportVersion_result() : success(0) {
  }

  virtual ~ControllerService_reportVersion_result() throw() {}

  int32_t success;

  _ControllerService_reportVersion_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ControllerService_reportVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ControllerService_reportVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControllerService_reportVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ControllerService_reportVersion_presult__isset {
  _ControllerService_reportVersion_presult__isset() : success(false) {}
  bool success;
} _ControllerService_reportVersion_presult__isset;

class ControllerService_reportVersion_presult {
 public:


  virtual ~ControllerService_reportVersion_presult() throw() {}

  int32_t* success;

  _ControllerService_reportVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ControllerService_regularCheckPlugin_args__isset {
  _ControllerService_regularCheckPlugin_args__isset() : ip_addr(false), plugin_list(false) {}
  bool ip_addr;
  bool plugin_list;
} _ControllerService_regularCheckPlugin_args__isset;

class ControllerService_regularCheckPlugin_args {
 public:

  ControllerService_regularCheckPlugin_args() : ip_addr("") {
  }

  virtual ~ControllerService_regularCheckPlugin_args() throw() {}

  std::string ip_addr;
  std::vector<Plugin>  plugin_list;

  _ControllerService_regularCheckPlugin_args__isset __isset;

  void __set_ip_addr(const std::string& val) {
    ip_addr = val;
  }

  void __set_plugin_list(const std::vector<Plugin> & val) {
    plugin_list = val;
  }

  bool operator == (const ControllerService_regularCheckPlugin_args & rhs) const
  {
    if (!(ip_addr == rhs.ip_addr))
      return false;
    if (!(plugin_list == rhs.plugin_list))
      return false;
    return true;
  }
  bool operator != (const ControllerService_regularCheckPlugin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControllerService_regularCheckPlugin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ControllerService_regularCheckPlugin_pargs {
 public:


  virtual ~ControllerService_regularCheckPlugin_pargs() throw() {}

  const std::string* ip_addr;
  const std::vector<Plugin> * plugin_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ControllerService_regularCheckPlugin_result__isset {
  _ControllerService_regularCheckPlugin_result__isset() : success(false) {}
  bool success;
} _ControllerService_regularCheckPlugin_result__isset;

class ControllerService_regularCheckPlugin_result {
 public:

  ControllerService_regularCheckPlugin_result() : success(0) {
  }

  virtual ~ControllerService_regularCheckPlugin_result() throw() {}

  int32_t success;

  _ControllerService_regularCheckPlugin_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ControllerService_regularCheckPlugin_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ControllerService_regularCheckPlugin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControllerService_regularCheckPlugin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ControllerService_regularCheckPlugin_presult__isset {
  _ControllerService_regularCheckPlugin_presult__isset() : success(false) {}
  bool success;
} _ControllerService_regularCheckPlugin_presult__isset;

class ControllerService_regularCheckPlugin_presult {
 public:


  virtual ~ControllerService_regularCheckPlugin_presult() throw() {}

  int32_t* success;

  _ControllerService_regularCheckPlugin_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ControllerService_reportHealth_args__isset {
  _ControllerService_reportHealth_args__isset() : ip_addr(false), status(false) {}
  bool ip_addr;
  bool status;
} _ControllerService_reportHealth_args__isset;

class ControllerService_reportHealth_args {
 public:

  ControllerService_reportHealth_args() : ip_addr("") {
  }

  virtual ~ControllerService_reportHealth_args() throw() {}

  std::string ip_addr;
  std::vector<PluginHealth>  status;

  _ControllerService_reportHealth_args__isset __isset;

  void __set_ip_addr(const std::string& val) {
    ip_addr = val;
  }

  void __set_status(const std::vector<PluginHealth> & val) {
    status = val;
  }

  bool operator == (const ControllerService_reportHealth_args & rhs) const
  {
    if (!(ip_addr == rhs.ip_addr))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const ControllerService_reportHealth_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControllerService_reportHealth_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ControllerService_reportHealth_pargs {
 public:


  virtual ~ControllerService_reportHealth_pargs() throw() {}

  const std::string* ip_addr;
  const std::vector<PluginHealth> * status;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ControllerService_reportHealth_result__isset {
  _ControllerService_reportHealth_result__isset() : success(false) {}
  bool success;
} _ControllerService_reportHealth_result__isset;

class ControllerService_reportHealth_result {
 public:

  ControllerService_reportHealth_result() : success(0) {
  }

  virtual ~ControllerService_reportHealth_result() throw() {}

  int32_t success;

  _ControllerService_reportHealth_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ControllerService_reportHealth_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ControllerService_reportHealth_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControllerService_reportHealth_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ControllerService_reportHealth_presult__isset {
  _ControllerService_reportHealth_presult__isset() : success(false) {}
  bool success;
} _ControllerService_reportHealth_presult__isset;

class ControllerService_reportHealth_presult {
 public:


  virtual ~ControllerService_reportHealth_presult() throw() {}

  int32_t* success;

  _ControllerService_reportHealth_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ControllerService_reportCpluginInfo_args__isset {
  _ControllerService_reportCpluginInfo_args__isset() : ip_addr(false), hostname(false), l(false), info(false) {}
  bool ip_addr;
  bool hostname;
  bool l;
  bool info;
} _ControllerService_reportCpluginInfo_args__isset;

class ControllerService_reportCpluginInfo_args {
 public:

  ControllerService_reportCpluginInfo_args() : ip_addr(""), hostname("") {
  }

  virtual ~ControllerService_reportCpluginInfo_args() throw() {}

  std::string ip_addr;
  std::string hostname;
  Location l;
  CPluginInfo info;

  _ControllerService_reportCpluginInfo_args__isset __isset;

  void __set_ip_addr(const std::string& val) {
    ip_addr = val;
  }

  void __set_hostname(const std::string& val) {
    hostname = val;
  }

  void __set_l(const Location& val) {
    l = val;
  }

  void __set_info(const CPluginInfo& val) {
    info = val;
  }

  bool operator == (const ControllerService_reportCpluginInfo_args & rhs) const
  {
    if (!(ip_addr == rhs.ip_addr))
      return false;
    if (!(hostname == rhs.hostname))
      return false;
    if (!(l == rhs.l))
      return false;
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const ControllerService_reportCpluginInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControllerService_reportCpluginInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ControllerService_reportCpluginInfo_pargs {
 public:


  virtual ~ControllerService_reportCpluginInfo_pargs() throw() {}

  const std::string* ip_addr;
  const std::string* hostname;
  const Location* l;
  const CPluginInfo* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ControllerService_reportCpluginInfo_result__isset {
  _ControllerService_reportCpluginInfo_result__isset() : success(false) {}
  bool success;
} _ControllerService_reportCpluginInfo_result__isset;

class ControllerService_reportCpluginInfo_result {
 public:

  ControllerService_reportCpluginInfo_result() : success(0) {
  }

  virtual ~ControllerService_reportCpluginInfo_result() throw() {}

  int32_t success;

  _ControllerService_reportCpluginInfo_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ControllerService_reportCpluginInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ControllerService_reportCpluginInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControllerService_reportCpluginInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ControllerService_reportCpluginInfo_presult__isset {
  _ControllerService_reportCpluginInfo_presult__isset() : success(false) {}
  bool success;
} _ControllerService_reportCpluginInfo_presult__isset;

class ControllerService_reportCpluginInfo_presult {
 public:


  virtual ~ControllerService_reportCpluginInfo_presult() throw() {}

  int32_t* success;

  _ControllerService_reportCpluginInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ControllerService_reportMoniterInfo_args__isset {
  _ControllerService_reportMoniterInfo_args__isset() : request(false) {}
  bool request;
} _ControllerService_reportMoniterInfo_args__isset;

class ControllerService_reportMoniterInfo_args {
 public:

  ControllerService_reportMoniterInfo_args() {
  }

  virtual ~ControllerService_reportMoniterInfo_args() throw() {}

  MoniterRequest request;

  _ControllerService_reportMoniterInfo_args__isset __isset;

  void __set_request(const MoniterRequest& val) {
    request = val;
  }

  bool operator == (const ControllerService_reportMoniterInfo_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const ControllerService_reportMoniterInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControllerService_reportMoniterInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ControllerService_reportMoniterInfo_pargs {
 public:


  virtual ~ControllerService_reportMoniterInfo_pargs() throw() {}

  const MoniterRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ControllerService_reportMoniterInfo_result__isset {
  _ControllerService_reportMoniterInfo_result__isset() : success(false) {}
  bool success;
} _ControllerService_reportMoniterInfo_result__isset;

class ControllerService_reportMoniterInfo_result {
 public:

  ControllerService_reportMoniterInfo_result() {
  }

  virtual ~ControllerService_reportMoniterInfo_result() throw() {}

  MoniterResponse success;

  _ControllerService_reportMoniterInfo_result__isset __isset;

  void __set_success(const MoniterResponse& val) {
    success = val;
  }

  bool operator == (const ControllerService_reportMoniterInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ControllerService_reportMoniterInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControllerService_reportMoniterInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ControllerService_reportMoniterInfo_presult__isset {
  _ControllerService_reportMoniterInfo_presult__isset() : success(false) {}
  bool success;
} _ControllerService_reportMoniterInfo_presult__isset;

class ControllerService_reportMoniterInfo_presult {
 public:


  virtual ~ControllerService_reportMoniterInfo_presult() throw() {}

  MoniterResponse* success;

  _ControllerService_reportMoniterInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ControllerServiceClient : virtual public ControllerServiceIf {
 public:
  ControllerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ControllerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t installPlugin(const Plugin& p, const std::vector<std::string> & ip_addr_list);
  void send_installPlugin(const Plugin& p, const std::vector<std::string> & ip_addr_list);
  int32_t recv_installPlugin();
  int32_t startPlugin(const Plugin& p, const std::vector<std::string> & ip_addr_list);
  void send_startPlugin(const Plugin& p, const std::vector<std::string> & ip_addr_list);
  int32_t recv_startPlugin();
  int32_t stopPlugin(const Plugin& p, const std::vector<std::string> & ip_addr_list);
  void send_stopPlugin(const Plugin& p, const std::vector<std::string> & ip_addr_list);
  int32_t recv_stopPlugin();
  int32_t restartPlugin(const Plugin& p, const std::vector<std::string> & ip_addr_list);
  void send_restartPlugin(const Plugin& p, const std::vector<std::string> & ip_addr_list);
  int32_t recv_restartPlugin();
  int32_t handlePlugin(const Operation::type op, const Plugin& p, const std::string& ip_addr);
  void send_handlePlugin(const Operation::type op, const Plugin& p, const std::string& ip_addr);
  int32_t recv_handlePlugin();
  int32_t handlePluginList(const Operation::type op, const Plugin& p, const std::vector<std::string> & ip_addr_list);
  void send_handlePluginList(const Operation::type op, const Plugin& p, const std::vector<std::string> & ip_addr_list);
  int32_t recv_handlePluginList();
  int32_t handlePluginUnion(const Operation::type op, const Plugin& p, const Department& d, const Location& l, const std::string& env);
  void send_handlePluginUnion(const Operation::type op, const Plugin& p, const Department& d, const Location& l, const std::string& env);
  int32_t recv_handlePluginUnion();
  void checkPerformance(std::vector<Performance> & _return, const Plugin& p, const std::vector<std::string> & ip_addr_list);
  void send_checkPerformance(const Plugin& p, const std::vector<std::string> & ip_addr_list);
  void recv_checkPerformance(std::vector<Performance> & _return);
  void getVersionList(std::vector<PluginVersion> & _return, const Plugin& p, const std::vector<std::string> & ip_addr_list);
  void send_getVersionList(const Plugin& p, const std::vector<std::string> & ip_addr_list);
  void recv_getVersionList(std::vector<PluginVersion> & _return);
  void getVersionUnion(std::vector<PluginVersion> & _return, const Plugin& p, const Department& d, const Location& l);
  void send_getVersionUnion(const Plugin& p, const Department& d, const Location& l);
  void recv_getVersionUnion(std::vector<PluginVersion> & _return);
  int32_t reportVersion(const std::string& ip_addr, const int32_t plugin_id, const int32_t task_id, const std::string& err_message);
  void send_reportVersion(const std::string& ip_addr, const int32_t plugin_id, const int32_t task_id, const std::string& err_message);
  int32_t recv_reportVersion();
  int32_t regularCheckPlugin(const std::string& ip_addr, const std::vector<Plugin> & plugin_list);
  void send_regularCheckPlugin(const std::string& ip_addr, const std::vector<Plugin> & plugin_list);
  int32_t recv_regularCheckPlugin();
  int32_t reportHealth(const std::string& ip_addr, const std::vector<PluginHealth> & status);
  void send_reportHealth(const std::string& ip_addr, const std::vector<PluginHealth> & status);
  int32_t recv_reportHealth();
  int32_t reportCpluginInfo(const std::string& ip_addr, const std::string& hostname, const Location& l, const CPluginInfo& info);
  void send_reportCpluginInfo(const std::string& ip_addr, const std::string& hostname, const Location& l, const CPluginInfo& info);
  int32_t recv_reportCpluginInfo();
  void reportMoniterInfo(MoniterResponse& _return, const MoniterRequest& request);
  void send_reportMoniterInfo(const MoniterRequest& request);
  void recv_reportMoniterInfo(MoniterResponse& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ControllerServiceProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<ControllerServiceIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (ControllerServiceProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_installPlugin(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startPlugin(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stopPlugin(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_restartPlugin(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_handlePlugin(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_handlePluginList(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_handlePluginUnion(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_checkPerformance(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getVersionList(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getVersionUnion(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reportVersion(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_regularCheckPlugin(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reportHealth(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reportCpluginInfo(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reportMoniterInfo(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ControllerServiceProcessor(boost::shared_ptr<ControllerServiceIf> iface) :
    iface_(iface) {
    processMap_["installPlugin"] = &ControllerServiceProcessor::process_installPlugin;
    processMap_["startPlugin"] = &ControllerServiceProcessor::process_startPlugin;
    processMap_["stopPlugin"] = &ControllerServiceProcessor::process_stopPlugin;
    processMap_["restartPlugin"] = &ControllerServiceProcessor::process_restartPlugin;
    processMap_["handlePlugin"] = &ControllerServiceProcessor::process_handlePlugin;
    processMap_["handlePluginList"] = &ControllerServiceProcessor::process_handlePluginList;
    processMap_["handlePluginUnion"] = &ControllerServiceProcessor::process_handlePluginUnion;
    processMap_["checkPerformance"] = &ControllerServiceProcessor::process_checkPerformance;
    processMap_["getVersionList"] = &ControllerServiceProcessor::process_getVersionList;
    processMap_["getVersionUnion"] = &ControllerServiceProcessor::process_getVersionUnion;
    processMap_["reportVersion"] = &ControllerServiceProcessor::process_reportVersion;
    processMap_["regularCheckPlugin"] = &ControllerServiceProcessor::process_regularCheckPlugin;
    processMap_["reportHealth"] = &ControllerServiceProcessor::process_reportHealth;
    processMap_["reportCpluginInfo"] = &ControllerServiceProcessor::process_reportCpluginInfo;
    processMap_["reportMoniterInfo"] = &ControllerServiceProcessor::process_reportMoniterInfo;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~ControllerServiceProcessor() {}
};

class ControllerServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ControllerServiceProcessorFactory(const ::boost::shared_ptr< ControllerServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ControllerServiceIfFactory > handlerFactory_;
};

class ControllerServiceMultiface : virtual public ControllerServiceIf {
 public:
  ControllerServiceMultiface(std::vector<boost::shared_ptr<ControllerServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ControllerServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ControllerServiceIf> > ifaces_;
  ControllerServiceMultiface() {}
  void add(boost::shared_ptr<ControllerServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t installPlugin(const Plugin& p, const std::vector<std::string> & ip_addr_list) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->installPlugin(p, ip_addr_list);
      } else {
        ifaces_[i]->installPlugin(p, ip_addr_list);
      }
    }
  }

  int32_t startPlugin(const Plugin& p, const std::vector<std::string> & ip_addr_list) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->startPlugin(p, ip_addr_list);
      } else {
        ifaces_[i]->startPlugin(p, ip_addr_list);
      }
    }
  }

  int32_t stopPlugin(const Plugin& p, const std::vector<std::string> & ip_addr_list) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->stopPlugin(p, ip_addr_list);
      } else {
        ifaces_[i]->stopPlugin(p, ip_addr_list);
      }
    }
  }

  int32_t restartPlugin(const Plugin& p, const std::vector<std::string> & ip_addr_list) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->restartPlugin(p, ip_addr_list);
      } else {
        ifaces_[i]->restartPlugin(p, ip_addr_list);
      }
    }
  }

  int32_t handlePlugin(const Operation::type op, const Plugin& p, const std::string& ip_addr) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->handlePlugin(op, p, ip_addr);
      } else {
        ifaces_[i]->handlePlugin(op, p, ip_addr);
      }
    }
  }

  int32_t handlePluginList(const Operation::type op, const Plugin& p, const std::vector<std::string> & ip_addr_list) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->handlePluginList(op, p, ip_addr_list);
      } else {
        ifaces_[i]->handlePluginList(op, p, ip_addr_list);
      }
    }
  }

  int32_t handlePluginUnion(const Operation::type op, const Plugin& p, const Department& d, const Location& l, const std::string& env) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->handlePluginUnion(op, p, d, l, env);
      } else {
        ifaces_[i]->handlePluginUnion(op, p, d, l, env);
      }
    }
  }

  void checkPerformance(std::vector<Performance> & _return, const Plugin& p, const std::vector<std::string> & ip_addr_list) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->checkPerformance(_return, p, ip_addr_list);
        return;
      } else {
        ifaces_[i]->checkPerformance(_return, p, ip_addr_list);
      }
    }
  }

  void getVersionList(std::vector<PluginVersion> & _return, const Plugin& p, const std::vector<std::string> & ip_addr_list) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getVersionList(_return, p, ip_addr_list);
        return;
      } else {
        ifaces_[i]->getVersionList(_return, p, ip_addr_list);
      }
    }
  }

  void getVersionUnion(std::vector<PluginVersion> & _return, const Plugin& p, const Department& d, const Location& l) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getVersionUnion(_return, p, d, l);
        return;
      } else {
        ifaces_[i]->getVersionUnion(_return, p, d, l);
      }
    }
  }

  int32_t reportVersion(const std::string& ip_addr, const int32_t plugin_id, const int32_t task_id, const std::string& err_message) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->reportVersion(ip_addr, plugin_id, task_id, err_message);
      } else {
        ifaces_[i]->reportVersion(ip_addr, plugin_id, task_id, err_message);
      }
    }
  }

  int32_t regularCheckPlugin(const std::string& ip_addr, const std::vector<Plugin> & plugin_list) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->regularCheckPlugin(ip_addr, plugin_list);
      } else {
        ifaces_[i]->regularCheckPlugin(ip_addr, plugin_list);
      }
    }
  }

  int32_t reportHealth(const std::string& ip_addr, const std::vector<PluginHealth> & status) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->reportHealth(ip_addr, status);
      } else {
        ifaces_[i]->reportHealth(ip_addr, status);
      }
    }
  }

  int32_t reportCpluginInfo(const std::string& ip_addr, const std::string& hostname, const Location& l, const CPluginInfo& info) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->reportCpluginInfo(ip_addr, hostname, l, info);
      } else {
        ifaces_[i]->reportCpluginInfo(ip_addr, hostname, l, info);
      }
    }
  }

  void reportMoniterInfo(MoniterResponse& _return, const MoniterRequest& request) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->reportMoniterInfo(_return, request);
        return;
      } else {
        ifaces_[i]->reportMoniterInfo(_return, request);
      }
    }
  }

};

} // namespace

#endif
