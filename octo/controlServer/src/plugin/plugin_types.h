/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef plugin_TYPES_H
#define plugin_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace cplugin {

struct Action {
  enum type {
    TEST = 10000,
    INSTALL = 0,
    START = 1,
    STOP = 2,
    RESTART = 3,
    UPGRADE = 4,
    ROLLBACK = 5,
    REMOVE = 6
  };
};

extern const std::map<int, const char*> _Action_VALUES_TO_NAMES;


class PluginAction {
 public:

  static const char* ascii_fingerprint; // = "B45838E2218560A2104366E601423438";
  static const uint8_t binary_fingerprint[16]; // = {0xB4,0x58,0x38,0xE2,0x21,0x85,0x60,0xA2,0x10,0x43,0x66,0xE6,0x01,0x42,0x34,0x38};

  PluginAction() : name(""), version(""), md5(""), op(static_cast<Action::type>(0)), plugin_id(0), task_id(0) {
  }

  virtual ~PluginAction() throw() {}

  std::string name;
  std::string version;
  std::string md5;
  Action::type op;
  int32_t plugin_id;
  int32_t task_id;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_version(const std::string& val) {
    version = val;
  }

  void __set_md5(const std::string& val) {
    md5 = val;
  }

  void __set_op(const Action::type val) {
    op = val;
  }

  void __set_plugin_id(const int32_t val) {
    plugin_id = val;
  }

  void __set_task_id(const int32_t val) {
    task_id = val;
  }

  bool operator == (const PluginAction & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(md5 == rhs.md5))
      return false;
    if (!(op == rhs.op))
      return false;
    if (!(plugin_id == rhs.plugin_id))
      return false;
    if (!(task_id == rhs.task_id))
      return false;
    return true;
  }
  bool operator != (const PluginAction &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PluginAction & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THostInfo__isset {
  _THostInfo__isset() : version(false) {}
  bool version;
} _THostInfo__isset;

class THostInfo {
 public:

  static const char* ascii_fingerprint; // = "2748901DF3E03B56075825ABF0FCFD25";
  static const uint8_t binary_fingerprint[16]; // = {0x27,0x48,0x90,0x1D,0xF3,0xE0,0x3B,0x56,0x07,0x58,0x25,0xAB,0xF0,0xFC,0xFD,0x25};

  THostInfo() : name(""), library_name(""), hash(""), version("") {
  }

  virtual ~THostInfo() throw() {}

  std::string name;
  std::string library_name;
  std::string hash;
  std::string version;

  _THostInfo__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_library_name(const std::string& val) {
    library_name = val;
  }

  void __set_hash(const std::string& val) {
    hash = val;
  }

  void __set_version(const std::string& val) {
    version = val;
    __isset.version = true;
  }

  bool operator == (const THostInfo & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(library_name == rhs.library_name))
      return false;
    if (!(hash == rhs.hash))
      return false;
    if (__isset.version != rhs.__isset.version)
      return false;
    else if (__isset.version && !(version == rhs.version))
      return false;
    return true;
  }
  bool operator != (const THostInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THostInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPluginInfo__isset {
  _TPluginInfo__isset() : version(false) {}
  bool version;
} _TPluginInfo__isset;

class TPluginInfo {
 public:

  static const char* ascii_fingerprint; // = "2748901DF3E03B56075825ABF0FCFD25";
  static const uint8_t binary_fingerprint[16]; // = {0x27,0x48,0x90,0x1D,0xF3,0xE0,0x3B,0x56,0x07,0x58,0x25,0xAB,0xF0,0xFC,0xFD,0x25};

  TPluginInfo() : name(""), library_name(""), hash(""), version("") {
  }

  virtual ~TPluginInfo() throw() {}

  std::string name;
  std::string library_name;
  std::string hash;
  std::string version;

  _TPluginInfo__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_library_name(const std::string& val) {
    library_name = val;
  }

  void __set_hash(const std::string& val) {
    hash = val;
  }

  void __set_version(const std::string& val) {
    version = val;
    __isset.version = true;
  }

  bool operator == (const TPluginInfo & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(library_name == rhs.library_name))
      return false;
    if (!(hash == rhs.hash))
      return false;
    if (__isset.version != rhs.__isset.version)
      return false;
    else if (__isset.version && !(version == rhs.version))
      return false;
    return true;
  }
  bool operator != (const TPluginInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPluginInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TInfos {
 public:

  static const char* ascii_fingerprint; // = "77766324C7E0FE867E2AD83CC118DDE2";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x76,0x63,0x24,0xC7,0xE0,0xFE,0x86,0x7E,0x2A,0xD8,0x3C,0xC1,0x18,0xDD,0xE2};

  TInfos() {
  }

  virtual ~TInfos() throw() {}

  THostInfo host_info;
  std::vector<TPluginInfo>  plugin_infos;

  void __set_host_info(const THostInfo& val) {
    host_info = val;
  }

  void __set_plugin_infos(const std::vector<TPluginInfo> & val) {
    plugin_infos = val;
  }

  bool operator == (const TInfos & rhs) const
  {
    if (!(host_info == rhs.host_info))
      return false;
    if (!(plugin_infos == rhs.plugin_infos))
      return false;
    return true;
  }
  bool operator != (const TInfos &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TInfos & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

} // namespace

#endif
