cmake_minimum_required(VERSION 2.6)

project(controlServer C CXX)

SET(CMAKE_CXX_FLAGS "-g -Wall -O2 -fPIC -DMUDUO_STD_STRING -DHAVE_NETINET_IN_H")

MESSAGE(STATUS "CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS}")

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake")
MESSAGE(STATUS "CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH}")

SET(PLUGIN_SRC_PATH ${CMAKE_SOURCE_DIR}/src)
MESSAGE(STATUS "PLUGIN_SRC_PATH ${PLUGIN_SRC_PATH}")

SET(COMMON_LIB_PATH ${CMAKE_SOURCE_DIR}/../common/cpp/lib)
MESSAGE(STATUS "COMMON_LIB_PATH ${COMMON_LIB_PATH}")

SET(OCTO_IDL_PATH ${CMAKE_SOURCE_DIR}/../common/idl)
MESSAGE(STATUS "OCTO_IDL_PATH ${OCTO_IDL_PATH}")

SET(THIRD_MODULE_PATH ${CMAKE_SOURCE_DIR}/module)
MESSAGE(STATUS "THIRD_MODULE_PATH ${THIRD_MODULE_PATH}")

#for output
EXECUTE_PROCESS(COMMAND mkdir ${CMAKE_SOURCE_DIR}/build)
SET(CMAKE_INSTALL_PREFIX ${CMAKE_SOURCE_DIR}/build)
MESSAGE(STATUS "CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX}")

EXECUTE_PROCESS(COMMAND mkdir ${CMAKE_INSTALL_PREFIX}/include)
SET(INCLUDE_OUTPUT_PATH ${CMAKE_INSTALL_PREFIX}/include)
MESSAGE(STATUS "INCLUDE_OUTPUT_PATH ${INCLUDE_OUTPUT_PATH}")

EXECUTE_PROCESS(COMMAND mkdir ${CMAKE_INSTALL_PREFIX}/lib)
SET(LIBRARY_OUTPUT_PATH ${CMAKE_INSTALL_PREFIX}/lib)
MESSAGE(STATUS "LIBRARY_OUTPUT_PATH ${LIBRARY_OUTPUT_PATH}")

#default binary path
SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_INSTALL_PREFIX}/bin)

#EXECUTE_PROCESS(COMMAND mkdir ${CMAKE_INSTALL_PREFIX}/controller)
#SET(CONTROLLER_PLUGIN_OUTPUT_PATH ${CMAKE_INSTALL_PREFIX}/controller)
#MESSAGE(STATUS "CONTROLLER_PLUGIN_OUTPUT_PATH ${CONTROLLER_PLUGIN_OUTPUT_PATH}")

# check exist TODO how to use find_package check?
FIND_PACKAGE(Boost REQUIRED)

# find gtest libraries
FIND_PACKAGE(Gtest REQUIRED)
MESSAGE(STATUS "GTEST_INCLUDE_DIR ${GTEST_INCLUDE_DIR}")
MESSAGE(STATUS "GTEST_LIBRARY ${GTEST_LIBRARY}")
MESSAGE(STATUS "GTEST_MOCK_LIBRARY ${GTEST_MOCK_LIBRARY}")







##############################################################
set(CMAKE_BUILD_NO_TESTS 1)

SET(CLOG_SRC_PATH ${CMAKE_SOURCE_DIR}/../cmdlog/clog)
MESSAGE(STATUS "CLOG_SRC_PATH ${CLOG_SRC_PATH}")

SET(CLOG_INCLUDE_PATH ${CLOG_SRC_PATH}/include)
MESSAGE(STATUS "CLOG_INCLUDE_PATH ${CLOG_INCLUDE_PATH}")

SET(TEMP_THRID_PATH ${CMAKE_SOURCE_DIR}/temp/)
MESSAGE(STATUS "TEMP_THRID_PATH ${TEMP_THRID_PATH}")

SET(TEMP_THRID_CLOG_PATH ${CMAKE_SOURCE_DIR}/temp/clog)
MESSAGE(STATUS "TEMP_THRID_CLOG_PATH ${TEMP_THRID_CLOG_PATH}")

SET(TEMP_THRID_CMTRACE_PATH ${CMAKE_SOURCE_DIR}/temp/cmtraceV2)
MESSAGE(STATUS "TEMP_THRID_CMTRACE_PATH ${TEMP_THRID_CMTRACE_PATH}")

SET(TEMP_THRID_CTHRIFT_PATH ${CMAKE_SOURCE_DIR}/temp/cthrift)
MESSAGE(STATUS "TEMP_THRID_CTHRIFT_PATH ${TEMP_THRID_CTHRIFT_PATH}")


EXECUTE_PROCESS(COMMAND mkdir -p ${TEMP_THRID_CMTRACE_PATH})
EXECUTE_PROCESS(COMMAND mkdir -p  ${TEMP_THRID_CLOG_PATH})
EXECUTE_PROCESS(COMMAND mkdir -p  ${TEMP_THRID_CTHRIFT_PATH})

SET(CMTRACE_SRC_ORIGIN_PATH ../mtrace/cmtrace/)
SET(CMTRACE_SRC_INCLUDE_PATH ../mtrace/cmtrace/mtrace/include/)

SET(OCTO_IDL_PATH ../common/idl)
SET(THRIFT_COMPILER  thrift)
MESSAGE(STATUS "OCTO_IDL_PATH ${OCTO_IDL_PATH}")
SET(THRIFT_GEN_CPP_PATH ${CMAKE_SOURCE_DIR}/octoidl)
MESSAGE(STATUS "THRIFT_GEN_CPP_PATH ${THRIFT_GEN_CPP_PATH}")

execute_process(COMMAND ${THRIFT_COMPILER} -r --gen cpp ${OCTO_IDL_PATH}/idl-sgagent/src/main/thrift/sgagent_service.thrift WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

execute_process(COMMAND ${THRIFT_COMPILER} -r --gen cpp ${OCTO_IDL_PATH}/idl-sgagent/src/main/thrift/sgagent_worker_service.thrift WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

execute_process(COMMAND ${THRIFT_COMPILER} -r --gen cpp ${OCTO_IDL_PATH}/idl-sgagent/src/main/thrift/sg_worker_service.thrift WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

execute_process(COMMAND ${THRIFT_COMPILER} -r --gen cpp ${OCTO_IDL_PATH}/idl-sgagent/src/main/thrift/operation_common.thrift WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

execute_process(COMMAND ${THRIFT_COMPILER} -r --gen cpp ${OCTO_IDL_PATH}/idl-config/src/main/thrift/config_service.thrift WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

execute_process(COMMAND ${THRIFT_COMPILER} -r --gen cpp ${OCTO_IDL_PATH}/idl-config/src/main/thrift/config_data.thrift WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

execute_process(COMMAND ${THRIFT_COMPILER} -r --gen cpp ${OCTO_IDL_PATH}/idl-mnsc/src/main/thrift/mnsc_service.thrift WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

execute_process(COMMAND ${THRIFT_COMPILER} -r --gen cpp ${OCTO_IDL_PATH}/idl-aggregator/src/main/thrift/aggregator_service.thrift WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

EXECUTE_PROCESS(COMMAND find ${CMAKE_SOURCE_DIR}/gen-cpp -name *.h -exec cp -t ${THRIFT_GEN_CPP_PATH} {} \;)
EXECUTE_PROCESS(COMMAND find ${CMAKE_SOURCE_DIR}/gen-cpp -name *.cpp -exec cp -t ${THRIFT_GEN_CPP_PATH} {} \;)

execute_process(COMMAND rm -rf  ${CMAKE_SOURCE_DIR}/gen-cpp)

execute_process(COMMAND rm -rf ${THRIFT_GEN_CPP_PATH}/AggregatorService_server.skeleton.cpp
        ${THRIFT_GEN_CPP_PATH}/MtConfigService_server.skeleton.cpp
        ${THRIFT_GEN_CPP_PATH}/SGAgent_server.skeleton.cpp
        ${THRIFT_GEN_CPP_PATH}/SGAgentWorker_server.skeleton.cpp
        ${THRIFT_GEN_CPP_PATH}/MNSCacheService_server.skeleton.cpp
        )


EXECUTE_PROCESS(COMMAND rm -rf  ${INCLUDE_OUTPUT_PATH}/cmtraceV2)
EXECUTE_PROCESS(COMMAND mkdir ${INCLUDE_OUTPUT_PATH}/cmtraceV2)
EXECUTE_PROCESS(COMMAND find ${CMTRACE_SRC_INCLUDE_PATH} -name *.h -exec cp -t ${INCLUDE_OUTPUT_PATH}/cmtraceV2/ {} \;)

EXECUTE_PROCESS(COMMAND rm -rf  ${INCLUDE_OUTPUT_PATH}/clog)
EXECUTE_PROCESS(COMMAND mkdir ${INCLUDE_OUTPUT_PATH}/clog)
EXECUTE_PROCESS(COMMAND find ${CLOG_INCLUDE_PATH}/clog -name *.h -exec cp -t ${INCLUDE_OUTPUT_PATH}/clog/ {} \;)

EXECUTE_PROCESS(COMMAND rm -rf  ${INCLUDE_OUTPUT_PATH}/log4cplus)
EXECUTE_PROCESS(COMMAND mkdir ${INCLUDE_OUTPUT_PATH}/log4cplus)
EXECUTE_PROCESS(COMMAND find ${CLOG_INCLUDE_PATH}/log4cplus -name *.h -exec cp -t ${INCLUDE_OUTPUT_PATH}/log4cplus/ {} \;)


SET(INCLUDE_OCTOIDL_OUTPUT_PATH ./build/include/octoidl/)
EXECUTE_PROCESS(COMMAND rm -rf ${INCLUDE_OCTOIDL_OUTPUT_PATH})
EXECUTE_PROCESS(COMMAND mkdir -p ${INCLUDE_OCTOIDL_OUTPUT_PATH})
EXECUTE_PROCESS(COMMAND find ${THRIFT_GEN_CPP_PATH} -name *.h -exec cp -t ${INCLUDE_OCTOIDL_OUTPUT_PATH} {} \;)


ADD_SUBDIRECTORY(octoidl)
ADD_SUBDIRECTORY(${CLOG_SRC_PATH} ${TEMP_THRID_CLOG_PATH})
ADD_SUBDIRECTORY(${CMTRACE_SRC_ORIGIN_PATH} ${TEMP_THRID_CMTRACE_PATH})

EXECUTE_PROCESS(COMMAND find ${CMAKE_SOURCE_DIR}/lib/ -name lib* -exec cp -t ${LIBRARY_OUTPUT_PATH} {} \;)


SET(CTHRIFT_SRC_ORIGIN_PATH ../mtransport/cthrift/src/cthrift/)
SET(INCLUDE_CTHRIFT_OUTPUT_PATH ./build/include/cthrift/)
INCLUDE_DIRECTORIES(system ./build/include/)

ADD_SUBDIRECTORY(${CTHRIFT_SRC_ORIGIN_PATH} ${TEMP_THRID_CTHRIFT_PATH})

SET(INCLUDE_CTHRIFT_OUTPUT_PATH ${INCLUDE_CTHRIFT_OUTPUT_PATH})
EXECUTE_PROCESS(COMMAND rm -rf ${INCLUDE_CTHRIFT_OUTPUT_PATH})
EXECUTE_PROCESS(COMMAND mkdir -p ${INCLUDE_CTHRIFT_OUTPUT_PATH})
SET(INCLUDE_MNS_OUTPUT_PATH  ${INCLUDE_CTHRIFT_OUTPUT_PATH}/mns_sdk)
EXECUTE_PROCESS(COMMAND rm -rf ${INCLUDE_MNS_OUTPUT_PATH})
EXECUTE_PROCESS(COMMAND mkdir -p ${INCLUDE_MNS_OUTPUT_PATH})
SET(INCLUDE_MCC_OUTPUT_PATH ${INCLUDE_CTHRIFT_OUTPUT_PATH}/mcc_sdk)
EXECUTE_PROCESS(COMMAND rm -rf ${INCLUDE_MCC_OUTPUT_PATH})
EXECUTE_PROCESS(COMMAND mkdir -p ${INCLUDE_MCC_OUTPUT_PATH})
SET(INCLUDE_UNIFORM_OUTPUT_PATH ${INCLUDE_CTHRIFT_OUTPUT_PATH}/uniform)
EXECUTE_PROCESS(COMMAND rm -rf ${INCLUDE_UNIFORM_OUTPUT_PATH})
EXECUTE_PROCESS(COMMAND mkdir -p ${INCLUDE_UNIFORM_OUTPUT_PATH})

#DO NOT add ' OR " to the path
EXECUTE_PROCESS(COMMAND find ${CTHRIFT_SRC_ORIGIN_PATH} -path  ${CTHRIFT_SRC_ORIGIN_PATH}/mns_sdk -prune -o -name *.h -print -exec cp -t ${INCLUDE_CTHRIFT_OUTPUT_PATH} {} \;)
#DO NOT add ' OR " to the path
EXECUTE_PROCESS(COMMAND find ${CTHRIFT_SRC_ORIGIN_PATH} -path  ${CTHRIFT_SRC_ORIGIN_PATH}/mns_sdk -prune -o -name *.tcc -print -exec cp -t ${INCLUDE_CTHRIFT_OUTPUT_PATH} {} \;)
EXECUTE_PROCESS(COMMAND find ${CTHRIFT_SRC_ORIGIN_PATH}/mns_sdk -name *.h -exec cp -t ${INCLUDE_MNS_OUTPUT_PATH} {} \;)
#DO NOT add ' OR " to the path
EXECUTE_PROCESS(COMMAND find ${CTHRIFT_SRC_ORIGIN_PATH} -path ${CTHRIFT_SRC_ORIGIN_PATH}/mcc_sdk -prune -o -name *.h -print -exec cp -t ${INCLUDE_CTHRIFT_OUTPUT_PATH} {} \;)
#DO NOT add ' OR " to the path
EXECUTE_PROCESS(COMMAND find ${CTHRIFT_SRC_ORIGIN_PATH} -path ${CTHRIFT_SRC_ORIGIN_PATH}/mcc_sdk -prune -o -name *.tcc -print -exec cp -t ${INCLUDE_CTHRIFT_OUTPUT_PATH} {} \;)
EXECUTE_PROCESS(COMMAND find ${CTHRIFT_SRC_ORIGIN_PATH}/mcc_sdk -name *.h -exec cp -t ${INCLUDE_MCC_OUTPUT_PATH} {} \;)
EXECUTE_PROCESS(COMMAND find ${CTHRIFT_SRC_ORIGIN_PATH}/uniform -name *.h -exec cp -t ${INCLUDE_UNIFORM_OUTPUT_PATH} {} \;)


INCLUDE_DIRECTORIES(SYSTEM ${CTHRIFT_INCLUDE_DIR})
INCLUDE_DIRECTORIES(SYSTEM ${CTHRIFT_INCLUDE_DIR}/cthrift/)

##############################################################



ADD_SUBDIRECTORY(src)

#header, plugin header will be copied inside

EXECUTE_PROCESS(COMMAND cp -rf /usr/include/boost ${INCLUDE_OUTPUT_PATH})
EXECUTE_PROCESS(COMMAND cp -rf /usr/include/muduo ${INCLUDE_OUTPUT_PATH})
EXECUTE_PROCESS(COMMAND cp -rf /usr/include/thrift ${INCLUDE_OUTPUT_PATH})

EXECUTE_PROCESS(COMMAND mkdir ${INCLUDE_OUTPUT_PATH}/zlib)
EXECUTE_PROCESS(COMMAND cp -rf /usr/include/zlib.h ${INCLUDE_OUTPUT_PATH}/zlib)
EXECUTE_PROCESS(COMMAND cp -rf /usr/include/zconf.h ${INCLUDE_OUTPUT_PATH}/zlib)

#lib, libcthrift.a will be coped inside
EXECUTE_PROCESS(COMMAND cp -rf ${COMMON_LIB_PATH}/thrift-0.8.0_build/lib/libthrift.a ${LIBRARY_OUTPUT_PATH})
EXECUTE_PROCESS(COMMAND cp -rf ${COMMON_LIB_PATH}/thrift-0.8.0_build/lib/libthriftnb.a ${LIBRARY_OUTPUT_PATH})


EXECUTE_PROCESS(COMMAND cp -rf /usr/lib64/libmuduo_net.a ${LIBRARY_OUTPUT_PATH})
EXECUTE_PROCESS(COMMAND cp -rf /usr/lib64/libmuduo_base.a
        ${LIBRARY_OUTPUT_PATH})
EXECUTE_PROCESS(COMMAND cp -rf /usr/lib64/libmuduo_http.a
        ${LIBRARY_OUTPUT_PATH})

		
#EXECUTE_PROCESS(COMMAND cp -rf ${PLUGIN_SRC_PATH}/example ${CMAKE_INSTALL_PREFIX})
