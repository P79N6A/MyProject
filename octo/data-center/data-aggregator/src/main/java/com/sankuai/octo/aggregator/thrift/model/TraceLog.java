/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sankuai.octo.aggregator.thrift.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;

import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

public class TraceLog implements org.apache.thrift.TBase<TraceLog, TraceLog._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TraceLog");

  private static final org.apache.thrift.protocol.TField TRACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("traceId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SPAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("spanId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SPAN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("spanName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LOCAL_APP_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("localAppKey", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LOCAL_HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("localHost", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField LOCAL_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("localPort", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField REMOTE_APP_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("remoteAppKey", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField REMOTE_HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("remoteHost", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField REMOTE_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("remotePort", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField COST_FIELD_DESC = new org.apache.thrift.protocol.TField("cost", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField DEBUG_FIELD_DESC = new org.apache.thrift.protocol.TField("debug", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField EXTEND_FIELD_DESC = new org.apache.thrift.protocol.TField("extend", org.apache.thrift.protocol.TType.STRING, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TraceLogStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TraceLogTupleSchemeFactory());
  }

  public String traceId; // required
  public String spanId; // required
  public String spanName; // required
  public String localAppKey; // required
  public String localHost; // required
  public int localPort; // required
  public String remoteAppKey; // required
  public String remoteHost; // required
  public int remotePort; // required
  public long start; // required
  public int cost; // required
  public int type; // required
  public int status; // required
  public int count; // required
  public int debug; // required
  public String extend; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRACE_ID((short)1, "traceId"),
    SPAN_ID((short)2, "spanId"),
    SPAN_NAME((short)3, "spanName"),
    LOCAL_APP_KEY((short)4, "localAppKey"),
    LOCAL_HOST((short)5, "localHost"),
    LOCAL_PORT((short)6, "localPort"),
    REMOTE_APP_KEY((short)7, "remoteAppKey"),
    REMOTE_HOST((short)8, "remoteHost"),
    REMOTE_PORT((short)9, "remotePort"),
    START((short)10, "start"),
    COST((short)11, "cost"),
    TYPE((short)12, "type"),
    STATUS((short)13, "status"),
    COUNT((short)14, "count"),
    DEBUG((short)15, "debug"),
    EXTEND((short)16, "extend");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRACE_ID
          return TRACE_ID;
        case 2: // SPAN_ID
          return SPAN_ID;
        case 3: // SPAN_NAME
          return SPAN_NAME;
        case 4: // LOCAL_APP_KEY
          return LOCAL_APP_KEY;
        case 5: // LOCAL_HOST
          return LOCAL_HOST;
        case 6: // LOCAL_PORT
          return LOCAL_PORT;
        case 7: // REMOTE_APP_KEY
          return REMOTE_APP_KEY;
        case 8: // REMOTE_HOST
          return REMOTE_HOST;
        case 9: // REMOTE_PORT
          return REMOTE_PORT;
        case 10: // START
          return START;
        case 11: // COST
          return COST;
        case 12: // TYPE
          return TYPE;
        case 13: // STATUS
          return STATUS;
        case 14: // COUNT
          return COUNT;
        case 15: // DEBUG
          return DEBUG;
        case 16: // EXTEND
          return EXTEND;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LOCALPORT_ISSET_ID = 0;
  private static final int __REMOTEPORT_ISSET_ID = 1;
  private static final int __START_ISSET_ID = 2;
  private static final int __COST_ISSET_ID = 3;
  private static final int __TYPE_ISSET_ID = 4;
  private static final int __STATUS_ISSET_ID = 5;
  private static final int __COUNT_ISSET_ID = 6;
  private static final int __DEBUG_ISSET_ID = 7;
  private BitSet __isset_bit_vector = new BitSet(8);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRACE_ID, new org.apache.thrift.meta_data.FieldMetaData("traceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPAN_ID, new org.apache.thrift.meta_data.FieldMetaData("spanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPAN_NAME, new org.apache.thrift.meta_data.FieldMetaData("spanName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCAL_APP_KEY, new org.apache.thrift.meta_data.FieldMetaData("localAppKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCAL_HOST, new org.apache.thrift.meta_data.FieldMetaData("localHost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCAL_PORT, new org.apache.thrift.meta_data.FieldMetaData("localPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REMOTE_APP_KEY, new org.apache.thrift.meta_data.FieldMetaData("remoteAppKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMOTE_HOST, new org.apache.thrift.meta_data.FieldMetaData("remoteHost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMOTE_PORT, new org.apache.thrift.meta_data.FieldMetaData("remotePort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COST, new org.apache.thrift.meta_data.FieldMetaData("cost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEBUG, new org.apache.thrift.meta_data.FieldMetaData("debug", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXTEND, new org.apache.thrift.meta_data.FieldMetaData("extend", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TraceLog.class, metaDataMap);
  }

  public TraceLog() {
  }

  public TraceLog(
    String traceId,
    String spanId,
    String spanName,
    String localAppKey,
    String localHost,
    int localPort,
    String remoteAppKey,
    String remoteHost,
    int remotePort,
    long start,
    int cost,
    int type,
    int status,
    int count,
    int debug,
    String extend)
  {
    this();
    this.traceId = traceId;
    this.spanId = spanId;
    this.spanName = spanName;
    this.localAppKey = localAppKey;
    this.localHost = localHost;
    this.localPort = localPort;
    setLocalPortIsSet(true);
    this.remoteAppKey = remoteAppKey;
    this.remoteHost = remoteHost;
    this.remotePort = remotePort;
    setRemotePortIsSet(true);
    this.start = start;
    setStartIsSet(true);
    this.cost = cost;
    setCostIsSet(true);
    this.type = type;
    setTypeIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.count = count;
    setCountIsSet(true);
    this.debug = debug;
    setDebugIsSet(true);
    this.extend = extend;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TraceLog(TraceLog other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetTraceId()) {
      this.traceId = other.traceId;
    }
    if (other.isSetSpanId()) {
      this.spanId = other.spanId;
    }
    if (other.isSetSpanName()) {
      this.spanName = other.spanName;
    }
    if (other.isSetLocalAppKey()) {
      this.localAppKey = other.localAppKey;
    }
    if (other.isSetLocalHost()) {
      this.localHost = other.localHost;
    }
    this.localPort = other.localPort;
    if (other.isSetRemoteAppKey()) {
      this.remoteAppKey = other.remoteAppKey;
    }
    if (other.isSetRemoteHost()) {
      this.remoteHost = other.remoteHost;
    }
    this.remotePort = other.remotePort;
    this.start = other.start;
    this.cost = other.cost;
    this.type = other.type;
    this.status = other.status;
    this.count = other.count;
    this.debug = other.debug;
    if (other.isSetExtend()) {
      this.extend = other.extend;
    }
  }

  public TraceLog deepCopy() {
    return new TraceLog(this);
  }

  @Override
  public void clear() {
    this.traceId = null;
    this.spanId = null;
    this.spanName = null;
    this.localAppKey = null;
    this.localHost = null;
    setLocalPortIsSet(false);
    this.localPort = 0;
    this.remoteAppKey = null;
    this.remoteHost = null;
    setRemotePortIsSet(false);
    this.remotePort = 0;
    setStartIsSet(false);
    this.start = 0;
    setCostIsSet(false);
    this.cost = 0;
    setTypeIsSet(false);
    this.type = 0;
    setStatusIsSet(false);
    this.status = 0;
    setCountIsSet(false);
    this.count = 0;
    setDebugIsSet(false);
    this.debug = 0;
    this.extend = null;
  }

  public String getTraceId() {
    return this.traceId;
  }

  public TraceLog setTraceId(String traceId) {
    this.traceId = traceId;
    return this;
  }

  public void unsetTraceId() {
    this.traceId = null;
  }

  /** Returns true if field traceId is set (has been assigned a value) and false otherwise */
  public boolean isSetTraceId() {
    return this.traceId != null;
  }

  public void setTraceIdIsSet(boolean value) {
    if (!value) {
      this.traceId = null;
    }
  }

  public String getSpanId() {
    return this.spanId;
  }

  public TraceLog setSpanId(String spanId) {
    this.spanId = spanId;
    return this;
  }

  public void unsetSpanId() {
    this.spanId = null;
  }

  /** Returns true if field spanId is set (has been assigned a value) and false otherwise */
  public boolean isSetSpanId() {
    return this.spanId != null;
  }

  public void setSpanIdIsSet(boolean value) {
    if (!value) {
      this.spanId = null;
    }
  }

  public String getSpanName() {
    return this.spanName;
  }

  public TraceLog setSpanName(String spanName) {
    this.spanName = spanName;
    return this;
  }

  public void unsetSpanName() {
    this.spanName = null;
  }

  /** Returns true if field spanName is set (has been assigned a value) and false otherwise */
  public boolean isSetSpanName() {
    return this.spanName != null;
  }

  public void setSpanNameIsSet(boolean value) {
    if (!value) {
      this.spanName = null;
    }
  }

  public String getLocalAppKey() {
    return this.localAppKey;
  }

  public TraceLog setLocalAppKey(String localAppKey) {
    this.localAppKey = localAppKey;
    return this;
  }

  public void unsetLocalAppKey() {
    this.localAppKey = null;
  }

  /** Returns true if field localAppKey is set (has been assigned a value) and false otherwise */
  public boolean isSetLocalAppKey() {
    return this.localAppKey != null;
  }

  public void setLocalAppKeyIsSet(boolean value) {
    if (!value) {
      this.localAppKey = null;
    }
  }

  public String getLocalHost() {
    return this.localHost;
  }

  public TraceLog setLocalHost(String localHost) {
    this.localHost = localHost;
    return this;
  }

  public void unsetLocalHost() {
    this.localHost = null;
  }

  /** Returns true if field localHost is set (has been assigned a value) and false otherwise */
  public boolean isSetLocalHost() {
    return this.localHost != null;
  }

  public void setLocalHostIsSet(boolean value) {
    if (!value) {
      this.localHost = null;
    }
  }

  public int getLocalPort() {
    return this.localPort;
  }

  public TraceLog setLocalPort(int localPort) {
    this.localPort = localPort;
    setLocalPortIsSet(true);
    return this;
  }

  public void unsetLocalPort() {
    __isset_bit_vector.clear(__LOCALPORT_ISSET_ID);
  }

  /** Returns true if field localPort is set (has been assigned a value) and false otherwise */
  public boolean isSetLocalPort() {
    return __isset_bit_vector.get(__LOCALPORT_ISSET_ID);
  }

  public void setLocalPortIsSet(boolean value) {
    __isset_bit_vector.set(__LOCALPORT_ISSET_ID, value);
  }

  public String getRemoteAppKey() {
    return this.remoteAppKey;
  }

  public TraceLog setRemoteAppKey(String remoteAppKey) {
    this.remoteAppKey = remoteAppKey;
    return this;
  }

  public void unsetRemoteAppKey() {
    this.remoteAppKey = null;
  }

  /** Returns true if field remoteAppKey is set (has been assigned a value) and false otherwise */
  public boolean isSetRemoteAppKey() {
    return this.remoteAppKey != null;
  }

  public void setRemoteAppKeyIsSet(boolean value) {
    if (!value) {
      this.remoteAppKey = null;
    }
  }

  public String getRemoteHost() {
    return this.remoteHost;
  }

  public TraceLog setRemoteHost(String remoteHost) {
    this.remoteHost = remoteHost;
    return this;
  }

  public void unsetRemoteHost() {
    this.remoteHost = null;
  }

  /** Returns true if field remoteHost is set (has been assigned a value) and false otherwise */
  public boolean isSetRemoteHost() {
    return this.remoteHost != null;
  }

  public void setRemoteHostIsSet(boolean value) {
    if (!value) {
      this.remoteHost = null;
    }
  }

  public int getRemotePort() {
    return this.remotePort;
  }

  public TraceLog setRemotePort(int remotePort) {
    this.remotePort = remotePort;
    setRemotePortIsSet(true);
    return this;
  }

  public void unsetRemotePort() {
    __isset_bit_vector.clear(__REMOTEPORT_ISSET_ID);
  }

  /** Returns true if field remotePort is set (has been assigned a value) and false otherwise */
  public boolean isSetRemotePort() {
    return __isset_bit_vector.get(__REMOTEPORT_ISSET_ID);
  }

  public void setRemotePortIsSet(boolean value) {
    __isset_bit_vector.set(__REMOTEPORT_ISSET_ID, value);
  }

  public long getStart() {
    return this.start;
  }

  public TraceLog setStart(long start) {
    this.start = start;
    setStartIsSet(true);
    return this;
  }

  public void unsetStart() {
    __isset_bit_vector.clear(__START_ISSET_ID);
  }

  /** Returns true if field start is set (has been assigned a value) and false otherwise */
  public boolean isSetStart() {
    return __isset_bit_vector.get(__START_ISSET_ID);
  }

  public void setStartIsSet(boolean value) {
    __isset_bit_vector.set(__START_ISSET_ID, value);
  }

  public int getCost() {
    return this.cost;
  }

  public TraceLog setCost(int cost) {
    this.cost = cost;
    setCostIsSet(true);
    return this;
  }

  public void unsetCost() {
    __isset_bit_vector.clear(__COST_ISSET_ID);
  }

  /** Returns true if field cost is set (has been assigned a value) and false otherwise */
  public boolean isSetCost() {
    return __isset_bit_vector.get(__COST_ISSET_ID);
  }

  public void setCostIsSet(boolean value) {
    __isset_bit_vector.set(__COST_ISSET_ID, value);
  }

  public int getType() {
    return this.type;
  }

  public TraceLog setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bit_vector.clear(__TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return __isset_bit_vector.get(__TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bit_vector.set(__TYPE_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public TraceLog setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bit_vector.clear(__STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return __isset_bit_vector.get(__STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bit_vector.set(__STATUS_ISSET_ID, value);
  }

  public int getCount() {
    return this.count;
  }

  public TraceLog setCount(int count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bit_vector.clear(__COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return __isset_bit_vector.get(__COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bit_vector.set(__COUNT_ISSET_ID, value);
  }

  public int getDebug() {
    return this.debug;
  }

  public TraceLog setDebug(int debug) {
    this.debug = debug;
    setDebugIsSet(true);
    return this;
  }

  public void unsetDebug() {
    __isset_bit_vector.clear(__DEBUG_ISSET_ID);
  }

  /** Returns true if field debug is set (has been assigned a value) and false otherwise */
  public boolean isSetDebug() {
    return __isset_bit_vector.get(__DEBUG_ISSET_ID);
  }

  public void setDebugIsSet(boolean value) {
    __isset_bit_vector.set(__DEBUG_ISSET_ID, value);
  }

  public String getExtend() {
    return this.extend;
  }

  public TraceLog setExtend(String extend) {
    this.extend = extend;
    return this;
  }

  public void unsetExtend() {
    this.extend = null;
  }

  /** Returns true if field extend is set (has been assigned a value) and false otherwise */
  public boolean isSetExtend() {
    return this.extend != null;
  }

  public void setExtendIsSet(boolean value) {
    if (!value) {
      this.extend = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRACE_ID:
      if (value == null) {
        unsetTraceId();
      } else {
        setTraceId((String)value);
      }
      break;

    case SPAN_ID:
      if (value == null) {
        unsetSpanId();
      } else {
        setSpanId((String)value);
      }
      break;

    case SPAN_NAME:
      if (value == null) {
        unsetSpanName();
      } else {
        setSpanName((String)value);
      }
      break;

    case LOCAL_APP_KEY:
      if (value == null) {
        unsetLocalAppKey();
      } else {
        setLocalAppKey((String)value);
      }
      break;

    case LOCAL_HOST:
      if (value == null) {
        unsetLocalHost();
      } else {
        setLocalHost((String)value);
      }
      break;

    case LOCAL_PORT:
      if (value == null) {
        unsetLocalPort();
      } else {
        setLocalPort((Integer)value);
      }
      break;

    case REMOTE_APP_KEY:
      if (value == null) {
        unsetRemoteAppKey();
      } else {
        setRemoteAppKey((String)value);
      }
      break;

    case REMOTE_HOST:
      if (value == null) {
        unsetRemoteHost();
      } else {
        setRemoteHost((String)value);
      }
      break;

    case REMOTE_PORT:
      if (value == null) {
        unsetRemotePort();
      } else {
        setRemotePort((Integer)value);
      }
      break;

    case START:
      if (value == null) {
        unsetStart();
      } else {
        setStart((Long)value);
      }
      break;

    case COST:
      if (value == null) {
        unsetCost();
      } else {
        setCost((Integer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Integer)value);
      }
      break;

    case DEBUG:
      if (value == null) {
        unsetDebug();
      } else {
        setDebug((Integer)value);
      }
      break;

    case EXTEND:
      if (value == null) {
        unsetExtend();
      } else {
        setExtend((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRACE_ID:
      return getTraceId();

    case SPAN_ID:
      return getSpanId();

    case SPAN_NAME:
      return getSpanName();

    case LOCAL_APP_KEY:
      return getLocalAppKey();

    case LOCAL_HOST:
      return getLocalHost();

    case LOCAL_PORT:
      return Integer.valueOf(getLocalPort());

    case REMOTE_APP_KEY:
      return getRemoteAppKey();

    case REMOTE_HOST:
      return getRemoteHost();

    case REMOTE_PORT:
      return Integer.valueOf(getRemotePort());

    case START:
      return Long.valueOf(getStart());

    case COST:
      return Integer.valueOf(getCost());

    case TYPE:
      return Integer.valueOf(getType());

    case STATUS:
      return Integer.valueOf(getStatus());

    case COUNT:
      return Integer.valueOf(getCount());

    case DEBUG:
      return Integer.valueOf(getDebug());

    case EXTEND:
      return getExtend();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRACE_ID:
      return isSetTraceId();
    case SPAN_ID:
      return isSetSpanId();
    case SPAN_NAME:
      return isSetSpanName();
    case LOCAL_APP_KEY:
      return isSetLocalAppKey();
    case LOCAL_HOST:
      return isSetLocalHost();
    case LOCAL_PORT:
      return isSetLocalPort();
    case REMOTE_APP_KEY:
      return isSetRemoteAppKey();
    case REMOTE_HOST:
      return isSetRemoteHost();
    case REMOTE_PORT:
      return isSetRemotePort();
    case START:
      return isSetStart();
    case COST:
      return isSetCost();
    case TYPE:
      return isSetType();
    case STATUS:
      return isSetStatus();
    case COUNT:
      return isSetCount();
    case DEBUG:
      return isSetDebug();
    case EXTEND:
      return isSetExtend();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TraceLog)
      return this.equals((TraceLog)that);
    return false;
  }

  public boolean equals(TraceLog that) {
    if (that == null)
      return false;

    boolean this_present_traceId = true && this.isSetTraceId();
    boolean that_present_traceId = true && that.isSetTraceId();
    if (this_present_traceId || that_present_traceId) {
      if (!(this_present_traceId && that_present_traceId))
        return false;
      if (!this.traceId.equals(that.traceId))
        return false;
    }

    boolean this_present_spanId = true && this.isSetSpanId();
    boolean that_present_spanId = true && that.isSetSpanId();
    if (this_present_spanId || that_present_spanId) {
      if (!(this_present_spanId && that_present_spanId))
        return false;
      if (!this.spanId.equals(that.spanId))
        return false;
    }

    boolean this_present_spanName = true && this.isSetSpanName();
    boolean that_present_spanName = true && that.isSetSpanName();
    if (this_present_spanName || that_present_spanName) {
      if (!(this_present_spanName && that_present_spanName))
        return false;
      if (!this.spanName.equals(that.spanName))
        return false;
    }

    boolean this_present_localAppKey = true && this.isSetLocalAppKey();
    boolean that_present_localAppKey = true && that.isSetLocalAppKey();
    if (this_present_localAppKey || that_present_localAppKey) {
      if (!(this_present_localAppKey && that_present_localAppKey))
        return false;
      if (!this.localAppKey.equals(that.localAppKey))
        return false;
    }

    boolean this_present_localHost = true && this.isSetLocalHost();
    boolean that_present_localHost = true && that.isSetLocalHost();
    if (this_present_localHost || that_present_localHost) {
      if (!(this_present_localHost && that_present_localHost))
        return false;
      if (!this.localHost.equals(that.localHost))
        return false;
    }

    boolean this_present_localPort = true;
    boolean that_present_localPort = true;
    if (this_present_localPort || that_present_localPort) {
      if (!(this_present_localPort && that_present_localPort))
        return false;
      if (this.localPort != that.localPort)
        return false;
    }

    boolean this_present_remoteAppKey = true && this.isSetRemoteAppKey();
    boolean that_present_remoteAppKey = true && that.isSetRemoteAppKey();
    if (this_present_remoteAppKey || that_present_remoteAppKey) {
      if (!(this_present_remoteAppKey && that_present_remoteAppKey))
        return false;
      if (!this.remoteAppKey.equals(that.remoteAppKey))
        return false;
    }

    boolean this_present_remoteHost = true && this.isSetRemoteHost();
    boolean that_present_remoteHost = true && that.isSetRemoteHost();
    if (this_present_remoteHost || that_present_remoteHost) {
      if (!(this_present_remoteHost && that_present_remoteHost))
        return false;
      if (!this.remoteHost.equals(that.remoteHost))
        return false;
    }

    boolean this_present_remotePort = true;
    boolean that_present_remotePort = true;
    if (this_present_remotePort || that_present_remotePort) {
      if (!(this_present_remotePort && that_present_remotePort))
        return false;
      if (this.remotePort != that.remotePort)
        return false;
    }

    boolean this_present_start = true;
    boolean that_present_start = true;
    if (this_present_start || that_present_start) {
      if (!(this_present_start && that_present_start))
        return false;
      if (this.start != that.start)
        return false;
    }

    boolean this_present_cost = true;
    boolean that_present_cost = true;
    if (this_present_cost || that_present_cost) {
      if (!(this_present_cost && that_present_cost))
        return false;
      if (this.cost != that.cost)
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_count = true;
    boolean that_present_count = true;
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    boolean this_present_debug = true;
    boolean that_present_debug = true;
    if (this_present_debug || that_present_debug) {
      if (!(this_present_debug && that_present_debug))
        return false;
      if (this.debug != that.debug)
        return false;
    }

    boolean this_present_extend = true && this.isSetExtend();
    boolean that_present_extend = true && that.isSetExtend();
    if (this_present_extend || that_present_extend) {
      if (!(this_present_extend && that_present_extend))
        return false;
      if (!this.extend.equals(that.extend))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TraceLog other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TraceLog typedOther = (TraceLog)other;

    lastComparison = Boolean.valueOf(isSetTraceId()).compareTo(typedOther.isSetTraceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traceId, typedOther.traceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpanId()).compareTo(typedOther.isSetSpanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spanId, typedOther.spanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpanName()).compareTo(typedOther.isSetSpanName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpanName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spanName, typedOther.spanName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocalAppKey()).compareTo(typedOther.isSetLocalAppKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocalAppKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localAppKey, typedOther.localAppKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocalHost()).compareTo(typedOther.isSetLocalHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocalHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localHost, typedOther.localHost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocalPort()).compareTo(typedOther.isSetLocalPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocalPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localPort, typedOther.localPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemoteAppKey()).compareTo(typedOther.isSetRemoteAppKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemoteAppKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remoteAppKey, typedOther.remoteAppKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemoteHost()).compareTo(typedOther.isSetRemoteHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemoteHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remoteHost, typedOther.remoteHost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemotePort()).compareTo(typedOther.isSetRemotePort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemotePort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remotePort, typedOther.remotePort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStart()).compareTo(typedOther.isSetStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, typedOther.start);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCost()).compareTo(typedOther.isSetCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cost, typedOther.cost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDebug()).compareTo(typedOther.isSetDebug());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebug()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debug, typedOther.debug);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtend()).compareTo(typedOther.isSetExtend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extend, typedOther.extend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TraceLog(");
    boolean first = true;

    sb.append("traceId:");
    if (this.traceId == null) {
      sb.append("null");
    } else {
      sb.append(this.traceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("spanId:");
    if (this.spanId == null) {
      sb.append("null");
    } else {
      sb.append(this.spanId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("spanName:");
    if (this.spanName == null) {
      sb.append("null");
    } else {
      sb.append(this.spanName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("localAppKey:");
    if (this.localAppKey == null) {
      sb.append("null");
    } else {
      sb.append(this.localAppKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("localHost:");
    if (this.localHost == null) {
      sb.append("null");
    } else {
      sb.append(this.localHost);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("localPort:");
    sb.append(this.localPort);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remoteAppKey:");
    if (this.remoteAppKey == null) {
      sb.append("null");
    } else {
      sb.append(this.remoteAppKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remoteHost:");
    if (this.remoteHost == null) {
      sb.append("null");
    } else {
      sb.append(this.remoteHost);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remotePort:");
    sb.append(this.remotePort);
    first = false;
    if (!first) sb.append(", ");
    sb.append("start:");
    sb.append(this.start);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cost:");
    sb.append(this.cost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("count:");
    sb.append(this.count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("debug:");
    sb.append(this.debug);
    first = false;
    if (!first) sb.append(", ");
    sb.append("extend:");
    if (this.extend == null) {
      sb.append("null");
    } else {
      sb.append(this.extend);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TraceLogStandardSchemeFactory implements SchemeFactory {
    public TraceLogStandardScheme getScheme() {
      return new TraceLogStandardScheme();
    }
  }

  private static class TraceLogStandardScheme extends StandardScheme<TraceLog> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TraceLog struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRACE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.traceId = iprot.readString();
              struct.setTraceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SPAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.spanId = iprot.readString();
              struct.setSpanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SPAN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.spanName = iprot.readString();
              struct.setSpanNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LOCAL_APP_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.localAppKey = iprot.readString();
              struct.setLocalAppKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LOCAL_HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.localHost = iprot.readString();
              struct.setLocalHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LOCAL_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.localPort = iprot.readI32();
              struct.setLocalPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REMOTE_APP_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remoteAppKey = iprot.readString();
              struct.setRemoteAppKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REMOTE_HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remoteHost = iprot.readString();
              struct.setRemoteHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REMOTE_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.remotePort = iprot.readI32();
              struct.setRemotePortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // START
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.start = iprot.readI64();
              struct.setStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // COST
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cost = iprot.readI32();
              struct.setCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.count = iprot.readI32();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DEBUG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.debug = iprot.readI32();
              struct.setDebugIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // EXTEND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.extend = iprot.readString();
              struct.setExtendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TraceLog struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.traceId != null) {
        oprot.writeFieldBegin(TRACE_ID_FIELD_DESC);
        oprot.writeString(struct.traceId);
        oprot.writeFieldEnd();
      }
      if (struct.spanId != null) {
        oprot.writeFieldBegin(SPAN_ID_FIELD_DESC);
        oprot.writeString(struct.spanId);
        oprot.writeFieldEnd();
      }
      if (struct.spanName != null) {
        oprot.writeFieldBegin(SPAN_NAME_FIELD_DESC);
        oprot.writeString(struct.spanName);
        oprot.writeFieldEnd();
      }
      if (struct.localAppKey != null) {
        oprot.writeFieldBegin(LOCAL_APP_KEY_FIELD_DESC);
        oprot.writeString(struct.localAppKey);
        oprot.writeFieldEnd();
      }
      if (struct.localHost != null) {
        oprot.writeFieldBegin(LOCAL_HOST_FIELD_DESC);
        oprot.writeString(struct.localHost);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOCAL_PORT_FIELD_DESC);
      oprot.writeI32(struct.localPort);
      oprot.writeFieldEnd();
      if (struct.remoteAppKey != null) {
        oprot.writeFieldBegin(REMOTE_APP_KEY_FIELD_DESC);
        oprot.writeString(struct.remoteAppKey);
        oprot.writeFieldEnd();
      }
      if (struct.remoteHost != null) {
        oprot.writeFieldBegin(REMOTE_HOST_FIELD_DESC);
        oprot.writeString(struct.remoteHost);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REMOTE_PORT_FIELD_DESC);
      oprot.writeI32(struct.remotePort);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_FIELD_DESC);
      oprot.writeI64(struct.start);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COST_FIELD_DESC);
      oprot.writeI32(struct.cost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COUNT_FIELD_DESC);
      oprot.writeI32(struct.count);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEBUG_FIELD_DESC);
      oprot.writeI32(struct.debug);
      oprot.writeFieldEnd();
      if (struct.extend != null) {
        oprot.writeFieldBegin(EXTEND_FIELD_DESC);
        oprot.writeString(struct.extend);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TraceLogTupleSchemeFactory implements SchemeFactory {
    public TraceLogTupleScheme getScheme() {
      return new TraceLogTupleScheme();
    }
  }

  private static class TraceLogTupleScheme extends TupleScheme<TraceLog> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TraceLog struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTraceId()) {
        optionals.set(0);
      }
      if (struct.isSetSpanId()) {
        optionals.set(1);
      }
      if (struct.isSetSpanName()) {
        optionals.set(2);
      }
      if (struct.isSetLocalAppKey()) {
        optionals.set(3);
      }
      if (struct.isSetLocalHost()) {
        optionals.set(4);
      }
      if (struct.isSetLocalPort()) {
        optionals.set(5);
      }
      if (struct.isSetRemoteAppKey()) {
        optionals.set(6);
      }
      if (struct.isSetRemoteHost()) {
        optionals.set(7);
      }
      if (struct.isSetRemotePort()) {
        optionals.set(8);
      }
      if (struct.isSetStart()) {
        optionals.set(9);
      }
      if (struct.isSetCost()) {
        optionals.set(10);
      }
      if (struct.isSetType()) {
        optionals.set(11);
      }
      if (struct.isSetStatus()) {
        optionals.set(12);
      }
      if (struct.isSetCount()) {
        optionals.set(13);
      }
      if (struct.isSetDebug()) {
        optionals.set(14);
      }
      if (struct.isSetExtend()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetTraceId()) {
        oprot.writeString(struct.traceId);
      }
      if (struct.isSetSpanId()) {
        oprot.writeString(struct.spanId);
      }
      if (struct.isSetSpanName()) {
        oprot.writeString(struct.spanName);
      }
      if (struct.isSetLocalAppKey()) {
        oprot.writeString(struct.localAppKey);
      }
      if (struct.isSetLocalHost()) {
        oprot.writeString(struct.localHost);
      }
      if (struct.isSetLocalPort()) {
        oprot.writeI32(struct.localPort);
      }
      if (struct.isSetRemoteAppKey()) {
        oprot.writeString(struct.remoteAppKey);
      }
      if (struct.isSetRemoteHost()) {
        oprot.writeString(struct.remoteHost);
      }
      if (struct.isSetRemotePort()) {
        oprot.writeI32(struct.remotePort);
      }
      if (struct.isSetStart()) {
        oprot.writeI64(struct.start);
      }
      if (struct.isSetCost()) {
        oprot.writeI32(struct.cost);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetCount()) {
        oprot.writeI32(struct.count);
      }
      if (struct.isSetDebug()) {
        oprot.writeI32(struct.debug);
      }
      if (struct.isSetExtend()) {
        oprot.writeString(struct.extend);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TraceLog struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.traceId = iprot.readString();
        struct.setTraceIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.spanId = iprot.readString();
        struct.setSpanIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.spanName = iprot.readString();
        struct.setSpanNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.localAppKey = iprot.readString();
        struct.setLocalAppKeyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.localHost = iprot.readString();
        struct.setLocalHostIsSet(true);
      }
      if (incoming.get(5)) {
        struct.localPort = iprot.readI32();
        struct.setLocalPortIsSet(true);
      }
      if (incoming.get(6)) {
        struct.remoteAppKey = iprot.readString();
        struct.setRemoteAppKeyIsSet(true);
      }
      if (incoming.get(7)) {
        struct.remoteHost = iprot.readString();
        struct.setRemoteHostIsSet(true);
      }
      if (incoming.get(8)) {
        struct.remotePort = iprot.readI32();
        struct.setRemotePortIsSet(true);
      }
      if (incoming.get(9)) {
        struct.start = iprot.readI64();
        struct.setStartIsSet(true);
      }
      if (incoming.get(10)) {
        struct.cost = iprot.readI32();
        struct.setCostIsSet(true);
      }
      if (incoming.get(11)) {
        struct.type = iprot.readI32();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(13)) {
        struct.count = iprot.readI32();
        struct.setCountIsSet(true);
      }
      if (incoming.get(14)) {
        struct.debug = iprot.readI32();
        struct.setDebugIsSet(true);
      }
      if (incoming.get(15)) {
        struct.extend = iprot.readString();
        struct.setExtendIsSet(true);
      }
    }
  }

}

