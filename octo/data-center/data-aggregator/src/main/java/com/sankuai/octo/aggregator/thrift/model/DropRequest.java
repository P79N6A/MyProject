/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sankuai.octo.aggregator.thrift.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;

import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

public class DropRequest implements org.apache.thrift.TBase<DropRequest, DropRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DropRequest");

  private static final org.apache.thrift.protocol.TField APPKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appkey", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("host", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField REMOTE_APPKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("remoteAppkey", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SPANNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("spanname", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DropRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DropRequestTupleSchemeFactory());
  }

  public String appkey; // required
  public String host; // required
  public String remoteAppkey; // required
  public String spanname; // required
  public long start; // required
  public long count; // required
  public int type; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APPKEY((short)1, "appkey"),
    HOST((short)2, "host"),
    REMOTE_APPKEY((short)3, "remoteAppkey"),
    SPANNAME((short)4, "spanname"),
    START((short)5, "start"),
    COUNT((short)6, "count"),
    TYPE((short)7, "type");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APPKEY
          return APPKEY;
        case 2: // HOST
          return HOST;
        case 3: // REMOTE_APPKEY
          return REMOTE_APPKEY;
        case 4: // SPANNAME
          return SPANNAME;
        case 5: // START
          return START;
        case 6: // COUNT
          return COUNT;
        case 7: // TYPE
          return TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __START_ISSET_ID = 0;
  private static final int __COUNT_ISSET_ID = 1;
  private static final int __TYPE_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APPKEY, new org.apache.thrift.meta_data.FieldMetaData("appkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOST, new org.apache.thrift.meta_data.FieldMetaData("host", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMOTE_APPKEY, new org.apache.thrift.meta_data.FieldMetaData("remoteAppkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPANNAME, new org.apache.thrift.meta_data.FieldMetaData("spanname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DropRequest.class, metaDataMap);
  }

  public DropRequest() {
  }

  public DropRequest(
    String appkey,
    String host,
    String remoteAppkey,
    String spanname,
    long start,
    long count,
    int type)
  {
    this();
    this.appkey = appkey;
    this.host = host;
    this.remoteAppkey = remoteAppkey;
    this.spanname = spanname;
    this.start = start;
    setStartIsSet(true);
    this.count = count;
    setCountIsSet(true);
    this.type = type;
    setTypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DropRequest(DropRequest other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetAppkey()) {
      this.appkey = other.appkey;
    }
    if (other.isSetHost()) {
      this.host = other.host;
    }
    if (other.isSetRemoteAppkey()) {
      this.remoteAppkey = other.remoteAppkey;
    }
    if (other.isSetSpanname()) {
      this.spanname = other.spanname;
    }
    this.start = other.start;
    this.count = other.count;
    this.type = other.type;
  }

  public DropRequest deepCopy() {
    return new DropRequest(this);
  }

  @Override
  public void clear() {
    this.appkey = null;
    this.host = null;
    this.remoteAppkey = null;
    this.spanname = null;
    setStartIsSet(false);
    this.start = 0;
    setCountIsSet(false);
    this.count = 0;
    setTypeIsSet(false);
    this.type = 0;
  }

  public String getAppkey() {
    return this.appkey;
  }

  public DropRequest setAppkey(String appkey) {
    this.appkey = appkey;
    return this;
  }

  public void unsetAppkey() {
    this.appkey = null;
  }

  /** Returns true if field appkey is set (has been assigned a value) and false otherwise */
  public boolean isSetAppkey() {
    return this.appkey != null;
  }

  public void setAppkeyIsSet(boolean value) {
    if (!value) {
      this.appkey = null;
    }
  }

  public String getHost() {
    return this.host;
  }

  public DropRequest setHost(String host) {
    this.host = host;
    return this;
  }

  public void unsetHost() {
    this.host = null;
  }

  /** Returns true if field host is set (has been assigned a value) and false otherwise */
  public boolean isSetHost() {
    return this.host != null;
  }

  public void setHostIsSet(boolean value) {
    if (!value) {
      this.host = null;
    }
  }

  public String getRemoteAppkey() {
    return this.remoteAppkey;
  }

  public DropRequest setRemoteAppkey(String remoteAppkey) {
    this.remoteAppkey = remoteAppkey;
    return this;
  }

  public void unsetRemoteAppkey() {
    this.remoteAppkey = null;
  }

  /** Returns true if field remoteAppkey is set (has been assigned a value) and false otherwise */
  public boolean isSetRemoteAppkey() {
    return this.remoteAppkey != null;
  }

  public void setRemoteAppkeyIsSet(boolean value) {
    if (!value) {
      this.remoteAppkey = null;
    }
  }

  public String getSpanname() {
    return this.spanname;
  }

  public DropRequest setSpanname(String spanname) {
    this.spanname = spanname;
    return this;
  }

  public void unsetSpanname() {
    this.spanname = null;
  }

  /** Returns true if field spanname is set (has been assigned a value) and false otherwise */
  public boolean isSetSpanname() {
    return this.spanname != null;
  }

  public void setSpannameIsSet(boolean value) {
    if (!value) {
      this.spanname = null;
    }
  }

  public long getStart() {
    return this.start;
  }

  public DropRequest setStart(long start) {
    this.start = start;
    setStartIsSet(true);
    return this;
  }

  public void unsetStart() {
    __isset_bit_vector.clear(__START_ISSET_ID);
  }

  /** Returns true if field start is set (has been assigned a value) and false otherwise */
  public boolean isSetStart() {
    return __isset_bit_vector.get(__START_ISSET_ID);
  }

  public void setStartIsSet(boolean value) {
    __isset_bit_vector.set(__START_ISSET_ID, value);
  }

  public long getCount() {
    return this.count;
  }

  public DropRequest setCount(long count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bit_vector.clear(__COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return __isset_bit_vector.get(__COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bit_vector.set(__COUNT_ISSET_ID, value);
  }

  public int getType() {
    return this.type;
  }

  public DropRequest setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bit_vector.clear(__TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return __isset_bit_vector.get(__TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bit_vector.set(__TYPE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case APPKEY:
      if (value == null) {
        unsetAppkey();
      } else {
        setAppkey((String)value);
      }
      break;

    case HOST:
      if (value == null) {
        unsetHost();
      } else {
        setHost((String)value);
      }
      break;

    case REMOTE_APPKEY:
      if (value == null) {
        unsetRemoteAppkey();
      } else {
        setRemoteAppkey((String)value);
      }
      break;

    case SPANNAME:
      if (value == null) {
        unsetSpanname();
      } else {
        setSpanname((String)value);
      }
      break;

    case START:
      if (value == null) {
        unsetStart();
      } else {
        setStart((Long)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Long)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APPKEY:
      return getAppkey();

    case HOST:
      return getHost();

    case REMOTE_APPKEY:
      return getRemoteAppkey();

    case SPANNAME:
      return getSpanname();

    case START:
      return Long.valueOf(getStart());

    case COUNT:
      return Long.valueOf(getCount());

    case TYPE:
      return Integer.valueOf(getType());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APPKEY:
      return isSetAppkey();
    case HOST:
      return isSetHost();
    case REMOTE_APPKEY:
      return isSetRemoteAppkey();
    case SPANNAME:
      return isSetSpanname();
    case START:
      return isSetStart();
    case COUNT:
      return isSetCount();
    case TYPE:
      return isSetType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DropRequest)
      return this.equals((DropRequest)that);
    return false;
  }

  public boolean equals(DropRequest that) {
    if (that == null)
      return false;

    boolean this_present_appkey = true && this.isSetAppkey();
    boolean that_present_appkey = true && that.isSetAppkey();
    if (this_present_appkey || that_present_appkey) {
      if (!(this_present_appkey && that_present_appkey))
        return false;
      if (!this.appkey.equals(that.appkey))
        return false;
    }

    boolean this_present_host = true && this.isSetHost();
    boolean that_present_host = true && that.isSetHost();
    if (this_present_host || that_present_host) {
      if (!(this_present_host && that_present_host))
        return false;
      if (!this.host.equals(that.host))
        return false;
    }

    boolean this_present_remoteAppkey = true && this.isSetRemoteAppkey();
    boolean that_present_remoteAppkey = true && that.isSetRemoteAppkey();
    if (this_present_remoteAppkey || that_present_remoteAppkey) {
      if (!(this_present_remoteAppkey && that_present_remoteAppkey))
        return false;
      if (!this.remoteAppkey.equals(that.remoteAppkey))
        return false;
    }

    boolean this_present_spanname = true && this.isSetSpanname();
    boolean that_present_spanname = true && that.isSetSpanname();
    if (this_present_spanname || that_present_spanname) {
      if (!(this_present_spanname && that_present_spanname))
        return false;
      if (!this.spanname.equals(that.spanname))
        return false;
    }

    boolean this_present_start = true;
    boolean that_present_start = true;
    if (this_present_start || that_present_start) {
      if (!(this_present_start && that_present_start))
        return false;
      if (this.start != that.start)
        return false;
    }

    boolean this_present_count = true;
    boolean that_present_count = true;
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(DropRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DropRequest typedOther = (DropRequest)other;

    lastComparison = Boolean.valueOf(isSetAppkey()).compareTo(typedOther.isSetAppkey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppkey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appkey, typedOther.appkey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHost()).compareTo(typedOther.isSetHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, typedOther.host);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemoteAppkey()).compareTo(typedOther.isSetRemoteAppkey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemoteAppkey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remoteAppkey, typedOther.remoteAppkey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpanname()).compareTo(typedOther.isSetSpanname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpanname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spanname, typedOther.spanname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStart()).compareTo(typedOther.isSetStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, typedOther.start);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DropRequest(");
    boolean first = true;

    sb.append("appkey:");
    if (this.appkey == null) {
      sb.append("null");
    } else {
      sb.append(this.appkey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("host:");
    if (this.host == null) {
      sb.append("null");
    } else {
      sb.append(this.host);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remoteAppkey:");
    if (this.remoteAppkey == null) {
      sb.append("null");
    } else {
      sb.append(this.remoteAppkey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("spanname:");
    if (this.spanname == null) {
      sb.append("null");
    } else {
      sb.append(this.spanname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("start:");
    sb.append(this.start);
    first = false;
    if (!first) sb.append(", ");
    sb.append("count:");
    sb.append(this.count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DropRequestStandardSchemeFactory implements SchemeFactory {
    public DropRequestStandardScheme getScheme() {
      return new DropRequestStandardScheme();
    }
  }

  private static class DropRequestStandardScheme extends StandardScheme<DropRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DropRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APPKEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appkey = iprot.readString();
              struct.setAppkeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.host = iprot.readString();
              struct.setHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REMOTE_APPKEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remoteAppkey = iprot.readString();
              struct.setRemoteAppkeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SPANNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.spanname = iprot.readString();
              struct.setSpannameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // START
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.start = iprot.readI64();
              struct.setStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.count = iprot.readI64();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DropRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.appkey != null) {
        oprot.writeFieldBegin(APPKEY_FIELD_DESC);
        oprot.writeString(struct.appkey);
        oprot.writeFieldEnd();
      }
      if (struct.host != null) {
        oprot.writeFieldBegin(HOST_FIELD_DESC);
        oprot.writeString(struct.host);
        oprot.writeFieldEnd();
      }
      if (struct.remoteAppkey != null) {
        oprot.writeFieldBegin(REMOTE_APPKEY_FIELD_DESC);
        oprot.writeString(struct.remoteAppkey);
        oprot.writeFieldEnd();
      }
      if (struct.spanname != null) {
        oprot.writeFieldBegin(SPANNAME_FIELD_DESC);
        oprot.writeString(struct.spanname);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_FIELD_DESC);
      oprot.writeI64(struct.start);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COUNT_FIELD_DESC);
      oprot.writeI64(struct.count);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DropRequestTupleSchemeFactory implements SchemeFactory {
    public DropRequestTupleScheme getScheme() {
      return new DropRequestTupleScheme();
    }
  }

  private static class DropRequestTupleScheme extends TupleScheme<DropRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DropRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAppkey()) {
        optionals.set(0);
      }
      if (struct.isSetHost()) {
        optionals.set(1);
      }
      if (struct.isSetRemoteAppkey()) {
        optionals.set(2);
      }
      if (struct.isSetSpanname()) {
        optionals.set(3);
      }
      if (struct.isSetStart()) {
        optionals.set(4);
      }
      if (struct.isSetCount()) {
        optionals.set(5);
      }
      if (struct.isSetType()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetAppkey()) {
        oprot.writeString(struct.appkey);
      }
      if (struct.isSetHost()) {
        oprot.writeString(struct.host);
      }
      if (struct.isSetRemoteAppkey()) {
        oprot.writeString(struct.remoteAppkey);
      }
      if (struct.isSetSpanname()) {
        oprot.writeString(struct.spanname);
      }
      if (struct.isSetStart()) {
        oprot.writeI64(struct.start);
      }
      if (struct.isSetCount()) {
        oprot.writeI64(struct.count);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DropRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.appkey = iprot.readString();
        struct.setAppkeyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.host = iprot.readString();
        struct.setHostIsSet(true);
      }
      if (incoming.get(2)) {
        struct.remoteAppkey = iprot.readString();
        struct.setRemoteAppkeyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.spanname = iprot.readString();
        struct.setSpannameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.start = iprot.readI64();
        struct.setStartIsSet(true);
      }
      if (incoming.get(5)) {
        struct.count = iprot.readI64();
        struct.setCountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.type = iprot.readI32();
        struct.setTypeIsSet(true);
      }
    }
  }

}

