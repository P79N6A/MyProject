package com.sankuai.octo.service; /**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;

public class DetectorService {

  public interface Iface {

    public void check(String env, String appkey, String path, List<String> providers, int scanRoundCounter, long timestamp) throws org.apache.thrift.TException;

    public void userDefinedHttpCheck(String env, String appkey, String path, List<String> providers, String checkUrl, int scanRoundCounter, long timestamp) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void check(String env, String appkey, String path, List<String> providers, int scanRoundCounter, long timestamp, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.check_call> resultHandler) throws org.apache.thrift.TException;

    public void userDefinedHttpCheck(String env, String appkey, String path, List<String> providers, String checkUrl, int scanRoundCounter, long timestamp, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.userDefinedHttpCheck_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void check(String env, String appkey, String path, List<String> providers, int scanRoundCounter, long timestamp) throws org.apache.thrift.TException
    {
      send_check(env, appkey, path, providers, scanRoundCounter, timestamp);
      recv_check();
    }

    public void send_check(String env, String appkey, String path, List<String> providers, int scanRoundCounter, long timestamp) throws org.apache.thrift.TException
    {
      check_args args = new check_args();
      args.setEnv(env);
      args.setAppkey(appkey);
      args.setPath(path);
      args.setProviders(providers);
      args.setScanRoundCounter(scanRoundCounter);
      args.setTimestamp(timestamp);
      sendBase("check", args);
    }

    public void recv_check() throws org.apache.thrift.TException
    {
      check_result result = new check_result();
      receiveBase(result, "check");
      return;
    }

    public void userDefinedHttpCheck(String env, String appkey, String path, List<String> providers, String checkUrl, int scanRoundCounter, long timestamp) throws org.apache.thrift.TException
    {
      send_userDefinedHttpCheck(env, appkey, path, providers, checkUrl, scanRoundCounter, timestamp);
      recv_userDefinedHttpCheck();
    }

    public void send_userDefinedHttpCheck(String env, String appkey, String path, List<String> providers, String checkUrl, int scanRoundCounter, long timestamp) throws org.apache.thrift.TException
    {
      userDefinedHttpCheck_args args = new userDefinedHttpCheck_args();
      args.setEnv(env);
      args.setAppkey(appkey);
      args.setPath(path);
      args.setProviders(providers);
      args.setCheckUrl(checkUrl);
      args.setScanRoundCounter(scanRoundCounter);
      args.setTimestamp(timestamp);
      sendBase("userDefinedHttpCheck", args);
    }

    public void recv_userDefinedHttpCheck() throws org.apache.thrift.TException
    {
      userDefinedHttpCheck_result result = new userDefinedHttpCheck_result();
      receiveBase(result, "userDefinedHttpCheck");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void check(String env, String appkey, String path, List<String> providers, int scanRoundCounter, long timestamp, org.apache.thrift.async.AsyncMethodCallback<check_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      check_call method_call = new check_call(env, appkey, path, providers, scanRoundCounter, timestamp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class check_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String env;
      private String appkey;
      private String path;
      private List<String> providers;
      private int scanRoundCounter;
      private long timestamp;
      public check_call(String env, String appkey, String path, List<String> providers, int scanRoundCounter, long timestamp, org.apache.thrift.async.AsyncMethodCallback<check_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.env = env;
        this.appkey = appkey;
        this.path = path;
        this.providers = providers;
        this.scanRoundCounter = scanRoundCounter;
        this.timestamp = timestamp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("check", org.apache.thrift.protocol.TMessageType.CALL, 0));
        check_args args = new check_args();
        args.setEnv(env);
        args.setAppkey(appkey);
        args.setPath(path);
        args.setProviders(providers);
        args.setScanRoundCounter(scanRoundCounter);
        args.setTimestamp(timestamp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_check();
      }
    }

    public void userDefinedHttpCheck(String env, String appkey, String path, List<String> providers, String checkUrl, int scanRoundCounter, long timestamp, org.apache.thrift.async.AsyncMethodCallback<userDefinedHttpCheck_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      userDefinedHttpCheck_call method_call = new userDefinedHttpCheck_call(env, appkey, path, providers, checkUrl, scanRoundCounter, timestamp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class userDefinedHttpCheck_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String env;
      private String appkey;
      private String path;
      private List<String> providers;
      private String checkUrl;
      private int scanRoundCounter;
      private long timestamp;
      public userDefinedHttpCheck_call(String env, String appkey, String path, List<String> providers, String checkUrl, int scanRoundCounter, long timestamp, org.apache.thrift.async.AsyncMethodCallback<userDefinedHttpCheck_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.env = env;
        this.appkey = appkey;
        this.path = path;
        this.providers = providers;
        this.checkUrl = checkUrl;
        this.scanRoundCounter = scanRoundCounter;
        this.timestamp = timestamp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("userDefinedHttpCheck", org.apache.thrift.protocol.TMessageType.CALL, 0));
        userDefinedHttpCheck_args args = new userDefinedHttpCheck_args();
        args.setEnv(env);
        args.setAppkey(appkey);
        args.setPath(path);
        args.setProviders(providers);
        args.setCheckUrl(checkUrl);
        args.setScanRoundCounter(scanRoundCounter);
        args.setTimestamp(timestamp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_userDefinedHttpCheck();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("check", new check());
      processMap.put("userDefinedHttpCheck", new userDefinedHttpCheck());
      return processMap;
    }

    private static class check<I extends Iface> extends org.apache.thrift.ProcessFunction<I, check_args> {
      public check() {
        super("check");
      }

      protected check_args getEmptyArgsInstance() {
        return new check_args();
      }

      protected check_result getResult(I iface, check_args args) throws org.apache.thrift.TException {
        check_result result = new check_result();
        iface.check(args.env, args.appkey, args.path, args.providers, args.scanRoundCounter, args.timestamp);
        return result;
      }
    }

    private static class userDefinedHttpCheck<I extends Iface> extends org.apache.thrift.ProcessFunction<I, userDefinedHttpCheck_args> {
      public userDefinedHttpCheck() {
        super("userDefinedHttpCheck");
      }

      protected userDefinedHttpCheck_args getEmptyArgsInstance() {
        return new userDefinedHttpCheck_args();
      }

      protected userDefinedHttpCheck_result getResult(I iface, userDefinedHttpCheck_args args) throws org.apache.thrift.TException {
        userDefinedHttpCheck_result result = new userDefinedHttpCheck_result();
        iface.userDefinedHttpCheck(args.env, args.appkey, args.path, args.providers, args.checkUrl, args.scanRoundCounter, args.timestamp);
        return result;
      }
    }

  }

  public static class check_args implements org.apache.thrift.TBase<check_args, check_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("check_args");

    private static final org.apache.thrift.protocol.TField ENV_FIELD_DESC = new org.apache.thrift.protocol.TField("env", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField APPKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appkey", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PROVIDERS_FIELD_DESC = new org.apache.thrift.protocol.TField("providers", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField SCAN_ROUND_COUNTER_FIELD_DESC = new org.apache.thrift.protocol.TField("scanRoundCounter", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new check_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new check_argsTupleSchemeFactory());
    }

    public String env; // required
    public String appkey; // required
    public String path; // required
    public List<String> providers; // required
    public int scanRoundCounter; // required
    public long timestamp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENV((short)1, "env"),
      APPKEY((short)2, "appkey"),
      PATH((short)3, "path"),
      PROVIDERS((short)4, "providers"),
      SCAN_ROUND_COUNTER((short)5, "scanRoundCounter"),
      TIMESTAMP((short)6, "timestamp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENV
            return ENV;
          case 2: // APPKEY
            return APPKEY;
          case 3: // PATH
            return PATH;
          case 4: // PROVIDERS
            return PROVIDERS;
          case 5: // SCAN_ROUND_COUNTER
            return SCAN_ROUND_COUNTER;
          case 6: // TIMESTAMP
            return TIMESTAMP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SCANROUNDCOUNTER_ISSET_ID = 0;
    private static final int __TIMESTAMP_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENV, new org.apache.thrift.meta_data.FieldMetaData("env", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.APPKEY, new org.apache.thrift.meta_data.FieldMetaData("appkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROVIDERS, new org.apache.thrift.meta_data.FieldMetaData("providers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.SCAN_ROUND_COUNTER, new org.apache.thrift.meta_data.FieldMetaData("scanRoundCounter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(check_args.class, metaDataMap);
    }

    public check_args() {
    }

    public check_args(
      String env,
      String appkey,
      String path,
      List<String> providers,
      int scanRoundCounter,
      long timestamp)
    {
      this();
      this.env = env;
      this.appkey = appkey;
      this.path = path;
      this.providers = providers;
      this.scanRoundCounter = scanRoundCounter;
      setScanRoundCounterIsSet(true);
      this.timestamp = timestamp;
      setTimestampIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public check_args(check_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetEnv()) {
        this.env = other.env;
      }
      if (other.isSetAppkey()) {
        this.appkey = other.appkey;
      }
      if (other.isSetPath()) {
        this.path = other.path;
      }
      if (other.isSetProviders()) {
        List<String> __this__providers = new ArrayList<String>();
        for (String other_element : other.providers) {
          __this__providers.add(other_element);
        }
        this.providers = __this__providers;
      }
      this.scanRoundCounter = other.scanRoundCounter;
      this.timestamp = other.timestamp;
    }

    public check_args deepCopy() {
      return new check_args(this);
    }

    @Override
    public void clear() {
      this.env = null;
      this.appkey = null;
      this.path = null;
      this.providers = null;
      setScanRoundCounterIsSet(false);
      this.scanRoundCounter = 0;
      setTimestampIsSet(false);
      this.timestamp = 0;
    }

    public String getEnv() {
      return this.env;
    }

    public check_args setEnv(String env) {
      this.env = env;
      return this;
    }

    public void unsetEnv() {
      this.env = null;
    }

    /** Returns true if field env is set (has been assigned a value) and false otherwise */
    public boolean isSetEnv() {
      return this.env != null;
    }

    public void setEnvIsSet(boolean value) {
      if (!value) {
        this.env = null;
      }
    }

    public String getAppkey() {
      return this.appkey;
    }

    public check_args setAppkey(String appkey) {
      this.appkey = appkey;
      return this;
    }

    public void unsetAppkey() {
      this.appkey = null;
    }

    /** Returns true if field appkey is set (has been assigned a value) and false otherwise */
    public boolean isSetAppkey() {
      return this.appkey != null;
    }

    public void setAppkeyIsSet(boolean value) {
      if (!value) {
        this.appkey = null;
      }
    }

    public String getPath() {
      return this.path;
    }

    public check_args setPath(String path) {
      this.path = path;
      return this;
    }

    public void unsetPath() {
      this.path = null;
    }

    /** Returns true if field path is set (has been assigned a value) and false otherwise */
    public boolean isSetPath() {
      return this.path != null;
    }

    public void setPathIsSet(boolean value) {
      if (!value) {
        this.path = null;
      }
    }

    public int getProvidersSize() {
      return (this.providers == null) ? 0 : this.providers.size();
    }

    public java.util.Iterator<String> getProvidersIterator() {
      return (this.providers == null) ? null : this.providers.iterator();
    }

    public void addToProviders(String elem) {
      if (this.providers == null) {
        this.providers = new ArrayList<String>();
      }
      this.providers.add(elem);
    }

    public List<String> getProviders() {
      return this.providers;
    }

    public check_args setProviders(List<String> providers) {
      this.providers = providers;
      return this;
    }

    public void unsetProviders() {
      this.providers = null;
    }

    /** Returns true if field providers is set (has been assigned a value) and false otherwise */
    public boolean isSetProviders() {
      return this.providers != null;
    }

    public void setProvidersIsSet(boolean value) {
      if (!value) {
        this.providers = null;
      }
    }

    public int getScanRoundCounter() {
      return this.scanRoundCounter;
    }

    public check_args setScanRoundCounter(int scanRoundCounter) {
      this.scanRoundCounter = scanRoundCounter;
      setScanRoundCounterIsSet(true);
      return this;
    }

    public void unsetScanRoundCounter() {
      __isset_bit_vector.clear(__SCANROUNDCOUNTER_ISSET_ID);
    }

    /** Returns true if field scanRoundCounter is set (has been assigned a value) and false otherwise */
    public boolean isSetScanRoundCounter() {
      return __isset_bit_vector.get(__SCANROUNDCOUNTER_ISSET_ID);
    }

    public void setScanRoundCounterIsSet(boolean value) {
      __isset_bit_vector.set(__SCANROUNDCOUNTER_ISSET_ID, value);
    }

    public long getTimestamp() {
      return this.timestamp;
    }

    public check_args setTimestamp(long timestamp) {
      this.timestamp = timestamp;
      setTimestampIsSet(true);
      return this;
    }

    public void unsetTimestamp() {
      __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
    }

    /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetTimestamp() {
      return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
    }

    public void setTimestampIsSet(boolean value) {
      __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENV:
        if (value == null) {
          unsetEnv();
        } else {
          setEnv((String)value);
        }
        break;

      case APPKEY:
        if (value == null) {
          unsetAppkey();
        } else {
          setAppkey((String)value);
        }
        break;

      case PATH:
        if (value == null) {
          unsetPath();
        } else {
          setPath((String)value);
        }
        break;

      case PROVIDERS:
        if (value == null) {
          unsetProviders();
        } else {
          setProviders((List<String>)value);
        }
        break;

      case SCAN_ROUND_COUNTER:
        if (value == null) {
          unsetScanRoundCounter();
        } else {
          setScanRoundCounter((Integer)value);
        }
        break;

      case TIMESTAMP:
        if (value == null) {
          unsetTimestamp();
        } else {
          setTimestamp((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENV:
        return getEnv();

      case APPKEY:
        return getAppkey();

      case PATH:
        return getPath();

      case PROVIDERS:
        return getProviders();

      case SCAN_ROUND_COUNTER:
        return Integer.valueOf(getScanRoundCounter());

      case TIMESTAMP:
        return Long.valueOf(getTimestamp());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENV:
        return isSetEnv();
      case APPKEY:
        return isSetAppkey();
      case PATH:
        return isSetPath();
      case PROVIDERS:
        return isSetProviders();
      case SCAN_ROUND_COUNTER:
        return isSetScanRoundCounter();
      case TIMESTAMP:
        return isSetTimestamp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof check_args)
        return this.equals((check_args)that);
      return false;
    }

    public boolean equals(check_args that) {
      if (that == null)
        return false;

      boolean this_present_env = true && this.isSetEnv();
      boolean that_present_env = true && that.isSetEnv();
      if (this_present_env || that_present_env) {
        if (!(this_present_env && that_present_env))
          return false;
        if (!this.env.equals(that.env))
          return false;
      }

      boolean this_present_appkey = true && this.isSetAppkey();
      boolean that_present_appkey = true && that.isSetAppkey();
      if (this_present_appkey || that_present_appkey) {
        if (!(this_present_appkey && that_present_appkey))
          return false;
        if (!this.appkey.equals(that.appkey))
          return false;
      }

      boolean this_present_path = true && this.isSetPath();
      boolean that_present_path = true && that.isSetPath();
      if (this_present_path || that_present_path) {
        if (!(this_present_path && that_present_path))
          return false;
        if (!this.path.equals(that.path))
          return false;
      }

      boolean this_present_providers = true && this.isSetProviders();
      boolean that_present_providers = true && that.isSetProviders();
      if (this_present_providers || that_present_providers) {
        if (!(this_present_providers && that_present_providers))
          return false;
        if (!this.providers.equals(that.providers))
          return false;
      }

      boolean this_present_scanRoundCounter = true;
      boolean that_present_scanRoundCounter = true;
      if (this_present_scanRoundCounter || that_present_scanRoundCounter) {
        if (!(this_present_scanRoundCounter && that_present_scanRoundCounter))
          return false;
        if (this.scanRoundCounter != that.scanRoundCounter)
          return false;
      }

      boolean this_present_timestamp = true;
      boolean that_present_timestamp = true;
      if (this_present_timestamp || that_present_timestamp) {
        if (!(this_present_timestamp && that_present_timestamp))
          return false;
        if (this.timestamp != that.timestamp)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(check_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      check_args typedOther = (check_args)other;

      lastComparison = Boolean.valueOf(isSetEnv()).compareTo(typedOther.isSetEnv());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnv()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.env, typedOther.env);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAppkey()).compareTo(typedOther.isSetAppkey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppkey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appkey, typedOther.appkey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPath()).compareTo(typedOther.isSetPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, typedOther.path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProviders()).compareTo(typedOther.isSetProviders());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProviders()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.providers, typedOther.providers);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetScanRoundCounter()).compareTo(typedOther.isSetScanRoundCounter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScanRoundCounter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scanRoundCounter, typedOther.scanRoundCounter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("check_args(");
      boolean first = true;

      sb.append("env:");
      if (this.env == null) {
        sb.append("null");
      } else {
        sb.append(this.env);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("appkey:");
      if (this.appkey == null) {
        sb.append("null");
      } else {
        sb.append(this.appkey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("path:");
      if (this.path == null) {
        sb.append("null");
      } else {
        sb.append(this.path);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("providers:");
      if (this.providers == null) {
        sb.append("null");
      } else {
        sb.append(this.providers);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("scanRoundCounter:");
      sb.append(this.scanRoundCounter);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timestamp:");
      sb.append(this.timestamp);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class check_argsStandardSchemeFactory implements SchemeFactory {
      public check_argsStandardScheme getScheme() {
        return new check_argsStandardScheme();
      }
    }

    private static class check_argsStandardScheme extends StandardScheme<check_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, check_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENV
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.env = iprot.readString();
                struct.setEnvIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // APPKEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appkey = iprot.readString();
                struct.setAppkeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.path = iprot.readString();
                struct.setPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PROVIDERS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.providers = new ArrayList<String>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    String _elem2; // required
                    _elem2 = iprot.readString();
                    struct.providers.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setProvidersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SCAN_ROUND_COUNTER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.scanRoundCounter = iprot.readI32();
                struct.setScanRoundCounterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.timestamp = iprot.readI64();
                struct.setTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, check_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.env != null) {
          oprot.writeFieldBegin(ENV_FIELD_DESC);
          oprot.writeString(struct.env);
          oprot.writeFieldEnd();
        }
        if (struct.appkey != null) {
          oprot.writeFieldBegin(APPKEY_FIELD_DESC);
          oprot.writeString(struct.appkey);
          oprot.writeFieldEnd();
        }
        if (struct.path != null) {
          oprot.writeFieldBegin(PATH_FIELD_DESC);
          oprot.writeString(struct.path);
          oprot.writeFieldEnd();
        }
        if (struct.providers != null) {
          oprot.writeFieldBegin(PROVIDERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.providers.size()));
            for (String _iter3 : struct.providers)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SCAN_ROUND_COUNTER_FIELD_DESC);
        oprot.writeI32(struct.scanRoundCounter);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.timestamp);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class check_argsTupleSchemeFactory implements SchemeFactory {
      public check_argsTupleScheme getScheme() {
        return new check_argsTupleScheme();
      }
    }

    private static class check_argsTupleScheme extends TupleScheme<check_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, check_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEnv()) {
          optionals.set(0);
        }
        if (struct.isSetAppkey()) {
          optionals.set(1);
        }
        if (struct.isSetPath()) {
          optionals.set(2);
        }
        if (struct.isSetProviders()) {
          optionals.set(3);
        }
        if (struct.isSetScanRoundCounter()) {
          optionals.set(4);
        }
        if (struct.isSetTimestamp()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetEnv()) {
          oprot.writeString(struct.env);
        }
        if (struct.isSetAppkey()) {
          oprot.writeString(struct.appkey);
        }
        if (struct.isSetPath()) {
          oprot.writeString(struct.path);
        }
        if (struct.isSetProviders()) {
          {
            oprot.writeI32(struct.providers.size());
            for (String _iter4 : struct.providers)
            {
              oprot.writeString(_iter4);
            }
          }
        }
        if (struct.isSetScanRoundCounter()) {
          oprot.writeI32(struct.scanRoundCounter);
        }
        if (struct.isSetTimestamp()) {
          oprot.writeI64(struct.timestamp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, check_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.env = iprot.readString();
          struct.setEnvIsSet(true);
        }
        if (incoming.get(1)) {
          struct.appkey = iprot.readString();
          struct.setAppkeyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.path = iprot.readString();
          struct.setPathIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.providers = new ArrayList<String>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              String _elem7; // required
              _elem7 = iprot.readString();
              struct.providers.add(_elem7);
            }
          }
          struct.setProvidersIsSet(true);
        }
        if (incoming.get(4)) {
          struct.scanRoundCounter = iprot.readI32();
          struct.setScanRoundCounterIsSet(true);
        }
        if (incoming.get(5)) {
          struct.timestamp = iprot.readI64();
          struct.setTimestampIsSet(true);
        }
      }
    }

  }

  public static class check_result implements org.apache.thrift.TBase<check_result, check_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("check_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new check_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new check_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(check_result.class, metaDataMap);
    }

    public check_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public check_result(check_result other) {
    }

    public check_result deepCopy() {
      return new check_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof check_result)
        return this.equals((check_result)that);
      return false;
    }

    public boolean equals(check_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(check_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      check_result typedOther = (check_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("check_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class check_resultStandardSchemeFactory implements SchemeFactory {
      public check_resultStandardScheme getScheme() {
        return new check_resultStandardScheme();
      }
    }

    private static class check_resultStandardScheme extends StandardScheme<check_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, check_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, check_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class check_resultTupleSchemeFactory implements SchemeFactory {
      public check_resultTupleScheme getScheme() {
        return new check_resultTupleScheme();
      }
    }

    private static class check_resultTupleScheme extends TupleScheme<check_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, check_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, check_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class userDefinedHttpCheck_args implements org.apache.thrift.TBase<userDefinedHttpCheck_args, userDefinedHttpCheck_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userDefinedHttpCheck_args");

    private static final org.apache.thrift.protocol.TField ENV_FIELD_DESC = new org.apache.thrift.protocol.TField("env", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField APPKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appkey", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PROVIDERS_FIELD_DESC = new org.apache.thrift.protocol.TField("providers", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField CHECK_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("checkUrl", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField SCAN_ROUND_COUNTER_FIELD_DESC = new org.apache.thrift.protocol.TField("scanRoundCounter", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userDefinedHttpCheck_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userDefinedHttpCheck_argsTupleSchemeFactory());
    }

    public String env; // required
    public String appkey; // required
    public String path; // required
    public List<String> providers; // required
    public String checkUrl; // required
    public int scanRoundCounter; // required
    public long timestamp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENV((short)1, "env"),
      APPKEY((short)2, "appkey"),
      PATH((short)3, "path"),
      PROVIDERS((short)4, "providers"),
      CHECK_URL((short)5, "checkUrl"),
      SCAN_ROUND_COUNTER((short)6, "scanRoundCounter"),
      TIMESTAMP((short)7, "timestamp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENV
            return ENV;
          case 2: // APPKEY
            return APPKEY;
          case 3: // PATH
            return PATH;
          case 4: // PROVIDERS
            return PROVIDERS;
          case 5: // CHECK_URL
            return CHECK_URL;
          case 6: // SCAN_ROUND_COUNTER
            return SCAN_ROUND_COUNTER;
          case 7: // TIMESTAMP
            return TIMESTAMP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SCANROUNDCOUNTER_ISSET_ID = 0;
    private static final int __TIMESTAMP_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENV, new org.apache.thrift.meta_data.FieldMetaData("env", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.APPKEY, new org.apache.thrift.meta_data.FieldMetaData("appkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROVIDERS, new org.apache.thrift.meta_data.FieldMetaData("providers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.CHECK_URL, new org.apache.thrift.meta_data.FieldMetaData("checkUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SCAN_ROUND_COUNTER, new org.apache.thrift.meta_data.FieldMetaData("scanRoundCounter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userDefinedHttpCheck_args.class, metaDataMap);
    }

    public userDefinedHttpCheck_args() {
    }

    public userDefinedHttpCheck_args(
      String env,
      String appkey,
      String path,
      List<String> providers,
      String checkUrl,
      int scanRoundCounter,
      long timestamp)
    {
      this();
      this.env = env;
      this.appkey = appkey;
      this.path = path;
      this.providers = providers;
      this.checkUrl = checkUrl;
      this.scanRoundCounter = scanRoundCounter;
      setScanRoundCounterIsSet(true);
      this.timestamp = timestamp;
      setTimestampIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userDefinedHttpCheck_args(userDefinedHttpCheck_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetEnv()) {
        this.env = other.env;
      }
      if (other.isSetAppkey()) {
        this.appkey = other.appkey;
      }
      if (other.isSetPath()) {
        this.path = other.path;
      }
      if (other.isSetProviders()) {
        List<String> __this__providers = new ArrayList<String>();
        for (String other_element : other.providers) {
          __this__providers.add(other_element);
        }
        this.providers = __this__providers;
      }
      if (other.isSetCheckUrl()) {
        this.checkUrl = other.checkUrl;
      }
      this.scanRoundCounter = other.scanRoundCounter;
      this.timestamp = other.timestamp;
    }

    public userDefinedHttpCheck_args deepCopy() {
      return new userDefinedHttpCheck_args(this);
    }

    @Override
    public void clear() {
      this.env = null;
      this.appkey = null;
      this.path = null;
      this.providers = null;
      this.checkUrl = null;
      setScanRoundCounterIsSet(false);
      this.scanRoundCounter = 0;
      setTimestampIsSet(false);
      this.timestamp = 0;
    }

    public String getEnv() {
      return this.env;
    }

    public userDefinedHttpCheck_args setEnv(String env) {
      this.env = env;
      return this;
    }

    public void unsetEnv() {
      this.env = null;
    }

    /** Returns true if field env is set (has been assigned a value) and false otherwise */
    public boolean isSetEnv() {
      return this.env != null;
    }

    public void setEnvIsSet(boolean value) {
      if (!value) {
        this.env = null;
      }
    }

    public String getAppkey() {
      return this.appkey;
    }

    public userDefinedHttpCheck_args setAppkey(String appkey) {
      this.appkey = appkey;
      return this;
    }

    public void unsetAppkey() {
      this.appkey = null;
    }

    /** Returns true if field appkey is set (has been assigned a value) and false otherwise */
    public boolean isSetAppkey() {
      return this.appkey != null;
    }

    public void setAppkeyIsSet(boolean value) {
      if (!value) {
        this.appkey = null;
      }
    }

    public String getPath() {
      return this.path;
    }

    public userDefinedHttpCheck_args setPath(String path) {
      this.path = path;
      return this;
    }

    public void unsetPath() {
      this.path = null;
    }

    /** Returns true if field path is set (has been assigned a value) and false otherwise */
    public boolean isSetPath() {
      return this.path != null;
    }

    public void setPathIsSet(boolean value) {
      if (!value) {
        this.path = null;
      }
    }

    public int getProvidersSize() {
      return (this.providers == null) ? 0 : this.providers.size();
    }

    public java.util.Iterator<String> getProvidersIterator() {
      return (this.providers == null) ? null : this.providers.iterator();
    }

    public void addToProviders(String elem) {
      if (this.providers == null) {
        this.providers = new ArrayList<String>();
      }
      this.providers.add(elem);
    }

    public List<String> getProviders() {
      return this.providers;
    }

    public userDefinedHttpCheck_args setProviders(List<String> providers) {
      this.providers = providers;
      return this;
    }

    public void unsetProviders() {
      this.providers = null;
    }

    /** Returns true if field providers is set (has been assigned a value) and false otherwise */
    public boolean isSetProviders() {
      return this.providers != null;
    }

    public void setProvidersIsSet(boolean value) {
      if (!value) {
        this.providers = null;
      }
    }

    public String getCheckUrl() {
      return this.checkUrl;
    }

    public userDefinedHttpCheck_args setCheckUrl(String checkUrl) {
      this.checkUrl = checkUrl;
      return this;
    }

    public void unsetCheckUrl() {
      this.checkUrl = null;
    }

    /** Returns true if field checkUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetCheckUrl() {
      return this.checkUrl != null;
    }

    public void setCheckUrlIsSet(boolean value) {
      if (!value) {
        this.checkUrl = null;
      }
    }

    public int getScanRoundCounter() {
      return this.scanRoundCounter;
    }

    public userDefinedHttpCheck_args setScanRoundCounter(int scanRoundCounter) {
      this.scanRoundCounter = scanRoundCounter;
      setScanRoundCounterIsSet(true);
      return this;
    }

    public void unsetScanRoundCounter() {
      __isset_bit_vector.clear(__SCANROUNDCOUNTER_ISSET_ID);
    }

    /** Returns true if field scanRoundCounter is set (has been assigned a value) and false otherwise */
    public boolean isSetScanRoundCounter() {
      return __isset_bit_vector.get(__SCANROUNDCOUNTER_ISSET_ID);
    }

    public void setScanRoundCounterIsSet(boolean value) {
      __isset_bit_vector.set(__SCANROUNDCOUNTER_ISSET_ID, value);
    }

    public long getTimestamp() {
      return this.timestamp;
    }

    public userDefinedHttpCheck_args setTimestamp(long timestamp) {
      this.timestamp = timestamp;
      setTimestampIsSet(true);
      return this;
    }

    public void unsetTimestamp() {
      __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
    }

    /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetTimestamp() {
      return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
    }

    public void setTimestampIsSet(boolean value) {
      __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENV:
        if (value == null) {
          unsetEnv();
        } else {
          setEnv((String)value);
        }
        break;

      case APPKEY:
        if (value == null) {
          unsetAppkey();
        } else {
          setAppkey((String)value);
        }
        break;

      case PATH:
        if (value == null) {
          unsetPath();
        } else {
          setPath((String)value);
        }
        break;

      case PROVIDERS:
        if (value == null) {
          unsetProviders();
        } else {
          setProviders((List<String>)value);
        }
        break;

      case CHECK_URL:
        if (value == null) {
          unsetCheckUrl();
        } else {
          setCheckUrl((String)value);
        }
        break;

      case SCAN_ROUND_COUNTER:
        if (value == null) {
          unsetScanRoundCounter();
        } else {
          setScanRoundCounter((Integer)value);
        }
        break;

      case TIMESTAMP:
        if (value == null) {
          unsetTimestamp();
        } else {
          setTimestamp((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENV:
        return getEnv();

      case APPKEY:
        return getAppkey();

      case PATH:
        return getPath();

      case PROVIDERS:
        return getProviders();

      case CHECK_URL:
        return getCheckUrl();

      case SCAN_ROUND_COUNTER:
        return Integer.valueOf(getScanRoundCounter());

      case TIMESTAMP:
        return Long.valueOf(getTimestamp());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENV:
        return isSetEnv();
      case APPKEY:
        return isSetAppkey();
      case PATH:
        return isSetPath();
      case PROVIDERS:
        return isSetProviders();
      case CHECK_URL:
        return isSetCheckUrl();
      case SCAN_ROUND_COUNTER:
        return isSetScanRoundCounter();
      case TIMESTAMP:
        return isSetTimestamp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userDefinedHttpCheck_args)
        return this.equals((userDefinedHttpCheck_args)that);
      return false;
    }

    public boolean equals(userDefinedHttpCheck_args that) {
      if (that == null)
        return false;

      boolean this_present_env = true && this.isSetEnv();
      boolean that_present_env = true && that.isSetEnv();
      if (this_present_env || that_present_env) {
        if (!(this_present_env && that_present_env))
          return false;
        if (!this.env.equals(that.env))
          return false;
      }

      boolean this_present_appkey = true && this.isSetAppkey();
      boolean that_present_appkey = true && that.isSetAppkey();
      if (this_present_appkey || that_present_appkey) {
        if (!(this_present_appkey && that_present_appkey))
          return false;
        if (!this.appkey.equals(that.appkey))
          return false;
      }

      boolean this_present_path = true && this.isSetPath();
      boolean that_present_path = true && that.isSetPath();
      if (this_present_path || that_present_path) {
        if (!(this_present_path && that_present_path))
          return false;
        if (!this.path.equals(that.path))
          return false;
      }

      boolean this_present_providers = true && this.isSetProviders();
      boolean that_present_providers = true && that.isSetProviders();
      if (this_present_providers || that_present_providers) {
        if (!(this_present_providers && that_present_providers))
          return false;
        if (!this.providers.equals(that.providers))
          return false;
      }

      boolean this_present_checkUrl = true && this.isSetCheckUrl();
      boolean that_present_checkUrl = true && that.isSetCheckUrl();
      if (this_present_checkUrl || that_present_checkUrl) {
        if (!(this_present_checkUrl && that_present_checkUrl))
          return false;
        if (!this.checkUrl.equals(that.checkUrl))
          return false;
      }

      boolean this_present_scanRoundCounter = true;
      boolean that_present_scanRoundCounter = true;
      if (this_present_scanRoundCounter || that_present_scanRoundCounter) {
        if (!(this_present_scanRoundCounter && that_present_scanRoundCounter))
          return false;
        if (this.scanRoundCounter != that.scanRoundCounter)
          return false;
      }

      boolean this_present_timestamp = true;
      boolean that_present_timestamp = true;
      if (this_present_timestamp || that_present_timestamp) {
        if (!(this_present_timestamp && that_present_timestamp))
          return false;
        if (this.timestamp != that.timestamp)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(userDefinedHttpCheck_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      userDefinedHttpCheck_args typedOther = (userDefinedHttpCheck_args)other;

      lastComparison = Boolean.valueOf(isSetEnv()).compareTo(typedOther.isSetEnv());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnv()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.env, typedOther.env);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAppkey()).compareTo(typedOther.isSetAppkey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppkey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appkey, typedOther.appkey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPath()).compareTo(typedOther.isSetPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, typedOther.path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProviders()).compareTo(typedOther.isSetProviders());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProviders()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.providers, typedOther.providers);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCheckUrl()).compareTo(typedOther.isSetCheckUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCheckUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkUrl, typedOther.checkUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetScanRoundCounter()).compareTo(typedOther.isSetScanRoundCounter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScanRoundCounter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scanRoundCounter, typedOther.scanRoundCounter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userDefinedHttpCheck_args(");
      boolean first = true;

      sb.append("env:");
      if (this.env == null) {
        sb.append("null");
      } else {
        sb.append(this.env);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("appkey:");
      if (this.appkey == null) {
        sb.append("null");
      } else {
        sb.append(this.appkey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("path:");
      if (this.path == null) {
        sb.append("null");
      } else {
        sb.append(this.path);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("providers:");
      if (this.providers == null) {
        sb.append("null");
      } else {
        sb.append(this.providers);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("checkUrl:");
      if (this.checkUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.checkUrl);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("scanRoundCounter:");
      sb.append(this.scanRoundCounter);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timestamp:");
      sb.append(this.timestamp);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userDefinedHttpCheck_argsStandardSchemeFactory implements SchemeFactory {
      public userDefinedHttpCheck_argsStandardScheme getScheme() {
        return new userDefinedHttpCheck_argsStandardScheme();
      }
    }

    private static class userDefinedHttpCheck_argsStandardScheme extends StandardScheme<userDefinedHttpCheck_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userDefinedHttpCheck_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENV
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.env = iprot.readString();
                struct.setEnvIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // APPKEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appkey = iprot.readString();
                struct.setAppkeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.path = iprot.readString();
                struct.setPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PROVIDERS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.providers = new ArrayList<String>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    String _elem10; // required
                    _elem10 = iprot.readString();
                    struct.providers.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setProvidersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CHECK_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.checkUrl = iprot.readString();
                struct.setCheckUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // SCAN_ROUND_COUNTER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.scanRoundCounter = iprot.readI32();
                struct.setScanRoundCounterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.timestamp = iprot.readI64();
                struct.setTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userDefinedHttpCheck_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.env != null) {
          oprot.writeFieldBegin(ENV_FIELD_DESC);
          oprot.writeString(struct.env);
          oprot.writeFieldEnd();
        }
        if (struct.appkey != null) {
          oprot.writeFieldBegin(APPKEY_FIELD_DESC);
          oprot.writeString(struct.appkey);
          oprot.writeFieldEnd();
        }
        if (struct.path != null) {
          oprot.writeFieldBegin(PATH_FIELD_DESC);
          oprot.writeString(struct.path);
          oprot.writeFieldEnd();
        }
        if (struct.providers != null) {
          oprot.writeFieldBegin(PROVIDERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.providers.size()));
            for (String _iter11 : struct.providers)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.checkUrl != null) {
          oprot.writeFieldBegin(CHECK_URL_FIELD_DESC);
          oprot.writeString(struct.checkUrl);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SCAN_ROUND_COUNTER_FIELD_DESC);
        oprot.writeI32(struct.scanRoundCounter);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.timestamp);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userDefinedHttpCheck_argsTupleSchemeFactory implements SchemeFactory {
      public userDefinedHttpCheck_argsTupleScheme getScheme() {
        return new userDefinedHttpCheck_argsTupleScheme();
      }
    }

    private static class userDefinedHttpCheck_argsTupleScheme extends TupleScheme<userDefinedHttpCheck_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userDefinedHttpCheck_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEnv()) {
          optionals.set(0);
        }
        if (struct.isSetAppkey()) {
          optionals.set(1);
        }
        if (struct.isSetPath()) {
          optionals.set(2);
        }
        if (struct.isSetProviders()) {
          optionals.set(3);
        }
        if (struct.isSetCheckUrl()) {
          optionals.set(4);
        }
        if (struct.isSetScanRoundCounter()) {
          optionals.set(5);
        }
        if (struct.isSetTimestamp()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetEnv()) {
          oprot.writeString(struct.env);
        }
        if (struct.isSetAppkey()) {
          oprot.writeString(struct.appkey);
        }
        if (struct.isSetPath()) {
          oprot.writeString(struct.path);
        }
        if (struct.isSetProviders()) {
          {
            oprot.writeI32(struct.providers.size());
            for (String _iter12 : struct.providers)
            {
              oprot.writeString(_iter12);
            }
          }
        }
        if (struct.isSetCheckUrl()) {
          oprot.writeString(struct.checkUrl);
        }
        if (struct.isSetScanRoundCounter()) {
          oprot.writeI32(struct.scanRoundCounter);
        }
        if (struct.isSetTimestamp()) {
          oprot.writeI64(struct.timestamp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userDefinedHttpCheck_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.env = iprot.readString();
          struct.setEnvIsSet(true);
        }
        if (incoming.get(1)) {
          struct.appkey = iprot.readString();
          struct.setAppkeyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.path = iprot.readString();
          struct.setPathIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.providers = new ArrayList<String>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              String _elem15; // required
              _elem15 = iprot.readString();
              struct.providers.add(_elem15);
            }
          }
          struct.setProvidersIsSet(true);
        }
        if (incoming.get(4)) {
          struct.checkUrl = iprot.readString();
          struct.setCheckUrlIsSet(true);
        }
        if (incoming.get(5)) {
          struct.scanRoundCounter = iprot.readI32();
          struct.setScanRoundCounterIsSet(true);
        }
        if (incoming.get(6)) {
          struct.timestamp = iprot.readI64();
          struct.setTimestampIsSet(true);
        }
      }
    }

  }

  public static class userDefinedHttpCheck_result implements org.apache.thrift.TBase<userDefinedHttpCheck_result, userDefinedHttpCheck_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userDefinedHttpCheck_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userDefinedHttpCheck_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userDefinedHttpCheck_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userDefinedHttpCheck_result.class, metaDataMap);
    }

    public userDefinedHttpCheck_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userDefinedHttpCheck_result(userDefinedHttpCheck_result other) {
    }

    public userDefinedHttpCheck_result deepCopy() {
      return new userDefinedHttpCheck_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userDefinedHttpCheck_result)
        return this.equals((userDefinedHttpCheck_result)that);
      return false;
    }

    public boolean equals(userDefinedHttpCheck_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(userDefinedHttpCheck_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      userDefinedHttpCheck_result typedOther = (userDefinedHttpCheck_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userDefinedHttpCheck_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userDefinedHttpCheck_resultStandardSchemeFactory implements SchemeFactory {
      public userDefinedHttpCheck_resultStandardScheme getScheme() {
        return new userDefinedHttpCheck_resultStandardScheme();
      }
    }

    private static class userDefinedHttpCheck_resultStandardScheme extends StandardScheme<userDefinedHttpCheck_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userDefinedHttpCheck_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userDefinedHttpCheck_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userDefinedHttpCheck_resultTupleSchemeFactory implements SchemeFactory {
      public userDefinedHttpCheck_resultTupleScheme getScheme() {
        return new userDefinedHttpCheck_resultTupleScheme();
      }
    }

    private static class userDefinedHttpCheck_resultTupleScheme extends TupleScheme<userDefinedHttpCheck_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userDefinedHttpCheck_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userDefinedHttpCheck_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
