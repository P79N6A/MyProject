/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sankuai.octo.updater.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;

import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UpdaterService {

  public interface Iface {

    public void doubleCheck(String providerPath, ProviderStatus status) throws org.apache.thrift.TException;

    public void userDefinedHttpDoubleCheck(String providerPath, ProviderStatus status, String checkUrl) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void doubleCheck(String providerPath, ProviderStatus status, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.doubleCheck_call> resultHandler) throws org.apache.thrift.TException;

    public void userDefinedHttpDoubleCheck(String providerPath, ProviderStatus status, String checkUrl, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.userDefinedHttpDoubleCheck_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void doubleCheck(String providerPath, ProviderStatus status) throws org.apache.thrift.TException
    {
      send_doubleCheck(providerPath, status);
      recv_doubleCheck();
    }

    public void send_doubleCheck(String providerPath, ProviderStatus status) throws org.apache.thrift.TException
    {
      doubleCheck_args args = new doubleCheck_args();
      args.setProviderPath(providerPath);
      args.setStatus(status);
      sendBase("doubleCheck", args);
    }

    public void recv_doubleCheck() throws org.apache.thrift.TException
    {
      doubleCheck_result result = new doubleCheck_result();
      receiveBase(result, "doubleCheck");
      return;
    }

    public void userDefinedHttpDoubleCheck(String providerPath, ProviderStatus status, String checkUrl) throws org.apache.thrift.TException
    {
      send_userDefinedHttpDoubleCheck(providerPath, status, checkUrl);
      recv_userDefinedHttpDoubleCheck();
    }

    public void send_userDefinedHttpDoubleCheck(String providerPath, ProviderStatus status, String checkUrl) throws org.apache.thrift.TException
    {
      userDefinedHttpDoubleCheck_args args = new userDefinedHttpDoubleCheck_args();
      args.setProviderPath(providerPath);
      args.setStatus(status);
      args.setCheckUrl(checkUrl);
      sendBase("userDefinedHttpDoubleCheck", args);
    }

    public void recv_userDefinedHttpDoubleCheck() throws org.apache.thrift.TException
    {
      userDefinedHttpDoubleCheck_result result = new userDefinedHttpDoubleCheck_result();
      receiveBase(result, "userDefinedHttpDoubleCheck");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void doubleCheck(String providerPath, ProviderStatus status, org.apache.thrift.async.AsyncMethodCallback<doubleCheck_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      doubleCheck_call method_call = new doubleCheck_call(providerPath, status, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class doubleCheck_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String providerPath;
      private ProviderStatus status;
      public doubleCheck_call(String providerPath, ProviderStatus status, org.apache.thrift.async.AsyncMethodCallback<doubleCheck_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.providerPath = providerPath;
        this.status = status;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("doubleCheck", org.apache.thrift.protocol.TMessageType.CALL, 0));
        doubleCheck_args args = new doubleCheck_args();
        args.setProviderPath(providerPath);
        args.setStatus(status);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_doubleCheck();
      }
    }

    public void userDefinedHttpDoubleCheck(String providerPath, ProviderStatus status, String checkUrl, org.apache.thrift.async.AsyncMethodCallback<userDefinedHttpDoubleCheck_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      userDefinedHttpDoubleCheck_call method_call = new userDefinedHttpDoubleCheck_call(providerPath, status, checkUrl, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class userDefinedHttpDoubleCheck_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String providerPath;
      private ProviderStatus status;
      private String checkUrl;
      public userDefinedHttpDoubleCheck_call(String providerPath, ProviderStatus status, String checkUrl, org.apache.thrift.async.AsyncMethodCallback<userDefinedHttpDoubleCheck_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.providerPath = providerPath;
        this.status = status;
        this.checkUrl = checkUrl;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("userDefinedHttpDoubleCheck", org.apache.thrift.protocol.TMessageType.CALL, 0));
        userDefinedHttpDoubleCheck_args args = new userDefinedHttpDoubleCheck_args();
        args.setProviderPath(providerPath);
        args.setStatus(status);
        args.setCheckUrl(checkUrl);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_userDefinedHttpDoubleCheck();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("doubleCheck", new doubleCheck());
      processMap.put("userDefinedHttpDoubleCheck", new userDefinedHttpDoubleCheck());
      return processMap;
    }

    private static class doubleCheck<I extends Iface> extends org.apache.thrift.ProcessFunction<I, doubleCheck_args> {
      public doubleCheck() {
        super("doubleCheck");
      }

      protected doubleCheck_args getEmptyArgsInstance() {
        return new doubleCheck_args();
      }

      protected doubleCheck_result getResult(I iface, doubleCheck_args args) throws org.apache.thrift.TException {
        doubleCheck_result result = new doubleCheck_result();
        iface.doubleCheck(args.providerPath, args.status);
        return result;
      }
    }

    private static class userDefinedHttpDoubleCheck<I extends Iface> extends org.apache.thrift.ProcessFunction<I, userDefinedHttpDoubleCheck_args> {
      public userDefinedHttpDoubleCheck() {
        super("userDefinedHttpDoubleCheck");
      }

      protected userDefinedHttpDoubleCheck_args getEmptyArgsInstance() {
        return new userDefinedHttpDoubleCheck_args();
      }

      protected userDefinedHttpDoubleCheck_result getResult(I iface, userDefinedHttpDoubleCheck_args args) throws org.apache.thrift.TException {
        userDefinedHttpDoubleCheck_result result = new userDefinedHttpDoubleCheck_result();
        iface.userDefinedHttpDoubleCheck(args.providerPath, args.status, args.checkUrl);
        return result;
      }
    }

  }

  public static class doubleCheck_args implements org.apache.thrift.TBase<doubleCheck_args, doubleCheck_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("doubleCheck_args");

    private static final org.apache.thrift.protocol.TField PROVIDER_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("providerPath", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new doubleCheck_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new doubleCheck_argsTupleSchemeFactory());
    }

    public String providerPath; // required
    /**
     * 
     * @see ProviderStatus
     */
    public ProviderStatus status; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROVIDER_PATH((short)1, "providerPath"),
      /**
       * 
       * @see ProviderStatus
       */
      STATUS((short)2, "status");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROVIDER_PATH
            return PROVIDER_PATH;
          case 2: // STATUS
            return STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROVIDER_PATH, new org.apache.thrift.meta_data.FieldMetaData("providerPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ProviderStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(doubleCheck_args.class, metaDataMap);
    }

    public doubleCheck_args() {
    }

    public doubleCheck_args(
      String providerPath,
      ProviderStatus status)
    {
      this();
      this.providerPath = providerPath;
      this.status = status;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public doubleCheck_args(doubleCheck_args other) {
      if (other.isSetProviderPath()) {
        this.providerPath = other.providerPath;
      }
      if (other.isSetStatus()) {
        this.status = other.status;
      }
    }

    public doubleCheck_args deepCopy() {
      return new doubleCheck_args(this);
    }

    @Override
    public void clear() {
      this.providerPath = null;
      this.status = null;
    }

    public String getProviderPath() {
      return this.providerPath;
    }

    public doubleCheck_args setProviderPath(String providerPath) {
      this.providerPath = providerPath;
      return this;
    }

    public void unsetProviderPath() {
      this.providerPath = null;
    }

    /** Returns true if field providerPath is set (has been assigned a value) and false otherwise */
    public boolean isSetProviderPath() {
      return this.providerPath != null;
    }

    public void setProviderPathIsSet(boolean value) {
      if (!value) {
        this.providerPath = null;
      }
    }

    /**
     * 
     * @see ProviderStatus
     */
    public ProviderStatus getStatus() {
      return this.status;
    }

    /**
     * 
     * @see ProviderStatus
     */
    public doubleCheck_args setStatus(ProviderStatus status) {
      this.status = status;
      return this;
    }

    public void unsetStatus() {
      this.status = null;
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return this.status != null;
    }

    public void setStatusIsSet(boolean value) {
      if (!value) {
        this.status = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROVIDER_PATH:
        if (value == null) {
          unsetProviderPath();
        } else {
          setProviderPath((String)value);
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((ProviderStatus)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROVIDER_PATH:
        return getProviderPath();

      case STATUS:
        return getStatus();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROVIDER_PATH:
        return isSetProviderPath();
      case STATUS:
        return isSetStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof doubleCheck_args)
        return this.equals((doubleCheck_args)that);
      return false;
    }

    public boolean equals(doubleCheck_args that) {
      if (that == null)
        return false;

      boolean this_present_providerPath = true && this.isSetProviderPath();
      boolean that_present_providerPath = true && that.isSetProviderPath();
      if (this_present_providerPath || that_present_providerPath) {
        if (!(this_present_providerPath && that_present_providerPath))
          return false;
        if (!this.providerPath.equals(that.providerPath))
          return false;
      }

      boolean this_present_status = true && this.isSetStatus();
      boolean that_present_status = true && that.isSetStatus();
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (!this.status.equals(that.status))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(doubleCheck_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      doubleCheck_args typedOther = (doubleCheck_args)other;

      lastComparison = Boolean.valueOf(isSetProviderPath()).compareTo(typedOther.isSetProviderPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProviderPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.providerPath, typedOther.providerPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("doubleCheck_args(");
      boolean first = true;

      sb.append("providerPath:");
      if (this.providerPath == null) {
        sb.append("null");
      } else {
        sb.append(this.providerPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class doubleCheck_argsStandardSchemeFactory implements SchemeFactory {
      public doubleCheck_argsStandardScheme getScheme() {
        return new doubleCheck_argsStandardScheme();
      }
    }

    private static class doubleCheck_argsStandardScheme extends StandardScheme<doubleCheck_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, doubleCheck_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROVIDER_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.providerPath = iprot.readString();
                struct.setProviderPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.status = ProviderStatus.findByValue(iprot.readI32());
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, doubleCheck_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.providerPath != null) {
          oprot.writeFieldBegin(PROVIDER_PATH_FIELD_DESC);
          oprot.writeString(struct.providerPath);
          oprot.writeFieldEnd();
        }
        if (struct.status != null) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class doubleCheck_argsTupleSchemeFactory implements SchemeFactory {
      public doubleCheck_argsTupleScheme getScheme() {
        return new doubleCheck_argsTupleScheme();
      }
    }

    private static class doubleCheck_argsTupleScheme extends TupleScheme<doubleCheck_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, doubleCheck_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProviderPath()) {
          optionals.set(0);
        }
        if (struct.isSetStatus()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProviderPath()) {
          oprot.writeString(struct.providerPath);
        }
        if (struct.isSetStatus()) {
          oprot.writeI32(struct.status.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, doubleCheck_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.providerPath = iprot.readString();
          struct.setProviderPathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.status = ProviderStatus.findByValue(iprot.readI32());
          struct.setStatusIsSet(true);
        }
      }
    }

  }

  public static class doubleCheck_result implements org.apache.thrift.TBase<doubleCheck_result, doubleCheck_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("doubleCheck_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new doubleCheck_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new doubleCheck_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(doubleCheck_result.class, metaDataMap);
    }

    public doubleCheck_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public doubleCheck_result(doubleCheck_result other) {
    }

    public doubleCheck_result deepCopy() {
      return new doubleCheck_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof doubleCheck_result)
        return this.equals((doubleCheck_result)that);
      return false;
    }

    public boolean equals(doubleCheck_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(doubleCheck_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      doubleCheck_result typedOther = (doubleCheck_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("doubleCheck_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class doubleCheck_resultStandardSchemeFactory implements SchemeFactory {
      public doubleCheck_resultStandardScheme getScheme() {
        return new doubleCheck_resultStandardScheme();
      }
    }

    private static class doubleCheck_resultStandardScheme extends StandardScheme<doubleCheck_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, doubleCheck_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, doubleCheck_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class doubleCheck_resultTupleSchemeFactory implements SchemeFactory {
      public doubleCheck_resultTupleScheme getScheme() {
        return new doubleCheck_resultTupleScheme();
      }
    }

    private static class doubleCheck_resultTupleScheme extends TupleScheme<doubleCheck_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, doubleCheck_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, doubleCheck_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class userDefinedHttpDoubleCheck_args implements org.apache.thrift.TBase<userDefinedHttpDoubleCheck_args, userDefinedHttpDoubleCheck_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userDefinedHttpDoubleCheck_args");

    private static final org.apache.thrift.protocol.TField PROVIDER_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("providerPath", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField CHECK_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("checkUrl", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userDefinedHttpDoubleCheck_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userDefinedHttpDoubleCheck_argsTupleSchemeFactory());
    }

    public String providerPath; // required
    /**
     * 
     * @see ProviderStatus
     */
    public ProviderStatus status; // required
    public String checkUrl; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROVIDER_PATH((short)1, "providerPath"),
      /**
       * 
       * @see ProviderStatus
       */
      STATUS((short)2, "status"),
      CHECK_URL((short)3, "checkUrl");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROVIDER_PATH
            return PROVIDER_PATH;
          case 2: // STATUS
            return STATUS;
          case 3: // CHECK_URL
            return CHECK_URL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROVIDER_PATH, new org.apache.thrift.meta_data.FieldMetaData("providerPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ProviderStatus.class)));
      tmpMap.put(_Fields.CHECK_URL, new org.apache.thrift.meta_data.FieldMetaData("checkUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userDefinedHttpDoubleCheck_args.class, metaDataMap);
    }

    public userDefinedHttpDoubleCheck_args() {
    }

    public userDefinedHttpDoubleCheck_args(
      String providerPath,
      ProviderStatus status,
      String checkUrl)
    {
      this();
      this.providerPath = providerPath;
      this.status = status;
      this.checkUrl = checkUrl;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userDefinedHttpDoubleCheck_args(userDefinedHttpDoubleCheck_args other) {
      if (other.isSetProviderPath()) {
        this.providerPath = other.providerPath;
      }
      if (other.isSetStatus()) {
        this.status = other.status;
      }
      if (other.isSetCheckUrl()) {
        this.checkUrl = other.checkUrl;
      }
    }

    public userDefinedHttpDoubleCheck_args deepCopy() {
      return new userDefinedHttpDoubleCheck_args(this);
    }

    @Override
    public void clear() {
      this.providerPath = null;
      this.status = null;
      this.checkUrl = null;
    }

    public String getProviderPath() {
      return this.providerPath;
    }

    public userDefinedHttpDoubleCheck_args setProviderPath(String providerPath) {
      this.providerPath = providerPath;
      return this;
    }

    public void unsetProviderPath() {
      this.providerPath = null;
    }

    /** Returns true if field providerPath is set (has been assigned a value) and false otherwise */
    public boolean isSetProviderPath() {
      return this.providerPath != null;
    }

    public void setProviderPathIsSet(boolean value) {
      if (!value) {
        this.providerPath = null;
      }
    }

    /**
     * 
     * @see ProviderStatus
     */
    public ProviderStatus getStatus() {
      return this.status;
    }

    /**
     * 
     * @see ProviderStatus
     */
    public userDefinedHttpDoubleCheck_args setStatus(ProviderStatus status) {
      this.status = status;
      return this;
    }

    public void unsetStatus() {
      this.status = null;
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return this.status != null;
    }

    public void setStatusIsSet(boolean value) {
      if (!value) {
        this.status = null;
      }
    }

    public String getCheckUrl() {
      return this.checkUrl;
    }

    public userDefinedHttpDoubleCheck_args setCheckUrl(String checkUrl) {
      this.checkUrl = checkUrl;
      return this;
    }

    public void unsetCheckUrl() {
      this.checkUrl = null;
    }

    /** Returns true if field checkUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetCheckUrl() {
      return this.checkUrl != null;
    }

    public void setCheckUrlIsSet(boolean value) {
      if (!value) {
        this.checkUrl = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROVIDER_PATH:
        if (value == null) {
          unsetProviderPath();
        } else {
          setProviderPath((String)value);
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((ProviderStatus)value);
        }
        break;

      case CHECK_URL:
        if (value == null) {
          unsetCheckUrl();
        } else {
          setCheckUrl((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROVIDER_PATH:
        return getProviderPath();

      case STATUS:
        return getStatus();

      case CHECK_URL:
        return getCheckUrl();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROVIDER_PATH:
        return isSetProviderPath();
      case STATUS:
        return isSetStatus();
      case CHECK_URL:
        return isSetCheckUrl();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userDefinedHttpDoubleCheck_args)
        return this.equals((userDefinedHttpDoubleCheck_args)that);
      return false;
    }

    public boolean equals(userDefinedHttpDoubleCheck_args that) {
      if (that == null)
        return false;

      boolean this_present_providerPath = true && this.isSetProviderPath();
      boolean that_present_providerPath = true && that.isSetProviderPath();
      if (this_present_providerPath || that_present_providerPath) {
        if (!(this_present_providerPath && that_present_providerPath))
          return false;
        if (!this.providerPath.equals(that.providerPath))
          return false;
      }

      boolean this_present_status = true && this.isSetStatus();
      boolean that_present_status = true && that.isSetStatus();
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (!this.status.equals(that.status))
          return false;
      }

      boolean this_present_checkUrl = true && this.isSetCheckUrl();
      boolean that_present_checkUrl = true && that.isSetCheckUrl();
      if (this_present_checkUrl || that_present_checkUrl) {
        if (!(this_present_checkUrl && that_present_checkUrl))
          return false;
        if (!this.checkUrl.equals(that.checkUrl))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(userDefinedHttpDoubleCheck_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      userDefinedHttpDoubleCheck_args typedOther = (userDefinedHttpDoubleCheck_args)other;

      lastComparison = Boolean.valueOf(isSetProviderPath()).compareTo(typedOther.isSetProviderPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProviderPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.providerPath, typedOther.providerPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCheckUrl()).compareTo(typedOther.isSetCheckUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCheckUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkUrl, typedOther.checkUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userDefinedHttpDoubleCheck_args(");
      boolean first = true;

      sb.append("providerPath:");
      if (this.providerPath == null) {
        sb.append("null");
      } else {
        sb.append(this.providerPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("checkUrl:");
      if (this.checkUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.checkUrl);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userDefinedHttpDoubleCheck_argsStandardSchemeFactory implements SchemeFactory {
      public userDefinedHttpDoubleCheck_argsStandardScheme getScheme() {
        return new userDefinedHttpDoubleCheck_argsStandardScheme();
      }
    }

    private static class userDefinedHttpDoubleCheck_argsStandardScheme extends StandardScheme<userDefinedHttpDoubleCheck_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userDefinedHttpDoubleCheck_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROVIDER_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.providerPath = iprot.readString();
                struct.setProviderPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.status = ProviderStatus.findByValue(iprot.readI32());
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CHECK_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.checkUrl = iprot.readString();
                struct.setCheckUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userDefinedHttpDoubleCheck_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.providerPath != null) {
          oprot.writeFieldBegin(PROVIDER_PATH_FIELD_DESC);
          oprot.writeString(struct.providerPath);
          oprot.writeFieldEnd();
        }
        if (struct.status != null) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.checkUrl != null) {
          oprot.writeFieldBegin(CHECK_URL_FIELD_DESC);
          oprot.writeString(struct.checkUrl);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userDefinedHttpDoubleCheck_argsTupleSchemeFactory implements SchemeFactory {
      public userDefinedHttpDoubleCheck_argsTupleScheme getScheme() {
        return new userDefinedHttpDoubleCheck_argsTupleScheme();
      }
    }

    private static class userDefinedHttpDoubleCheck_argsTupleScheme extends TupleScheme<userDefinedHttpDoubleCheck_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userDefinedHttpDoubleCheck_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProviderPath()) {
          optionals.set(0);
        }
        if (struct.isSetStatus()) {
          optionals.set(1);
        }
        if (struct.isSetCheckUrl()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetProviderPath()) {
          oprot.writeString(struct.providerPath);
        }
        if (struct.isSetStatus()) {
          oprot.writeI32(struct.status.getValue());
        }
        if (struct.isSetCheckUrl()) {
          oprot.writeString(struct.checkUrl);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userDefinedHttpDoubleCheck_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.providerPath = iprot.readString();
          struct.setProviderPathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.status = ProviderStatus.findByValue(iprot.readI32());
          struct.setStatusIsSet(true);
        }
        if (incoming.get(2)) {
          struct.checkUrl = iprot.readString();
          struct.setCheckUrlIsSet(true);
        }
      }
    }

  }

  public static class userDefinedHttpDoubleCheck_result implements org.apache.thrift.TBase<userDefinedHttpDoubleCheck_result, userDefinedHttpDoubleCheck_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userDefinedHttpDoubleCheck_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userDefinedHttpDoubleCheck_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userDefinedHttpDoubleCheck_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userDefinedHttpDoubleCheck_result.class, metaDataMap);
    }

    public userDefinedHttpDoubleCheck_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userDefinedHttpDoubleCheck_result(userDefinedHttpDoubleCheck_result other) {
    }

    public userDefinedHttpDoubleCheck_result deepCopy() {
      return new userDefinedHttpDoubleCheck_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userDefinedHttpDoubleCheck_result)
        return this.equals((userDefinedHttpDoubleCheck_result)that);
      return false;
    }

    public boolean equals(userDefinedHttpDoubleCheck_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(userDefinedHttpDoubleCheck_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      userDefinedHttpDoubleCheck_result typedOther = (userDefinedHttpDoubleCheck_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userDefinedHttpDoubleCheck_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userDefinedHttpDoubleCheck_resultStandardSchemeFactory implements SchemeFactory {
      public userDefinedHttpDoubleCheck_resultStandardScheme getScheme() {
        return new userDefinedHttpDoubleCheck_resultStandardScheme();
      }
    }

    private static class userDefinedHttpDoubleCheck_resultStandardScheme extends StandardScheme<userDefinedHttpDoubleCheck_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userDefinedHttpDoubleCheck_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userDefinedHttpDoubleCheck_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userDefinedHttpDoubleCheck_resultTupleSchemeFactory implements SchemeFactory {
      public userDefinedHttpDoubleCheck_resultTupleScheme getScheme() {
        return new userDefinedHttpDoubleCheck_resultTupleScheme();
      }
    }

    private static class userDefinedHttpDoubleCheck_resultTupleScheme extends TupleScheme<userDefinedHttpDoubleCheck_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userDefinedHttpDoubleCheck_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userDefinedHttpDoubleCheck_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
