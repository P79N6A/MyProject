#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class DegradeStatus:
  ENABLE = 0
  DISABLE = 1

  _VALUES_TO_NAMES = {
    0: "ENABLE",
    1: "DISABLE",
  }

  _NAMES_TO_VALUES = {
    "ENABLE": 0,
    "DISABLE": 1,
  }

class AlarmStatus:
  ENABLE = 0
  DISABLE = 1

  _VALUES_TO_NAMES = {
    0: "ENABLE",
    1: "DISABLE",
  }

  _NAMES_TO_VALUES = {
    "ENABLE": 0,
    "DISABLE": 1,
  }

class DegradeStrategy:
  DROP = 0
  CUSTOMIZE = 1

  _VALUES_TO_NAMES = {
    0: "DROP",
    1: "CUSTOMIZE",
  }

  _NAMES_TO_VALUES = {
    "DROP": 0,
    "CUSTOMIZE": 1,
  }

class DegradeEnd:
  SERVER = 0
  CLIENT = 1

  _VALUES_TO_NAMES = {
    0: "SERVER",
    1: "CLIENT",
  }

  _NAMES_TO_VALUES = {
    "SERVER": 0,
    "CLIENT": 1,
  }

class ProviderNumCountSwitch:
  APPKEY = 0
  HOST = 1

  _VALUES_TO_NAMES = {
    0: "APPKEY",
    1: "HOST",
  }

  _NAMES_TO_VALUES = {
    "APPKEY": 0,
    "HOST": 1,
  }


class ConsumerQuota:
  """
  Attributes:
   - consumerAppkey
   - QPSRatio
   - degradeStrategy
   - degradeRedirect
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'consumerAppkey', None, None, ), # 1
    (2, TType.DOUBLE, 'QPSRatio', None, None, ), # 2
    (3, TType.I32, 'degradeStrategy', None, None, ), # 3
    (4, TType.STRING, 'degradeRedirect', None, None, ), # 4
  )

  def __init__(self, consumerAppkey=None, QPSRatio=None, degradeStrategy=None, degradeRedirect=None,):
    self.consumerAppkey = consumerAppkey
    self.QPSRatio = QPSRatio
    self.degradeStrategy = degradeStrategy
    self.degradeRedirect = degradeRedirect

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.consumerAppkey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.QPSRatio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.degradeStrategy = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.degradeRedirect = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ConsumerQuota')
    if self.consumerAppkey is not None:
      oprot.writeFieldBegin('consumerAppkey', TType.STRING, 1)
      oprot.writeString(self.consumerAppkey)
      oprot.writeFieldEnd()
    if self.QPSRatio is not None:
      oprot.writeFieldBegin('QPSRatio', TType.DOUBLE, 2)
      oprot.writeDouble(self.QPSRatio)
      oprot.writeFieldEnd()
    if self.degradeStrategy is not None:
      oprot.writeFieldBegin('degradeStrategy', TType.I32, 3)
      oprot.writeI32(self.degradeStrategy)
      oprot.writeFieldEnd()
    if self.degradeRedirect is not None:
      oprot.writeFieldBegin('degradeRedirect', TType.STRING, 4)
      oprot.writeString(self.degradeRedirect)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.consumerAppkey is None:
      raise TProtocol.TProtocolException(message='Required field consumerAppkey is unset!')
    if self.QPSRatio is None:
      raise TProtocol.TProtocolException(message='Required field QPSRatio is unset!')
    if self.degradeStrategy is None:
      raise TProtocol.TProtocolException(message='Required field degradeStrategy is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProviderQuota:
  """
  Attributes:
   - id
   - name
   - providerAppkey
   - env
   - method
   - QPSCapacity
   - consumerList
   - status
   - watchPeriodInSeconds
   - createTime
   - updateTime
   - alarm
   - degradeEnd
   - proNumCntSwitch
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'providerAppkey', None, None, ), # 3
    (4, TType.I32, 'env', None, None, ), # 4
    (5, TType.STRING, 'method', None, None, ), # 5
    (6, TType.I32, 'QPSCapacity', None, None, ), # 6
    None, # 7
    None, # 8
    (9, TType.LIST, 'consumerList', (TType.STRUCT,(ConsumerQuota, ConsumerQuota.thrift_spec)), None, ), # 9
    (10, TType.I32, 'status', None, None, ), # 10
    (11, TType.I32, 'watchPeriodInSeconds', None, 10, ), # 11
    (12, TType.I64, 'createTime', None, None, ), # 12
    (13, TType.I64, 'updateTime', None, None, ), # 13
    (14, TType.I32, 'alarm', None,     0, ), # 14
    (15, TType.I32, 'degradeEnd', None,     1, ), # 15
    (16, TType.I32, 'proNumCntSwitch', None,     0, ), # 16
  )

  def __init__(self, id=None, name=None, providerAppkey=None, env=None, method=None, QPSCapacity=None, consumerList=None, status=None, watchPeriodInSeconds=thrift_spec[11][4], createTime=None, updateTime=None, alarm=thrift_spec[14][4], degradeEnd=thrift_spec[15][4], proNumCntSwitch=thrift_spec[16][4],):
    self.id = id
    self.name = name
    self.providerAppkey = providerAppkey
    self.env = env
    self.method = method
    self.QPSCapacity = QPSCapacity
    self.consumerList = consumerList
    self.status = status
    self.watchPeriodInSeconds = watchPeriodInSeconds
    self.createTime = createTime
    self.updateTime = updateTime
    self.alarm = alarm
    self.degradeEnd = degradeEnd
    self.proNumCntSwitch = proNumCntSwitch

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.providerAppkey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.env = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.method = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.QPSCapacity = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.consumerList = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = ConsumerQuota()
            _elem5.read(iprot)
            self.consumerList.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.watchPeriodInSeconds = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I64:
          self.createTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I64:
          self.updateTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.alarm = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.degradeEnd = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.proNumCntSwitch = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProviderQuota')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.providerAppkey is not None:
      oprot.writeFieldBegin('providerAppkey', TType.STRING, 3)
      oprot.writeString(self.providerAppkey)
      oprot.writeFieldEnd()
    if self.env is not None:
      oprot.writeFieldBegin('env', TType.I32, 4)
      oprot.writeI32(self.env)
      oprot.writeFieldEnd()
    if self.method is not None:
      oprot.writeFieldBegin('method', TType.STRING, 5)
      oprot.writeString(self.method)
      oprot.writeFieldEnd()
    if self.QPSCapacity is not None:
      oprot.writeFieldBegin('QPSCapacity', TType.I32, 6)
      oprot.writeI32(self.QPSCapacity)
      oprot.writeFieldEnd()
    if self.consumerList is not None:
      oprot.writeFieldBegin('consumerList', TType.LIST, 9)
      oprot.writeListBegin(TType.STRUCT, len(self.consumerList))
      for iter6 in self.consumerList:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 10)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.watchPeriodInSeconds is not None:
      oprot.writeFieldBegin('watchPeriodInSeconds', TType.I32, 11)
      oprot.writeI32(self.watchPeriodInSeconds)
      oprot.writeFieldEnd()
    if self.createTime is not None:
      oprot.writeFieldBegin('createTime', TType.I64, 12)
      oprot.writeI64(self.createTime)
      oprot.writeFieldEnd()
    if self.updateTime is not None:
      oprot.writeFieldBegin('updateTime', TType.I64, 13)
      oprot.writeI64(self.updateTime)
      oprot.writeFieldEnd()
    if self.alarm is not None:
      oprot.writeFieldBegin('alarm', TType.I32, 14)
      oprot.writeI32(self.alarm)
      oprot.writeFieldEnd()
    if self.degradeEnd is not None:
      oprot.writeFieldBegin('degradeEnd', TType.I32, 15)
      oprot.writeI32(self.degradeEnd)
      oprot.writeFieldEnd()
    if self.proNumCntSwitch is not None:
      oprot.writeFieldBegin('proNumCntSwitch', TType.I32, 16)
      oprot.writeI32(self.proNumCntSwitch)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    if self.providerAppkey is None:
      raise TProtocol.TProtocolException(message='Required field providerAppkey is unset!')
    if self.env is None:
      raise TProtocol.TProtocolException(message='Required field env is unset!')
    if self.method is None:
      raise TProtocol.TProtocolException(message='Required field method is unset!')
    if self.QPSCapacity is None:
      raise TProtocol.TProtocolException(message='Required field QPSCapacity is unset!')
    if self.consumerList is None:
      raise TProtocol.TProtocolException(message='Required field consumerList is unset!')
    if self.status is None:
      raise TProtocol.TProtocolException(message='Required field status is unset!')
    if self.watchPeriodInSeconds is None:
      raise TProtocol.TProtocolException(message='Required field watchPeriodInSeconds is unset!')
    if self.createTime is None:
      raise TProtocol.TProtocolException(message='Required field createTime is unset!')
    if self.updateTime is None:
      raise TProtocol.TProtocolException(message='Required field updateTime is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DegradeAction:
  """
  Attributes:
   - id
   - env
   - providerAppkey
   - consumerAppkey
   - method
   - degradeRatio
   - degradeStrategy
   - timestamp
   - degradeRedirect
   - consumerQPS
   - degradeEnd
   - extend
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.I32, 'env', None, None, ), # 2
    (3, TType.STRING, 'providerAppkey', None, None, ), # 3
    (4, TType.STRING, 'consumerAppkey', None, None, ), # 4
    (5, TType.STRING, 'method', None, None, ), # 5
    (6, TType.DOUBLE, 'degradeRatio', None, None, ), # 6
    (7, TType.I32, 'degradeStrategy', None, None, ), # 7
    (8, TType.I64, 'timestamp', None, None, ), # 8
    (9, TType.STRING, 'degradeRedirect', None, None, ), # 9
    (10, TType.I32, 'consumerQPS', None, None, ), # 10
    (11, TType.I32, 'degradeEnd', None,     1, ), # 11
    (12, TType.STRING, 'extend', None, None, ), # 12
  )

  def __init__(self, id=None, env=None, providerAppkey=None, consumerAppkey=None, method=None, degradeRatio=None, degradeStrategy=None, timestamp=None, degradeRedirect=None, consumerQPS=None, degradeEnd=thrift_spec[11][4], extend=None,):
    self.id = id
    self.env = env
    self.providerAppkey = providerAppkey
    self.consumerAppkey = consumerAppkey
    self.method = method
    self.degradeRatio = degradeRatio
    self.degradeStrategy = degradeStrategy
    self.timestamp = timestamp
    self.degradeRedirect = degradeRedirect
    self.consumerQPS = consumerQPS
    self.degradeEnd = degradeEnd
    self.extend = extend

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.env = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.providerAppkey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.consumerAppkey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.method = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.degradeRatio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.degradeStrategy = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.degradeRedirect = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.consumerQPS = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.degradeEnd = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.extend = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DegradeAction')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.env is not None:
      oprot.writeFieldBegin('env', TType.I32, 2)
      oprot.writeI32(self.env)
      oprot.writeFieldEnd()
    if self.providerAppkey is not None:
      oprot.writeFieldBegin('providerAppkey', TType.STRING, 3)
      oprot.writeString(self.providerAppkey)
      oprot.writeFieldEnd()
    if self.consumerAppkey is not None:
      oprot.writeFieldBegin('consumerAppkey', TType.STRING, 4)
      oprot.writeString(self.consumerAppkey)
      oprot.writeFieldEnd()
    if self.method is not None:
      oprot.writeFieldBegin('method', TType.STRING, 5)
      oprot.writeString(self.method)
      oprot.writeFieldEnd()
    if self.degradeRatio is not None:
      oprot.writeFieldBegin('degradeRatio', TType.DOUBLE, 6)
      oprot.writeDouble(self.degradeRatio)
      oprot.writeFieldEnd()
    if self.degradeStrategy is not None:
      oprot.writeFieldBegin('degradeStrategy', TType.I32, 7)
      oprot.writeI32(self.degradeStrategy)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 8)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.degradeRedirect is not None:
      oprot.writeFieldBegin('degradeRedirect', TType.STRING, 9)
      oprot.writeString(self.degradeRedirect)
      oprot.writeFieldEnd()
    if self.consumerQPS is not None:
      oprot.writeFieldBegin('consumerQPS', TType.I32, 10)
      oprot.writeI32(self.consumerQPS)
      oprot.writeFieldEnd()
    if self.degradeEnd is not None:
      oprot.writeFieldBegin('degradeEnd', TType.I32, 11)
      oprot.writeI32(self.degradeEnd)
      oprot.writeFieldEnd()
    if self.extend is not None:
      oprot.writeFieldBegin('extend', TType.STRING, 12)
      oprot.writeString(self.extend)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.env is None:
      raise TProtocol.TProtocolException(message='Required field env is unset!')
    if self.providerAppkey is None:
      raise TProtocol.TProtocolException(message='Required field providerAppkey is unset!')
    if self.consumerAppkey is None:
      raise TProtocol.TProtocolException(message='Required field consumerAppkey is unset!')
    if self.method is None:
      raise TProtocol.TProtocolException(message='Required field method is unset!')
    if self.degradeRatio is None:
      raise TProtocol.TProtocolException(message='Required field degradeRatio is unset!')
    if self.degradeStrategy is None:
      raise TProtocol.TProtocolException(message='Required field degradeStrategy is unset!')
    if self.timestamp is None:
      raise TProtocol.TProtocolException(message='Required field timestamp is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
