#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class SGLog:
  """
  Attributes:
   - appkey
   - time
   - level
   - content
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'appkey', None, None, ), # 1
    (2, TType.I64, 'time', None, None, ), # 2
    (3, TType.I32, 'level', None, None, ), # 3
    (4, TType.STRING, 'content', None, None, ), # 4
  )

  def __init__(self, appkey=None, time=None, level=None, content=None,):
    self.appkey = appkey
    self.time = time
    self.level = level
    self.content = content

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.appkey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.level = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SGLog')
    if self.appkey is not None:
      oprot.writeFieldBegin('appkey', TType.STRING, 1)
      oprot.writeString(self.appkey)
      oprot.writeFieldEnd()
    if self.time is not None:
      oprot.writeFieldBegin('time', TType.I64, 2)
      oprot.writeI64(self.time)
      oprot.writeFieldEnd()
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I32, 3)
      oprot.writeI32(self.level)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 4)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LogList:
  """
  Attributes:
   - logs
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'logs', (TType.STRUCT,(SGLog, SGLog.thrift_spec)), None, ), # 1
  )

  def __init__(self, logs=None,):
    self.logs = logs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.logs = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = SGLog()
            _elem5.read(iprot)
            self.logs.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LogList')
    if self.logs is not None:
      oprot.writeFieldBegin('logs', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.logs))
      for iter6 in self.logs:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.logs is None:
      raise TProtocol.TProtocolException(message='Required field logs is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SGModuleInvokeInfo:
  """
  Attributes:
   - traceId
   - spanId
   - spanName
   - localAppKey
   - localHost
   - localPort
   - remoteAppKey
   - remoteHost
   - remotePort
   - start
   - cost
   - type
   - status
   - count
   - debug
   - extend
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'traceId', None, None, ), # 1
    (2, TType.STRING, 'spanId', None, None, ), # 2
    (3, TType.STRING, 'spanName', None, None, ), # 3
    (4, TType.STRING, 'localAppKey', None, None, ), # 4
    (5, TType.STRING, 'localHost', None, None, ), # 5
    (6, TType.I32, 'localPort', None, None, ), # 6
    (7, TType.STRING, 'remoteAppKey', None, None, ), # 7
    (8, TType.STRING, 'remoteHost', None, None, ), # 8
    (9, TType.I32, 'remotePort', None, None, ), # 9
    (10, TType.I64, 'start', None, None, ), # 10
    (11, TType.I32, 'cost', None, None, ), # 11
    (12, TType.I32, 'type', None, None, ), # 12
    (13, TType.I32, 'status', None, None, ), # 13
    (14, TType.I32, 'count', None, None, ), # 14
    (15, TType.I32, 'debug', None, None, ), # 15
    (16, TType.STRING, 'extend', None, None, ), # 16
  )

  def __init__(self, traceId=None, spanId=None, spanName=None, localAppKey=None, localHost=None, localPort=None, remoteAppKey=None, remoteHost=None, remotePort=None, start=None, cost=None, type=None, status=None, count=None, debug=None, extend=None,):
    self.traceId = traceId
    self.spanId = spanId
    self.spanName = spanName
    self.localAppKey = localAppKey
    self.localHost = localHost
    self.localPort = localPort
    self.remoteAppKey = remoteAppKey
    self.remoteHost = remoteHost
    self.remotePort = remotePort
    self.start = start
    self.cost = cost
    self.type = type
    self.status = status
    self.count = count
    self.debug = debug
    self.extend = extend

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.traceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.spanId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.spanName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.localAppKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.localHost = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.localPort = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.remoteAppKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.remoteHost = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.remotePort = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.start = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.cost = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.debug = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.extend = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SGModuleInvokeInfo')
    if self.traceId is not None:
      oprot.writeFieldBegin('traceId', TType.STRING, 1)
      oprot.writeString(self.traceId)
      oprot.writeFieldEnd()
    if self.spanId is not None:
      oprot.writeFieldBegin('spanId', TType.STRING, 2)
      oprot.writeString(self.spanId)
      oprot.writeFieldEnd()
    if self.spanName is not None:
      oprot.writeFieldBegin('spanName', TType.STRING, 3)
      oprot.writeString(self.spanName)
      oprot.writeFieldEnd()
    if self.localAppKey is not None:
      oprot.writeFieldBegin('localAppKey', TType.STRING, 4)
      oprot.writeString(self.localAppKey)
      oprot.writeFieldEnd()
    if self.localHost is not None:
      oprot.writeFieldBegin('localHost', TType.STRING, 5)
      oprot.writeString(self.localHost)
      oprot.writeFieldEnd()
    if self.localPort is not None:
      oprot.writeFieldBegin('localPort', TType.I32, 6)
      oprot.writeI32(self.localPort)
      oprot.writeFieldEnd()
    if self.remoteAppKey is not None:
      oprot.writeFieldBegin('remoteAppKey', TType.STRING, 7)
      oprot.writeString(self.remoteAppKey)
      oprot.writeFieldEnd()
    if self.remoteHost is not None:
      oprot.writeFieldBegin('remoteHost', TType.STRING, 8)
      oprot.writeString(self.remoteHost)
      oprot.writeFieldEnd()
    if self.remotePort is not None:
      oprot.writeFieldBegin('remotePort', TType.I32, 9)
      oprot.writeI32(self.remotePort)
      oprot.writeFieldEnd()
    if self.start is not None:
      oprot.writeFieldBegin('start', TType.I64, 10)
      oprot.writeI64(self.start)
      oprot.writeFieldEnd()
    if self.cost is not None:
      oprot.writeFieldBegin('cost', TType.I32, 11)
      oprot.writeI32(self.cost)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 12)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 13)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 14)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.debug is not None:
      oprot.writeFieldBegin('debug', TType.I32, 15)
      oprot.writeI32(self.debug)
      oprot.writeFieldEnd()
    if self.extend is not None:
      oprot.writeFieldBegin('extend', TType.STRING, 16)
      oprot.writeString(self.extend)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CommonLog:
  """
  Attributes:
   - cmd
   - content
   - extend
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'cmd', None, None, ), # 1
    (2, TType.STRING, 'content', None, None, ), # 2
    (3, TType.STRING, 'extend', None, None, ), # 3
  )

  def __init__(self, cmd=None, content=None, extend=None,):
    self.cmd = cmd
    self.content = content
    self.extend = extend

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.cmd = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.extend = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CommonLog')
    if self.cmd is not None:
      oprot.writeFieldBegin('cmd', TType.I32, 1)
      oprot.writeI32(self.cmd)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 2)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.extend is not None:
      oprot.writeFieldBegin('extend', TType.STRING, 3)
      oprot.writeString(self.extend)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.cmd is None:
      raise TProtocol.TProtocolException(message='Required field cmd is unset!')
    if self.content is None:
      raise TProtocol.TProtocolException(message='Required field content is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ErrorLog:
  """
  Attributes:
   - appkey
   - time
   - level
   - category
   - content
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'appkey', None, None, ), # 1
    (2, TType.I64, 'time', None, None, ), # 2
    (3, TType.I32, 'level', None, None, ), # 3
    (4, TType.STRING, 'category', None, None, ), # 4
    (5, TType.STRING, 'content', None, None, ), # 5
  )

  def __init__(self, appkey=None, time=None, level=None, category=None, content=None,):
    self.appkey = appkey
    self.time = time
    self.level = level
    self.category = category
    self.content = content

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.appkey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.level = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.category = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ErrorLog')
    if self.appkey is not None:
      oprot.writeFieldBegin('appkey', TType.STRING, 1)
      oprot.writeString(self.appkey)
      oprot.writeFieldEnd()
    if self.time is not None:
      oprot.writeFieldBegin('time', TType.I64, 2)
      oprot.writeI64(self.time)
      oprot.writeFieldEnd()
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I32, 3)
      oprot.writeI32(self.level)
      oprot.writeFieldEnd()
    if self.category is not None:
      oprot.writeFieldBegin('category', TType.STRING, 4)
      oprot.writeString(self.category)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 5)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ErrorLogList:
  """
  Attributes:
   - logs
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'logs', (TType.STRUCT,(ErrorLog, ErrorLog.thrift_spec)), None, ), # 1
  )

  def __init__(self, logs=None,):
    self.logs = logs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.logs = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = ErrorLog()
            _elem12.read(iprot)
            self.logs.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ErrorLogList')
    if self.logs is not None:
      oprot.writeFieldBegin('logs', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.logs))
      for iter13 in self.logs:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TraceLog:
  """
  Attributes:
   - traceId
   - spanId
   - spanName
   - localAppKey
   - localHost
   - localPort
   - remoteAppKey
   - remoteHost
   - remotePort
   - start
   - cost
   - type
   - status
   - count
   - debug
   - extend
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'traceId', None, None, ), # 1
    (2, TType.STRING, 'spanId', None, None, ), # 2
    (3, TType.STRING, 'spanName', None, None, ), # 3
    (4, TType.STRING, 'localAppKey', None, None, ), # 4
    (5, TType.STRING, 'localHost', None, None, ), # 5
    (6, TType.I32, 'localPort', None, None, ), # 6
    (7, TType.STRING, 'remoteAppKey', None, None, ), # 7
    (8, TType.STRING, 'remoteHost', None, None, ), # 8
    (9, TType.I32, 'remotePort', None, None, ), # 9
    (10, TType.I64, 'start', None, None, ), # 10
    (11, TType.I32, 'cost', None, None, ), # 11
    (12, TType.I32, 'type', None, None, ), # 12
    (13, TType.I32, 'status', None, None, ), # 13
    (14, TType.I32, 'count', None, None, ), # 14
    (15, TType.I32, 'debug', None, None, ), # 15
    (16, TType.STRING, 'extend', None, None, ), # 16
  )

  def __init__(self, traceId=None, spanId=None, spanName=None, localAppKey=None, localHost=None, localPort=None, remoteAppKey=None, remoteHost=None, remotePort=None, start=None, cost=None, type=None, status=None, count=None, debug=None, extend=None,):
    self.traceId = traceId
    self.spanId = spanId
    self.spanName = spanName
    self.localAppKey = localAppKey
    self.localHost = localHost
    self.localPort = localPort
    self.remoteAppKey = remoteAppKey
    self.remoteHost = remoteHost
    self.remotePort = remotePort
    self.start = start
    self.cost = cost
    self.type = type
    self.status = status
    self.count = count
    self.debug = debug
    self.extend = extend

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.traceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.spanId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.spanName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.localAppKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.localHost = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.localPort = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.remoteAppKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.remoteHost = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.remotePort = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.start = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.cost = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.debug = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.extend = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TraceLog')
    if self.traceId is not None:
      oprot.writeFieldBegin('traceId', TType.STRING, 1)
      oprot.writeString(self.traceId)
      oprot.writeFieldEnd()
    if self.spanId is not None:
      oprot.writeFieldBegin('spanId', TType.STRING, 2)
      oprot.writeString(self.spanId)
      oprot.writeFieldEnd()
    if self.spanName is not None:
      oprot.writeFieldBegin('spanName', TType.STRING, 3)
      oprot.writeString(self.spanName)
      oprot.writeFieldEnd()
    if self.localAppKey is not None:
      oprot.writeFieldBegin('localAppKey', TType.STRING, 4)
      oprot.writeString(self.localAppKey)
      oprot.writeFieldEnd()
    if self.localHost is not None:
      oprot.writeFieldBegin('localHost', TType.STRING, 5)
      oprot.writeString(self.localHost)
      oprot.writeFieldEnd()
    if self.localPort is not None:
      oprot.writeFieldBegin('localPort', TType.I32, 6)
      oprot.writeI32(self.localPort)
      oprot.writeFieldEnd()
    if self.remoteAppKey is not None:
      oprot.writeFieldBegin('remoteAppKey', TType.STRING, 7)
      oprot.writeString(self.remoteAppKey)
      oprot.writeFieldEnd()
    if self.remoteHost is not None:
      oprot.writeFieldBegin('remoteHost', TType.STRING, 8)
      oprot.writeString(self.remoteHost)
      oprot.writeFieldEnd()
    if self.remotePort is not None:
      oprot.writeFieldBegin('remotePort', TType.I32, 9)
      oprot.writeI32(self.remotePort)
      oprot.writeFieldEnd()
    if self.start is not None:
      oprot.writeFieldBegin('start', TType.I64, 10)
      oprot.writeI64(self.start)
      oprot.writeFieldEnd()
    if self.cost is not None:
      oprot.writeFieldBegin('cost', TType.I32, 11)
      oprot.writeI32(self.cost)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 12)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 13)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 14)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.debug is not None:
      oprot.writeFieldBegin('debug', TType.I32, 15)
      oprot.writeI32(self.debug)
      oprot.writeFieldEnd()
    if self.extend is not None:
      oprot.writeFieldBegin('extend', TType.STRING, 16)
      oprot.writeString(self.extend)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TraceLogList:
  """
  Attributes:
   - logs
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'logs', (TType.STRUCT,(TraceLog, TraceLog.thrift_spec)), None, ), # 1
  )

  def __init__(self, logs=None,):
    self.logs = logs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.logs = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = TraceLog()
            _elem19.read(iprot)
            self.logs.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TraceLogList')
    if self.logs is not None:
      oprot.writeFieldBegin('logs', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.logs))
      for iter20 in self.logs:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TraceThresholdLog:
  """
  Attributes:
   - traceId
   - spanId
   - spanName
   - localAppKey
   - localHost
   - localPort
   - remoteAppKey
   - remoteHost
   - remotePort
   - start
   - cost
   - type
   - status
   - count
   - debug
   - extend
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'traceId', None, None, ), # 1
    (2, TType.STRING, 'spanId', None, None, ), # 2
    (3, TType.STRING, 'spanName', None, None, ), # 3
    (4, TType.STRING, 'localAppKey', None, None, ), # 4
    (5, TType.STRING, 'localHost', None, None, ), # 5
    (6, TType.I32, 'localPort', None, None, ), # 6
    (7, TType.STRING, 'remoteAppKey', None, None, ), # 7
    (8, TType.STRING, 'remoteHost', None, None, ), # 8
    (9, TType.I32, 'remotePort', None, None, ), # 9
    (10, TType.I64, 'start', None, None, ), # 10
    (11, TType.I32, 'cost', None, None, ), # 11
    (12, TType.I32, 'type', None, None, ), # 12
    (13, TType.I32, 'status', None, None, ), # 13
    (14, TType.I32, 'count', None, None, ), # 14
    (15, TType.I32, 'debug', None, None, ), # 15
    (16, TType.STRING, 'extend', None, None, ), # 16
  )

  def __init__(self, traceId=None, spanId=None, spanName=None, localAppKey=None, localHost=None, localPort=None, remoteAppKey=None, remoteHost=None, remotePort=None, start=None, cost=None, type=None, status=None, count=None, debug=None, extend=None,):
    self.traceId = traceId
    self.spanId = spanId
    self.spanName = spanName
    self.localAppKey = localAppKey
    self.localHost = localHost
    self.localPort = localPort
    self.remoteAppKey = remoteAppKey
    self.remoteHost = remoteHost
    self.remotePort = remotePort
    self.start = start
    self.cost = cost
    self.type = type
    self.status = status
    self.count = count
    self.debug = debug
    self.extend = extend

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.traceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.spanId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.spanName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.localAppKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.localHost = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.localPort = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.remoteAppKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.remoteHost = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.remotePort = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.start = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.cost = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.debug = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.extend = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TraceThresholdLog')
    if self.traceId is not None:
      oprot.writeFieldBegin('traceId', TType.STRING, 1)
      oprot.writeString(self.traceId)
      oprot.writeFieldEnd()
    if self.spanId is not None:
      oprot.writeFieldBegin('spanId', TType.STRING, 2)
      oprot.writeString(self.spanId)
      oprot.writeFieldEnd()
    if self.spanName is not None:
      oprot.writeFieldBegin('spanName', TType.STRING, 3)
      oprot.writeString(self.spanName)
      oprot.writeFieldEnd()
    if self.localAppKey is not None:
      oprot.writeFieldBegin('localAppKey', TType.STRING, 4)
      oprot.writeString(self.localAppKey)
      oprot.writeFieldEnd()
    if self.localHost is not None:
      oprot.writeFieldBegin('localHost', TType.STRING, 5)
      oprot.writeString(self.localHost)
      oprot.writeFieldEnd()
    if self.localPort is not None:
      oprot.writeFieldBegin('localPort', TType.I32, 6)
      oprot.writeI32(self.localPort)
      oprot.writeFieldEnd()
    if self.remoteAppKey is not None:
      oprot.writeFieldBegin('remoteAppKey', TType.STRING, 7)
      oprot.writeString(self.remoteAppKey)
      oprot.writeFieldEnd()
    if self.remoteHost is not None:
      oprot.writeFieldBegin('remoteHost', TType.STRING, 8)
      oprot.writeString(self.remoteHost)
      oprot.writeFieldEnd()
    if self.remotePort is not None:
      oprot.writeFieldBegin('remotePort', TType.I32, 9)
      oprot.writeI32(self.remotePort)
      oprot.writeFieldEnd()
    if self.start is not None:
      oprot.writeFieldBegin('start', TType.I64, 10)
      oprot.writeI64(self.start)
      oprot.writeFieldEnd()
    if self.cost is not None:
      oprot.writeFieldBegin('cost', TType.I32, 11)
      oprot.writeI32(self.cost)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 12)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 13)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 14)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.debug is not None:
      oprot.writeFieldBegin('debug', TType.I32, 15)
      oprot.writeI32(self.debug)
      oprot.writeFieldEnd()
    if self.extend is not None:
      oprot.writeFieldBegin('extend', TType.STRING, 16)
      oprot.writeString(self.extend)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TraceThresholdLogList:
  """
  Attributes:
   - logs
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'logs', (TType.STRUCT,(TraceThresholdLog, TraceThresholdLog.thrift_spec)), None, ), # 1
  )

  def __init__(self, logs=None,):
    self.logs = logs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.logs = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = TraceThresholdLog()
            _elem26.read(iprot)
            self.logs.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TraceThresholdLogList')
    if self.logs is not None:
      oprot.writeFieldBegin('logs', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.logs))
      for iter27 in self.logs:
        iter27.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DropRequest:
  """
  Attributes:
   - appkey
   - host
   - remoteAppkey
   - spanname
   - start
   - count
   - type
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'appkey', None, None, ), # 1
    (2, TType.STRING, 'host', None, None, ), # 2
    (3, TType.STRING, 'remoteAppkey', None, None, ), # 3
    (4, TType.STRING, 'spanname', None, None, ), # 4
    (5, TType.I64, 'start', None, None, ), # 5
    (6, TType.I64, 'count', None, None, ), # 6
    (7, TType.I32, 'type', None, None, ), # 7
  )

  def __init__(self, appkey=None, host=None, remoteAppkey=None, spanname=None, start=None, count=None, type=None,):
    self.appkey = appkey
    self.host = host
    self.remoteAppkey = remoteAppkey
    self.spanname = spanname
    self.start = start
    self.count = count
    self.type = type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.appkey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.host = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.remoteAppkey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.spanname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.start = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.count = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DropRequest')
    if self.appkey is not None:
      oprot.writeFieldBegin('appkey', TType.STRING, 1)
      oprot.writeString(self.appkey)
      oprot.writeFieldEnd()
    if self.host is not None:
      oprot.writeFieldBegin('host', TType.STRING, 2)
      oprot.writeString(self.host)
      oprot.writeFieldEnd()
    if self.remoteAppkey is not None:
      oprot.writeFieldBegin('remoteAppkey', TType.STRING, 3)
      oprot.writeString(self.remoteAppkey)
      oprot.writeFieldEnd()
    if self.spanname is not None:
      oprot.writeFieldBegin('spanname', TType.STRING, 4)
      oprot.writeString(self.spanname)
      oprot.writeFieldEnd()
    if self.start is not None:
      oprot.writeFieldBegin('start', TType.I64, 5)
      oprot.writeI64(self.start)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I64, 6)
      oprot.writeI64(self.count)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 7)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DropRequestList:
  """
  Attributes:
   - requests
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'requests', (TType.STRUCT,(DropRequest, DropRequest.thrift_spec)), None, ), # 1
  )

  def __init__(self, requests=None,):
    self.requests = requests

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.requests = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = DropRequest()
            _elem33.read(iprot)
            self.requests.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DropRequestList')
    if self.requests is not None:
      oprot.writeFieldBegin('requests', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.requests))
      for iter34 in self.requests:
        iter34.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PerfCostData:
  """
  Attributes:
   - cost
   - count
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'cost', None, None, ), # 1
    (2, TType.I64, 'count', None, None, ), # 2
  )

  def __init__(self, cost=None, count=None,):
    self.cost = cost
    self.count = count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.cost = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.count = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PerfCostData')
    if self.cost is not None:
      oprot.writeFieldBegin('cost', TType.I32, 1)
      oprot.writeI32(self.cost)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I64, 2)
      oprot.writeI64(self.count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PerfCostDataList:
  """
  Attributes:
   - costDataList
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'costDataList', (TType.STRUCT,(PerfCostData, PerfCostData.thrift_spec)), None, ), # 1
  )

  def __init__(self, costDataList=None,):
    self.costDataList = costDataList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.costDataList = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = PerfCostData()
            _elem40.read(iprot)
            self.costDataList.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PerfCostDataList')
    if self.costDataList is not None:
      oprot.writeFieldBegin('costDataList', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.costDataList))
      for iter41 in self.costDataList:
        iter41.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
