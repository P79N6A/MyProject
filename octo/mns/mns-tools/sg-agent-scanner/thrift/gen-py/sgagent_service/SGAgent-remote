#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import SGAgent
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '   getServiceList(string localAppkey, string remoteAppkey)'
  print '   getHttpServiceList(string localAppkey, string remoteAppkey)'
  print '   getAppKeyListByBusinessLine(i32 businessLineCode)'
  print '  SGService getService(string localAppkey, string remoteAppkey, i32 strategy)'
  print '  i32 registService(SGService oService)'
  print '  i32 updateConfig(ConfigUpdateRequest request)'
  print '  string getConfig(proc_conf_param_t node)'
  print '  i32 setConfig(proc_conf_param_t conf)'
  print '  file_param_t getFileConfig(file_param_t file)'
  print '  i32 notifyFileConfigIssued(file_param_t files)'
  print '  i32 notifyFileConfigWork(file_param_t files)'
  print '  string getLocalConfig(string localAppkey, string ip)'
  print '  i32 uploadLog(SGLog oLog)'
  print '  i32 uploadCommonLog(CommonLog oCommonLog)'
  print '  i32 uploadModuleInvoke(SGModuleInvokeInfo oInfo)'
  print '   getDegradeActions(string localAppkey, string remoteAppkey)'
  print '  ZabbixSelfCheck getZabbixInfo()'
  print '  string getAuthorizedConsumers(string targetAppkey)'
  print '  string getAuthorizedProviders(string targetAppkey)'
  print '   getHttpPropertiesByBusinessLine(i32 bizCode)'
  print '   getHttpPropertiesByAppkey(string appkey)'
  print '  bool switchEnv(string env, string verifyCode)'
  print '  string getName()'
  print '  string getVersion()'
  print '  i32 getEnv()'
  print '  sg_fb_status getStatus()'
  print '  string getStatusDetails()'
  print '   getCounters()'
  print '  i64 getCounter(string key)'
  print '  void setOption(string key, string value)'
  print '  string getOption(string key)'
  print '   getOptions()'
  print '  string getCpuProfile(i32 profileDurationInSec)'
  print '  i64 aliveSince()'
  print '  void reinitialize()'
  print '  void shutdown()'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = SGAgent.Client(protocol)
transport.open()

if cmd == 'getServiceList':
  if len(args) != 2:
    print 'getServiceList requires 2 args'
    sys.exit(1)
  pp.pprint(client.getServiceList(args[0],args[1],))

elif cmd == 'getHttpServiceList':
  if len(args) != 2:
    print 'getHttpServiceList requires 2 args'
    sys.exit(1)
  pp.pprint(client.getHttpServiceList(args[0],args[1],))

elif cmd == 'getAppKeyListByBusinessLine':
  if len(args) != 1:
    print 'getAppKeyListByBusinessLine requires 1 args'
    sys.exit(1)
  pp.pprint(client.getAppKeyListByBusinessLine(eval(args[0]),))

elif cmd == 'getService':
  if len(args) != 3:
    print 'getService requires 3 args'
    sys.exit(1)
  pp.pprint(client.getService(args[0],args[1],eval(args[2]),))

elif cmd == 'registService':
  if len(args) != 1:
    print 'registService requires 1 args'
    sys.exit(1)
  pp.pprint(client.registService(eval(args[0]),))

elif cmd == 'updateConfig':
  if len(args) != 1:
    print 'updateConfig requires 1 args'
    sys.exit(1)
  pp.pprint(client.updateConfig(eval(args[0]),))

elif cmd == 'getConfig':
  if len(args) != 1:
    print 'getConfig requires 1 args'
    sys.exit(1)
  pp.pprint(client.getConfig(eval(args[0]),))

elif cmd == 'setConfig':
  if len(args) != 1:
    print 'setConfig requires 1 args'
    sys.exit(1)
  pp.pprint(client.setConfig(eval(args[0]),))

elif cmd == 'getFileConfig':
  if len(args) != 1:
    print 'getFileConfig requires 1 args'
    sys.exit(1)
  pp.pprint(client.getFileConfig(eval(args[0]),))

elif cmd == 'notifyFileConfigIssued':
  if len(args) != 1:
    print 'notifyFileConfigIssued requires 1 args'
    sys.exit(1)
  pp.pprint(client.notifyFileConfigIssued(eval(args[0]),))

elif cmd == 'notifyFileConfigWork':
  if len(args) != 1:
    print 'notifyFileConfigWork requires 1 args'
    sys.exit(1)
  pp.pprint(client.notifyFileConfigWork(eval(args[0]),))

elif cmd == 'getLocalConfig':
  if len(args) != 2:
    print 'getLocalConfig requires 2 args'
    sys.exit(1)
  pp.pprint(client.getLocalConfig(args[0],args[1],))

elif cmd == 'uploadLog':
  if len(args) != 1:
    print 'uploadLog requires 1 args'
    sys.exit(1)
  pp.pprint(client.uploadLog(eval(args[0]),))

elif cmd == 'uploadCommonLog':
  if len(args) != 1:
    print 'uploadCommonLog requires 1 args'
    sys.exit(1)
  pp.pprint(client.uploadCommonLog(eval(args[0]),))

elif cmd == 'uploadModuleInvoke':
  if len(args) != 1:
    print 'uploadModuleInvoke requires 1 args'
    sys.exit(1)
  pp.pprint(client.uploadModuleInvoke(eval(args[0]),))

elif cmd == 'getDegradeActions':
  if len(args) != 2:
    print 'getDegradeActions requires 2 args'
    sys.exit(1)
  pp.pprint(client.getDegradeActions(args[0],args[1],))

elif cmd == 'getZabbixInfo':
  if len(args) != 0:
    print 'getZabbixInfo requires 0 args'
    sys.exit(1)
  pp.pprint(client.getZabbixInfo())

elif cmd == 'getAuthorizedConsumers':
  if len(args) != 1:
    print 'getAuthorizedConsumers requires 1 args'
    sys.exit(1)
  pp.pprint(client.getAuthorizedConsumers(args[0],))

elif cmd == 'getAuthorizedProviders':
  if len(args) != 1:
    print 'getAuthorizedProviders requires 1 args'
    sys.exit(1)
  pp.pprint(client.getAuthorizedProviders(args[0],))

elif cmd == 'getHttpPropertiesByBusinessLine':
  if len(args) != 1:
    print 'getHttpPropertiesByBusinessLine requires 1 args'
    sys.exit(1)
  pp.pprint(client.getHttpPropertiesByBusinessLine(eval(args[0]),))

elif cmd == 'getHttpPropertiesByAppkey':
  if len(args) != 1:
    print 'getHttpPropertiesByAppkey requires 1 args'
    sys.exit(1)
  pp.pprint(client.getHttpPropertiesByAppkey(args[0],))

elif cmd == 'switchEnv':
  if len(args) != 2:
    print 'switchEnv requires 2 args'
    sys.exit(1)
  pp.pprint(client.switchEnv(args[0],args[1],))

elif cmd == 'getName':
  if len(args) != 0:
    print 'getName requires 0 args'
    sys.exit(1)
  pp.pprint(client.getName())

elif cmd == 'getVersion':
  if len(args) != 0:
    print 'getVersion requires 0 args'
    sys.exit(1)
  pp.pprint(client.getVersion())

elif cmd == 'getEnv':
  if len(args) != 0:
    print 'getEnv requires 0 args'
    sys.exit(1)
  pp.pprint(client.getEnv())

elif cmd == 'getStatus':
  if len(args) != 0:
    print 'getStatus requires 0 args'
    sys.exit(1)
  pp.pprint(client.getStatus())

elif cmd == 'getStatusDetails':
  if len(args) != 0:
    print 'getStatusDetails requires 0 args'
    sys.exit(1)
  pp.pprint(client.getStatusDetails())

elif cmd == 'getCounters':
  if len(args) != 0:
    print 'getCounters requires 0 args'
    sys.exit(1)
  pp.pprint(client.getCounters())

elif cmd == 'getCounter':
  if len(args) != 1:
    print 'getCounter requires 1 args'
    sys.exit(1)
  pp.pprint(client.getCounter(args[0],))

elif cmd == 'setOption':
  if len(args) != 2:
    print 'setOption requires 2 args'
    sys.exit(1)
  pp.pprint(client.setOption(args[0],args[1],))

elif cmd == 'getOption':
  if len(args) != 1:
    print 'getOption requires 1 args'
    sys.exit(1)
  pp.pprint(client.getOption(args[0],))

elif cmd == 'getOptions':
  if len(args) != 0:
    print 'getOptions requires 0 args'
    sys.exit(1)
  pp.pprint(client.getOptions())

elif cmd == 'getCpuProfile':
  if len(args) != 1:
    print 'getCpuProfile requires 1 args'
    sys.exit(1)
  pp.pprint(client.getCpuProfile(eval(args[0]),))

elif cmd == 'aliveSince':
  if len(args) != 0:
    print 'aliveSince requires 0 args'
    sys.exit(1)
  pp.pprint(client.aliveSince())

elif cmd == 'reinitialize':
  if len(args) != 0:
    print 'reinitialize requires 0 args'
    sys.exit(1)
  pp.pprint(client.reinitialize())

elif cmd == 'shutdown':
  if len(args) != 0:
    print 'shutdown requires 0 args'
    sys.exit(1)
  pp.pprint(client.shutdown())

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
