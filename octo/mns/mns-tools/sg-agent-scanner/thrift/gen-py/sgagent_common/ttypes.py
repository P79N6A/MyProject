# -*- coding: utf-8 -*-
#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException
import config_common.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class fb_status:
  """
  Common status reporting mechanism across all services
  """
  DEAD = 0
  STARTING = 1
  ALIVE = 2
  STOPPING = 3
  STOPPED = 4
  WARNING = 5

  _VALUES_TO_NAMES = {
    0: "DEAD",
    1: "STARTING",
    2: "ALIVE",
    3: "STOPPING",
    4: "STOPPED",
    5: "WARNING",
  }

  _NAMES_TO_VALUES = {
    "DEAD": 0,
    "STARTING": 1,
    "ALIVE": 2,
    "STOPPING": 3,
    "STOPPED": 4,
    "WARNING": 5,
  }


class SGService:
  """
  Attributes:
   - appkey
   - version
   - ip
   - port
   - weight
   - status
   - role
   - envir
   - lastUpdateTime
   - extend
   - fweight
   - serverType
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'appkey', None, None, ), # 1
    (2, TType.STRING, 'version', None, None, ), # 2
    (3, TType.STRING, 'ip', None, None, ), # 3
    (4, TType.I32, 'port', None, None, ), # 4
    (5, TType.I32, 'weight', None, None, ), # 5
    (6, TType.I32, 'status', None, None, ), # 6
    (7, TType.I32, 'role', None, None, ), # 7
    (8, TType.I32, 'envir', None, None, ), # 8
    (9, TType.I32, 'lastUpdateTime', None, None, ), # 9
    (10, TType.STRING, 'extend', None, None, ), # 10
    (11, TType.DOUBLE, 'fweight', None, None, ), # 11
    (12, TType.I32, 'serverType', None, None, ), # 12
  )

  def __init__(self, appkey=None, version=None, ip=None, port=None, weight=None, status=None, role=None, envir=None, lastUpdateTime=None, extend=None, fweight=None, serverType=None,):
    self.appkey = appkey
    self.version = version
    self.ip = ip
    self.port = port
    self.weight = weight
    self.status = status
    self.role = role
    self.envir = envir
    self.lastUpdateTime = lastUpdateTime
    self.extend = extend
    self.fweight = fweight
    self.serverType = serverType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.appkey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.version = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.ip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.port = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.weight = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.role = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.envir = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.lastUpdateTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.extend = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.DOUBLE:
          self.fweight = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.serverType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SGService')
    if self.appkey is not None:
      oprot.writeFieldBegin('appkey', TType.STRING, 1)
      oprot.writeString(self.appkey)
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.STRING, 2)
      oprot.writeString(self.version)
      oprot.writeFieldEnd()
    if self.ip is not None:
      oprot.writeFieldBegin('ip', TType.STRING, 3)
      oprot.writeString(self.ip)
      oprot.writeFieldEnd()
    if self.port is not None:
      oprot.writeFieldBegin('port', TType.I32, 4)
      oprot.writeI32(self.port)
      oprot.writeFieldEnd()
    if self.weight is not None:
      oprot.writeFieldBegin('weight', TType.I32, 5)
      oprot.writeI32(self.weight)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 6)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.role is not None:
      oprot.writeFieldBegin('role', TType.I32, 7)
      oprot.writeI32(self.role)
      oprot.writeFieldEnd()
    if self.envir is not None:
      oprot.writeFieldBegin('envir', TType.I32, 8)
      oprot.writeI32(self.envir)
      oprot.writeFieldEnd()
    if self.lastUpdateTime is not None:
      oprot.writeFieldBegin('lastUpdateTime', TType.I32, 9)
      oprot.writeI32(self.lastUpdateTime)
      oprot.writeFieldEnd()
    if self.extend is not None:
      oprot.writeFieldBegin('extend', TType.STRING, 10)
      oprot.writeString(self.extend)
      oprot.writeFieldEnd()
    if self.fweight is not None:
      oprot.writeFieldBegin('fweight', TType.DOUBLE, 11)
      oprot.writeDouble(self.fweight)
      oprot.writeFieldEnd()
    if self.serverType is not None:
      oprot.writeFieldBegin('serverType', TType.I32, 12)
      oprot.writeI32(self.serverType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Consumer:
  """
  Attributes:
   - ips
   - appkeys
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'ips', (TType.STRING,None), None, ), # 1
    (2, TType.LIST, 'appkeys', (TType.STRING,None), None, ), # 2
  )

  def __init__(self, ips=None, appkeys=None,):
    self.ips = ips
    self.appkeys = appkeys

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.ips = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.ips.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.appkeys = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readString();
            self.appkeys.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Consumer')
    if self.ips is not None:
      oprot.writeFieldBegin('ips', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.ips))
      for iter12 in self.ips:
        oprot.writeString(iter12)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.appkeys is not None:
      oprot.writeFieldBegin('appkeys', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.appkeys))
      for iter13 in self.appkeys:
        oprot.writeString(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CRouteData:
  """
  Attributes:
   - id
   - name
   - appkey
   - env
   - category
   - priority
   - status
   - consumer
   - provider
   - updateTime
   - createTime
   - reserved
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'appkey', None, None, ), # 3
    (4, TType.I32, 'env', None, None, ), # 4
    (5, TType.I32, 'category', None, None, ), # 5
    (6, TType.I32, 'priority', None, None, ), # 6
    (7, TType.I32, 'status', None, None, ), # 7
    (8, TType.STRUCT, 'consumer', (Consumer, Consumer.thrift_spec), None, ), # 8
    (9, TType.LIST, 'provider', (TType.STRING,None), None, ), # 9
    (10, TType.I32, 'updateTime', None, None, ), # 10
    (11, TType.I32, 'createTime', None, None, ), # 11
    (12, TType.STRING, 'reserved', None, None, ), # 12
  )

  def __init__(self, id=None, name=None, appkey=None, env=None, category=None, priority=None, status=None, consumer=None, provider=None, updateTime=None, createTime=None, reserved=None,):
    self.id = id
    self.name = name
    self.appkey = appkey
    self.env = env
    self.category = category
    self.priority = priority
    self.status = status
    self.consumer = consumer
    self.provider = provider
    self.updateTime = updateTime
    self.createTime = createTime
    self.reserved = reserved

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.appkey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.env = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.category = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.priority = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.consumer = Consumer()
          self.consumer.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.provider = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = iprot.readString();
            self.provider.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.updateTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.createTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.reserved = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CRouteData')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.appkey is not None:
      oprot.writeFieldBegin('appkey', TType.STRING, 3)
      oprot.writeString(self.appkey)
      oprot.writeFieldEnd()
    if self.env is not None:
      oprot.writeFieldBegin('env', TType.I32, 4)
      oprot.writeI32(self.env)
      oprot.writeFieldEnd()
    if self.category is not None:
      oprot.writeFieldBegin('category', TType.I32, 5)
      oprot.writeI32(self.category)
      oprot.writeFieldEnd()
    if self.priority is not None:
      oprot.writeFieldBegin('priority', TType.I32, 6)
      oprot.writeI32(self.priority)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 7)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.consumer is not None:
      oprot.writeFieldBegin('consumer', TType.STRUCT, 8)
      self.consumer.write(oprot)
      oprot.writeFieldEnd()
    if self.provider is not None:
      oprot.writeFieldBegin('provider', TType.LIST, 9)
      oprot.writeListBegin(TType.STRING, len(self.provider))
      for iter20 in self.provider:
        oprot.writeString(iter20)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.updateTime is not None:
      oprot.writeFieldBegin('updateTime', TType.I32, 10)
      oprot.writeI32(self.updateTime)
      oprot.writeFieldEnd()
    if self.createTime is not None:
      oprot.writeFieldBegin('createTime', TType.I32, 11)
      oprot.writeI32(self.createTime)
      oprot.writeFieldEnd()
    if self.reserved is not None:
      oprot.writeFieldBegin('reserved', TType.STRING, 12)
      oprot.writeString(self.reserved)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CProviderNode:
  """
  Attributes:
   - appkey
   - lastModifiedTime
   - mtime
   - cversion
   - version
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'appkey', None, None, ), # 1
    (2, TType.I64, 'lastModifiedTime', None, None, ), # 2
    (3, TType.I64, 'mtime', None, None, ), # 3
    (4, TType.I64, 'cversion', None, None, ), # 4
    (5, TType.I64, 'version', None, None, ), # 5
  )

  def __init__(self, appkey=None, lastModifiedTime=None, mtime=None, cversion=None, version=None,):
    self.appkey = appkey
    self.lastModifiedTime = lastModifiedTime
    self.mtime = mtime
    self.cversion = cversion
    self.version = version

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.appkey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.lastModifiedTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.mtime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.cversion = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.version = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CProviderNode')
    if self.appkey is not None:
      oprot.writeFieldBegin('appkey', TType.STRING, 1)
      oprot.writeString(self.appkey)
      oprot.writeFieldEnd()
    if self.lastModifiedTime is not None:
      oprot.writeFieldBegin('lastModifiedTime', TType.I64, 2)
      oprot.writeI64(self.lastModifiedTime)
      oprot.writeFieldEnd()
    if self.mtime is not None:
      oprot.writeFieldBegin('mtime', TType.I64, 3)
      oprot.writeI64(self.mtime)
      oprot.writeFieldEnd()
    if self.cversion is not None:
      oprot.writeFieldBegin('cversion', TType.I64, 4)
      oprot.writeI64(self.cversion)
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.I64, 5)
      oprot.writeI64(self.version)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CRouteNode:
  """
  Attributes:
   - appkey
   - lastModifiedTime
   - mtime
   - cversion
   - version
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'appkey', None, None, ), # 1
    (2, TType.I64, 'lastModifiedTime', None, None, ), # 2
    (3, TType.I64, 'mtime', None, None, ), # 3
    (4, TType.I64, 'cversion', None, None, ), # 4
    (5, TType.I64, 'version', None, None, ), # 5
  )

  def __init__(self, appkey=None, lastModifiedTime=None, mtime=None, cversion=None, version=None,):
    self.appkey = appkey
    self.lastModifiedTime = lastModifiedTime
    self.mtime = mtime
    self.cversion = cversion
    self.version = version

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.appkey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.lastModifiedTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.mtime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.cversion = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.version = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CRouteNode')
    if self.appkey is not None:
      oprot.writeFieldBegin('appkey', TType.STRING, 1)
      oprot.writeString(self.appkey)
      oprot.writeFieldEnd()
    if self.lastModifiedTime is not None:
      oprot.writeFieldBegin('lastModifiedTime', TType.I64, 2)
      oprot.writeI64(self.lastModifiedTime)
      oprot.writeFieldEnd()
    if self.mtime is not None:
      oprot.writeFieldBegin('mtime', TType.I64, 3)
      oprot.writeI64(self.mtime)
      oprot.writeFieldEnd()
    if self.cversion is not None:
      oprot.writeFieldBegin('cversion', TType.I64, 4)
      oprot.writeI64(self.cversion)
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.I64, 5)
      oprot.writeI64(self.version)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ParamMCC:
  """
  Attributes:
   - appkey
   - zkNode
   - md5
   - fileName
   - path
   - lastUpdateTime
   - needToLocal
   - createTime
   - privilege
   - reserved
   - fileType
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'appkey', None, None, ), # 1
    (2, TType.STRING, 'zkNode', None, None, ), # 2
    (3, TType.STRING, 'md5', None, None, ), # 3
    (4, TType.STRING, 'fileName', None, None, ), # 4
    (5, TType.STRING, 'path', None, None, ), # 5
    (6, TType.I64, 'lastUpdateTime', None, None, ), # 6
    (7, TType.I32, 'needToLocal', None, None, ), # 7
    (8, TType.I64, 'createTime', None, None, ), # 8
    (9, TType.STRING, 'privilege', None, None, ), # 9
    (10, TType.STRING, 'reserved', None, None, ), # 10
    (11, TType.STRING, 'fileType', None, None, ), # 11
  )

  def __init__(self, appkey=None, zkNode=None, md5=None, fileName=None, path=None, lastUpdateTime=None, needToLocal=None, createTime=None, privilege=None, reserved=None, fileType=None,):
    self.appkey = appkey
    self.zkNode = zkNode
    self.md5 = md5
    self.fileName = fileName
    self.path = path
    self.lastUpdateTime = lastUpdateTime
    self.needToLocal = needToLocal
    self.createTime = createTime
    self.privilege = privilege
    self.reserved = reserved
    self.fileType = fileType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.appkey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.zkNode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.md5 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.fileName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.path = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.lastUpdateTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.needToLocal = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.createTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.privilege = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.reserved = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.fileType = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ParamMCC')
    if self.appkey is not None:
      oprot.writeFieldBegin('appkey', TType.STRING, 1)
      oprot.writeString(self.appkey)
      oprot.writeFieldEnd()
    if self.zkNode is not None:
      oprot.writeFieldBegin('zkNode', TType.STRING, 2)
      oprot.writeString(self.zkNode)
      oprot.writeFieldEnd()
    if self.md5 is not None:
      oprot.writeFieldBegin('md5', TType.STRING, 3)
      oprot.writeString(self.md5)
      oprot.writeFieldEnd()
    if self.fileName is not None:
      oprot.writeFieldBegin('fileName', TType.STRING, 4)
      oprot.writeString(self.fileName)
      oprot.writeFieldEnd()
    if self.path is not None:
      oprot.writeFieldBegin('path', TType.STRING, 5)
      oprot.writeString(self.path)
      oprot.writeFieldEnd()
    if self.lastUpdateTime is not None:
      oprot.writeFieldBegin('lastUpdateTime', TType.I64, 6)
      oprot.writeI64(self.lastUpdateTime)
      oprot.writeFieldEnd()
    if self.needToLocal is not None:
      oprot.writeFieldBegin('needToLocal', TType.I32, 7)
      oprot.writeI32(self.needToLocal)
      oprot.writeFieldEnd()
    if self.createTime is not None:
      oprot.writeFieldBegin('createTime', TType.I64, 8)
      oprot.writeI64(self.createTime)
      oprot.writeFieldEnd()
    if self.privilege is not None:
      oprot.writeFieldBegin('privilege', TType.STRING, 9)
      oprot.writeString(self.privilege)
      oprot.writeFieldEnd()
    if self.reserved is not None:
      oprot.writeFieldBegin('reserved', TType.STRING, 10)
      oprot.writeString(self.reserved)
      oprot.writeFieldEnd()
    if self.fileType is not None:
      oprot.writeFieldBegin('fileType', TType.STRING, 11)
      oprot.writeString(self.fileType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class proc_conf_param_t:
  """
  处理conf相关参数定义

  Attributes:
   - appkey
   - env
   - path
   - version
   - conf
   - cmd
   - err
   - key
   - configNodeList
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'appkey', None, None, ), # 1
    (2, TType.STRING, 'env', None, None, ), # 2
    (3, TType.STRING, 'path', None, None, ), # 3
    (4, TType.I64, 'version', None, None, ), # 4
    (5, TType.STRING, 'conf', None, None, ), # 5
    (6, TType.I32, 'cmd', None, None, ), # 6
    (7, TType.I32, 'err', None, None, ), # 7
    (8, TType.STRING, 'key', None, None, ), # 8
    (9, TType.LIST, 'configNodeList', (TType.STRUCT,(config_common.ttypes.ConfigNode, config_common.ttypes.ConfigNode.thrift_spec)), None, ), # 9
  )

  def __init__(self, appkey=None, env=None, path=None, version=None, conf=None, cmd=None, err=None, key=None, configNodeList=None,):
    self.appkey = appkey
    self.env = env
    self.path = path
    self.version = version
    self.conf = conf
    self.cmd = cmd
    self.err = err
    self.key = key
    self.configNodeList = configNodeList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.appkey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.env = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.path = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.version = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.conf = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.cmd = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.err = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.configNodeList = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = config_common.ttypes.ConfigNode()
            _elem26.read(iprot)
            self.configNodeList.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('proc_conf_param_t')
    if self.appkey is not None:
      oprot.writeFieldBegin('appkey', TType.STRING, 1)
      oprot.writeString(self.appkey)
      oprot.writeFieldEnd()
    if self.env is not None:
      oprot.writeFieldBegin('env', TType.STRING, 2)
      oprot.writeString(self.env)
      oprot.writeFieldEnd()
    if self.path is not None:
      oprot.writeFieldBegin('path', TType.STRING, 3)
      oprot.writeString(self.path)
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.I64, 4)
      oprot.writeI64(self.version)
      oprot.writeFieldEnd()
    if self.conf is not None:
      oprot.writeFieldBegin('conf', TType.STRING, 5)
      oprot.writeString(self.conf)
      oprot.writeFieldEnd()
    if self.cmd is not None:
      oprot.writeFieldBegin('cmd', TType.I32, 6)
      oprot.writeI32(self.cmd)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.I32, 7)
      oprot.writeI32(self.err)
      oprot.writeFieldEnd()
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 8)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.configNodeList is not None:
      oprot.writeFieldBegin('configNodeList', TType.LIST, 9)
      oprot.writeListBegin(TType.STRUCT, len(self.configNodeList))
      for iter27 in self.configNodeList:
        iter27.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.appkey is None:
      raise TProtocol.TProtocolException(message='Required field appkey is unset!')
    if self.env is None:
      raise TProtocol.TProtocolException(message='Required field env is unset!')
    if self.path is None:
      raise TProtocol.TProtocolException(message='Required field path is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ConfigUpdateRequest:
  """
  Attributes:
   - nodes
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'nodes', (TType.STRUCT,(config_common.ttypes.ConfigNode, config_common.ttypes.ConfigNode.thrift_spec)), None, ), # 1
  )

  def __init__(self, nodes=None,):
    self.nodes = nodes

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.nodes = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = config_common.ttypes.ConfigNode()
            _elem33.read(iprot)
            self.nodes.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ConfigUpdateRequest')
    if self.nodes is not None:
      oprot.writeFieldBegin('nodes', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.nodes))
      for iter34 in self.nodes:
        iter34.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.nodes is None:
      raise TProtocol.TProtocolException(message='Required field nodes is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ZabbixSelfCheck:
  """
  Attributes:
   - msgQueueBytes
   - agent_vmRss
   - worker_vmRss
   - agent_cpu
   - worker_cpu
   - zkConnections
   - mtConfigConnections
   - logCollectorConnections
   - bufferKeyNum
   - missBuffNum
   - extend
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'msgQueueBytes', (TType.I32,None,TType.I64,None), None, ), # 1
    (2, TType.I32, 'agent_vmRss', None, None, ), # 2
    (3, TType.I32, 'worker_vmRss', None, None, ), # 3
    (4, TType.DOUBLE, 'agent_cpu', None, None, ), # 4
    (5, TType.DOUBLE, 'worker_cpu', None, None, ), # 5
    (6, TType.I32, 'zkConnections', None, None, ), # 6
    (7, TType.I32, 'mtConfigConnections', None, None, ), # 7
    (8, TType.I32, 'logCollectorConnections', None, None, ), # 8
    (9, TType.I32, 'bufferKeyNum', None, None, ), # 9
    (10, TType.I32, 'missBuffNum', None, None, ), # 10
    (11, TType.STRING, 'extend', None, None, ), # 11
  )

  def __init__(self, msgQueueBytes=None, agent_vmRss=None, worker_vmRss=None, agent_cpu=None, worker_cpu=None, zkConnections=None, mtConfigConnections=None, logCollectorConnections=None, bufferKeyNum=None, missBuffNum=None, extend=None,):
    self.msgQueueBytes = msgQueueBytes
    self.agent_vmRss = agent_vmRss
    self.worker_vmRss = worker_vmRss
    self.agent_cpu = agent_cpu
    self.worker_cpu = worker_cpu
    self.zkConnections = zkConnections
    self.mtConfigConnections = mtConfigConnections
    self.logCollectorConnections = logCollectorConnections
    self.bufferKeyNum = bufferKeyNum
    self.missBuffNum = missBuffNum
    self.extend = extend

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.msgQueueBytes = {}
          (_ktype36, _vtype37, _size35 ) = iprot.readMapBegin() 
          for _i39 in xrange(_size35):
            _key40 = iprot.readI32();
            _val41 = iprot.readI64();
            self.msgQueueBytes[_key40] = _val41
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.agent_vmRss = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.worker_vmRss = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.agent_cpu = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.worker_cpu = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.zkConnections = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.mtConfigConnections = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.logCollectorConnections = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.bufferKeyNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.missBuffNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.extend = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ZabbixSelfCheck')
    if self.msgQueueBytes is not None:
      oprot.writeFieldBegin('msgQueueBytes', TType.MAP, 1)
      oprot.writeMapBegin(TType.I32, TType.I64, len(self.msgQueueBytes))
      for kiter42,viter43 in self.msgQueueBytes.items():
        oprot.writeI32(kiter42)
        oprot.writeI64(viter43)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.agent_vmRss is not None:
      oprot.writeFieldBegin('agent_vmRss', TType.I32, 2)
      oprot.writeI32(self.agent_vmRss)
      oprot.writeFieldEnd()
    if self.worker_vmRss is not None:
      oprot.writeFieldBegin('worker_vmRss', TType.I32, 3)
      oprot.writeI32(self.worker_vmRss)
      oprot.writeFieldEnd()
    if self.agent_cpu is not None:
      oprot.writeFieldBegin('agent_cpu', TType.DOUBLE, 4)
      oprot.writeDouble(self.agent_cpu)
      oprot.writeFieldEnd()
    if self.worker_cpu is not None:
      oprot.writeFieldBegin('worker_cpu', TType.DOUBLE, 5)
      oprot.writeDouble(self.worker_cpu)
      oprot.writeFieldEnd()
    if self.zkConnections is not None:
      oprot.writeFieldBegin('zkConnections', TType.I32, 6)
      oprot.writeI32(self.zkConnections)
      oprot.writeFieldEnd()
    if self.mtConfigConnections is not None:
      oprot.writeFieldBegin('mtConfigConnections', TType.I32, 7)
      oprot.writeI32(self.mtConfigConnections)
      oprot.writeFieldEnd()
    if self.logCollectorConnections is not None:
      oprot.writeFieldBegin('logCollectorConnections', TType.I32, 8)
      oprot.writeI32(self.logCollectorConnections)
      oprot.writeFieldEnd()
    if self.bufferKeyNum is not None:
      oprot.writeFieldBegin('bufferKeyNum', TType.I32, 9)
      oprot.writeI32(self.bufferKeyNum)
      oprot.writeFieldEnd()
    if self.missBuffNum is not None:
      oprot.writeFieldBegin('missBuffNum', TType.I32, 10)
      oprot.writeI32(self.missBuffNum)
      oprot.writeFieldEnd()
    if self.extend is not None:
      oprot.writeFieldBegin('extend', TType.STRING, 11)
      oprot.writeString(self.extend)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
