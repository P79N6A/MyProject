#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class SandboxConfig:
  """
  Attributes:
   - appkey
   - ips
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'appkey', None, None, ), # 1
    (2, TType.LIST, 'ips', (TType.STRING,None), None, ), # 2
  )

  def __init__(self, appkey=None, ips=None,):
    self.appkey = appkey
    self.ips = ips

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.appkey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.ips = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.ips.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SandboxConfig')
    if self.appkey is not None:
      oprot.writeFieldBegin('appkey', TType.STRING, 1)
      oprot.writeString(self.appkey)
      oprot.writeFieldEnd()
    if self.ips is not None:
      oprot.writeFieldBegin('ips', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.ips))
      for iter6 in self.ips:
        oprot.writeString(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Sandbox:
  """
  Attributes:
   - id
   - name
   - env
   - status
   - access
   - services
   - whiteList
   - createTime
   - updateTime
   - reserved
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.I32, 'env', None, None, ), # 3
    (4, TType.I32, 'status', None, None, ), # 4
    (5, TType.I32, 'access', None, None, ), # 5
    (6, TType.LIST, 'services', (TType.STRUCT,(SandboxConfig, SandboxConfig.thrift_spec)), None, ), # 6
    (7, TType.LIST, 'whiteList', (TType.STRUCT,(SandboxConfig, SandboxConfig.thrift_spec)), None, ), # 7
    (8, TType.I32, 'createTime', None, None, ), # 8
    (9, TType.I32, 'updateTime', None, None, ), # 9
    (10, TType.STRING, 'reserved', None, None, ), # 10
  )

  def __init__(self, id=None, name=None, env=None, status=None, access=None, services=None, whiteList=None, createTime=None, updateTime=None, reserved=None,):
    self.id = id
    self.name = name
    self.env = env
    self.status = status
    self.access = access
    self.services = services
    self.whiteList = whiteList
    self.createTime = createTime
    self.updateTime = updateTime
    self.reserved = reserved

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.env = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.access = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.services = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = SandboxConfig()
            _elem12.read(iprot)
            self.services.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.whiteList = []
          (_etype16, _size13) = iprot.readListBegin()
          for _i17 in xrange(_size13):
            _elem18 = SandboxConfig()
            _elem18.read(iprot)
            self.whiteList.append(_elem18)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.createTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.updateTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.reserved = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Sandbox')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.env is not None:
      oprot.writeFieldBegin('env', TType.I32, 3)
      oprot.writeI32(self.env)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 4)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.access is not None:
      oprot.writeFieldBegin('access', TType.I32, 5)
      oprot.writeI32(self.access)
      oprot.writeFieldEnd()
    if self.services is not None:
      oprot.writeFieldBegin('services', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.services))
      for iter19 in self.services:
        iter19.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.whiteList is not None:
      oprot.writeFieldBegin('whiteList', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.whiteList))
      for iter20 in self.whiteList:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.createTime is not None:
      oprot.writeFieldBegin('createTime', TType.I32, 8)
      oprot.writeI32(self.createTime)
      oprot.writeFieldEnd()
    if self.updateTime is not None:
      oprot.writeFieldBegin('updateTime', TType.I32, 9)
      oprot.writeI32(self.updateTime)
      oprot.writeFieldEnd()
    if self.reserved is not None:
      oprot.writeFieldBegin('reserved', TType.STRING, 10)
      oprot.writeString(self.reserved)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SandboxData:
  """
  Attributes:
   - sandbox
   - version
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'sandbox', (Sandbox, Sandbox.thrift_spec), None, ), # 1
    (2, TType.STRING, 'version', None, None, ), # 2
  )

  def __init__(self, sandbox=None, version=None,):
    self.sandbox = sandbox
    self.version = version

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.sandbox = Sandbox()
          self.sandbox.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.version = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SandboxData')
    if self.sandbox is not None:
      oprot.writeFieldBegin('sandbox', TType.STRUCT, 1)
      self.sandbox.write(oprot)
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.STRING, 2)
      oprot.writeString(self.version)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SandboxResponse:
  """
  Attributes:
   - code
   - sandboxList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'code', None, 200, ), # 1
    (2, TType.LIST, 'sandboxList', (TType.STRUCT,(SandboxData, SandboxData.thrift_spec)), None, ), # 2
  )

  def __init__(self, code=thrift_spec[1][4], sandboxList=None,):
    self.code = code
    self.sandboxList = sandboxList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.code = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.sandboxList = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = SandboxData()
            _elem26.read(iprot)
            self.sandboxList.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SandboxResponse')
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.I32, 1)
      oprot.writeI32(self.code)
      oprot.writeFieldEnd()
    if self.sandboxList is not None:
      oprot.writeFieldBegin('sandboxList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.sandboxList))
      for iter27 in self.sandboxList:
        iter27.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.code is None:
      raise TProtocol.TProtocolException(message='Required field code is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
