/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sankuai.octo.test.thrift.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;

import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

public class SGLog implements org.apache.thrift.TBase<SGLog, SGLog._Fields>, java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SGLog");

    private static final org.apache.thrift.protocol.TField APPKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appkey", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I64, (short) 2);
    private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("level", org.apache.thrift.protocol.TType.I32, (short) 3);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short) 4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new SGLogStandardSchemeFactory());
        schemes.put(TupleScheme.class, new SGLogTupleSchemeFactory());
    }

    public String appkey; // required
    public long time; // required
    public int level; // required
    public String content; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        APPKEY((short) 1, "appkey"),
        TIME((short) 2, "time"),
        LEVEL((short) 3, "level"),
        CONTENT((short) 4, "content");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // APPKEY
                    return APPKEY;
                case 2: // TIME
                    return TIME;
                case 3: // LEVEL
                    return LEVEL;
                case 4: // CONTENT
                    return CONTENT;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __TIME_ISSET_ID = 0;
    private static final int __LEVEL_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.APPKEY, new org.apache.thrift.meta_data.FieldMetaData("appkey", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SGLog.class, metaDataMap);
    }

    public SGLog() {
    }

    public SGLog(
            String appkey,
            long time,
            int level,
            String content) {
        this();
        this.appkey = appkey;
        this.time = time;
        setTimeIsSet(true);
        this.level = level;
        setLevelIsSet(true);
        this.content = content;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SGLog(SGLog other) {
        __isset_bit_vector.clear();
        __isset_bit_vector.or(other.__isset_bit_vector);
        if (other.isSetAppkey()) {
            this.appkey = other.appkey;
        }
        this.time = other.time;
        this.level = other.level;
        if (other.isSetContent()) {
            this.content = other.content;
        }
    }

    public SGLog deepCopy() {
        return new SGLog(this);
    }

    @Override
    public void clear() {
        this.appkey = null;
        setTimeIsSet(false);
        this.time = 0;
        setLevelIsSet(false);
        this.level = 0;
        this.content = null;
    }

    public String getAppkey() {
        return this.appkey;
    }

    public SGLog setAppkey(String appkey) {
        this.appkey = appkey;
        return this;
    }

    public void unsetAppkey() {
        this.appkey = null;
    }

    /**
     * Returns true if field appkey is set (has been assigned a value) and false otherwise
     */
    public boolean isSetAppkey() {
        return this.appkey != null;
    }

    public void setAppkeyIsSet(boolean value) {
        if (!value) {
            this.appkey = null;
        }
    }

    public long getTime() {
        return this.time;
    }

    public SGLog setTime(long time) {
        this.time = time;
        setTimeIsSet(true);
        return this;
    }

    public void unsetTime() {
        __isset_bit_vector.clear(__TIME_ISSET_ID);
    }

    /**
     * Returns true if field time is set (has been assigned a value) and false otherwise
     */
    public boolean isSetTime() {
        return __isset_bit_vector.get(__TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
        __isset_bit_vector.set(__TIME_ISSET_ID, value);
    }

    public int getLevel() {
        return this.level;
    }

    public SGLog setLevel(int level) {
        this.level = level;
        setLevelIsSet(true);
        return this;
    }

    public void unsetLevel() {
        __isset_bit_vector.clear(__LEVEL_ISSET_ID);
    }

    /**
     * Returns true if field level is set (has been assigned a value) and false otherwise
     */
    public boolean isSetLevel() {
        return __isset_bit_vector.get(__LEVEL_ISSET_ID);
    }

    public void setLevelIsSet(boolean value) {
        __isset_bit_vector.set(__LEVEL_ISSET_ID, value);
    }

    public String getContent() {
        return this.content;
    }

    public SGLog setContent(String content) {
        this.content = content;
        return this;
    }

    public void unsetContent() {
        this.content = null;
    }

    /**
     * Returns true if field content is set (has been assigned a value) and false otherwise
     */
    public boolean isSetContent() {
        return this.content != null;
    }

    public void setContentIsSet(boolean value) {
        if (!value) {
            this.content = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case APPKEY:
                if (value == null) {
                    unsetAppkey();
                } else {
                    setAppkey((String) value);
                }
                break;

            case TIME:
                if (value == null) {
                    unsetTime();
                } else {
                    setTime((Long) value);
                }
                break;

            case LEVEL:
                if (value == null) {
                    unsetLevel();
                } else {
                    setLevel((Integer) value);
                }
                break;

            case CONTENT:
                if (value == null) {
                    unsetContent();
                } else {
                    setContent((String) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case APPKEY:
                return getAppkey();

            case TIME:
                return Long.valueOf(getTime());

            case LEVEL:
                return Integer.valueOf(getLevel());

            case CONTENT:
                return getContent();

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case APPKEY:
                return isSetAppkey();
            case TIME:
                return isSetTime();
            case LEVEL:
                return isSetLevel();
            case CONTENT:
                return isSetContent();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof SGLog)
            return this.equals((SGLog) that);
        return false;
    }

    public boolean equals(SGLog that) {
        if (that == null)
            return false;

        boolean this_present_appkey = true && this.isSetAppkey();
        boolean that_present_appkey = true && that.isSetAppkey();
        if (this_present_appkey || that_present_appkey) {
            if (!(this_present_appkey && that_present_appkey))
                return false;
            if (!this.appkey.equals(that.appkey))
                return false;
        }

        boolean this_present_time = true;
        boolean that_present_time = true;
        if (this_present_time || that_present_time) {
            if (!(this_present_time && that_present_time))
                return false;
            if (this.time != that.time)
                return false;
        }

        boolean this_present_level = true;
        boolean that_present_level = true;
        if (this_present_level || that_present_level) {
            if (!(this_present_level && that_present_level))
                return false;
            if (this.level != that.level)
                return false;
        }

        boolean this_present_content = true && this.isSetContent();
        boolean that_present_content = true && that.isSetContent();
        if (this_present_content || that_present_content) {
            if (!(this_present_content && that_present_content))
                return false;
            if (!this.content.equals(that.content))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    public int compareTo(SGLog other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        SGLog typedOther = (SGLog) other;

        lastComparison = Boolean.valueOf(isSetAppkey()).compareTo(typedOther.isSetAppkey());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetAppkey()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appkey, typedOther.appkey);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTime()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetLevel()).compareTo(typedOther.isSetLevel());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetLevel()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, typedOther.level);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetContent()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("SGLog(");
        boolean first = true;

        sb.append("appkey:");
        if (this.appkey == null) {
            sb.append("null");
        } else {
            sb.append(this.appkey);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("time:");
        sb.append(this.time);
        first = false;
        if (!first) sb.append(", ");
        sb.append("level:");
        sb.append(this.level);
        first = false;
        if (!first) sb.append(", ");
        sb.append("content:");
        if (this.content == null) {
            sb.append("null");
        } else {
            sb.append(this.content);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bit_vector = new BitSet(1);
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class SGLogStandardSchemeFactory implements SchemeFactory {
        public SGLogStandardScheme getScheme() {
            return new SGLogStandardScheme();
        }
    }

    private static class SGLogStandardScheme extends StandardScheme<SGLog> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, SGLog struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // APPKEY
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.appkey = iprot.readString();
                            struct.setAppkeyIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // TIME
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.time = iprot.readI64();
                            struct.setTimeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // LEVEL
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.level = iprot.readI32();
                            struct.setLevelIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // CONTENT
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.content = iprot.readString();
                            struct.setContentIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, SGLog struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.appkey != null) {
                oprot.writeFieldBegin(APPKEY_FIELD_DESC);
                oprot.writeString(struct.appkey);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(TIME_FIELD_DESC);
            oprot.writeI64(struct.time);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(LEVEL_FIELD_DESC);
            oprot.writeI32(struct.level);
            oprot.writeFieldEnd();
            if (struct.content != null) {
                oprot.writeFieldBegin(CONTENT_FIELD_DESC);
                oprot.writeString(struct.content);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class SGLogTupleSchemeFactory implements SchemeFactory {
        public SGLogTupleScheme getScheme() {
            return new SGLogTupleScheme();
        }
    }

    private static class SGLogTupleScheme extends TupleScheme<SGLog> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, SGLog struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetAppkey()) {
                optionals.set(0);
            }
            if (struct.isSetTime()) {
                optionals.set(1);
            }
            if (struct.isSetLevel()) {
                optionals.set(2);
            }
            if (struct.isSetContent()) {
                optionals.set(3);
            }
            oprot.writeBitSet(optionals, 4);
            if (struct.isSetAppkey()) {
                oprot.writeString(struct.appkey);
            }
            if (struct.isSetTime()) {
                oprot.writeI64(struct.time);
            }
            if (struct.isSetLevel()) {
                oprot.writeI32(struct.level);
            }
            if (struct.isSetContent()) {
                oprot.writeString(struct.content);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, SGLog struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(4);
            if (incoming.get(0)) {
                struct.appkey = iprot.readString();
                struct.setAppkeyIsSet(true);
            }
            if (incoming.get(1)) {
                struct.time = iprot.readI64();
                struct.setTimeIsSet(true);
            }
            if (incoming.get(2)) {
                struct.level = iprot.readI32();
                struct.setLevelIsSet(true);
            }
            if (incoming.get(3)) {
                struct.content = iprot.readString();
                struct.setContentIsSet(true);
            }
        }
    }

}
