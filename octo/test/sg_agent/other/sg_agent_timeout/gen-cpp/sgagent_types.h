/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef sgagent_TYPES_H
#define sgagent_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>





struct fb_status {
  enum type {
    DEAD = 0,
    STARTING = 1,
    ALIVE = 2,
    STOPPING = 3,
    STOPPED = 4,
    WARNING = 5
  };
};

extern const std::map<int, const char*> _fb_status_VALUES_TO_NAMES;

typedef struct _SGService__isset {
  _SGService__isset() : appkey(false), version(false), ip(false), port(false), weight(false), status(false), role(false), envir(false), lastUpdateTime(false), extend(false) {}
  bool appkey;
  bool version;
  bool ip;
  bool port;
  bool weight;
  bool status;
  bool role;
  bool envir;
  bool lastUpdateTime;
  bool extend;
} _SGService__isset;

class SGService {
 public:

  static const char* ascii_fingerprint; // = "8C1807EE41919DCB294745B3E835B96A";
  static const uint8_t binary_fingerprint[16]; // = {0x8C,0x18,0x07,0xEE,0x41,0x91,0x9D,0xCB,0x29,0x47,0x45,0xB3,0xE8,0x35,0xB9,0x6A};

  SGService() : appkey(""), version(""), ip(""), port(0), weight(0), status(0), role(0), envir(0), lastUpdateTime(0), extend("") {
  }

  virtual ~SGService() throw() {}

  std::string appkey;
  std::string version;
  std::string ip;
  int32_t port;
  int32_t weight;
  int32_t status;
  int32_t role;
  int32_t envir;
  int32_t lastUpdateTime;
  std::string extend;

  _SGService__isset __isset;

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_version(const std::string& val) {
    version = val;
  }

  void __set_ip(const std::string& val) {
    ip = val;
  }

  void __set_port(const int32_t val) {
    port = val;
  }

  void __set_weight(const int32_t val) {
    weight = val;
  }

  void __set_status(const int32_t val) {
    status = val;
  }

  void __set_role(const int32_t val) {
    role = val;
  }

  void __set_envir(const int32_t val) {
    envir = val;
  }

  void __set_lastUpdateTime(const int32_t val) {
    lastUpdateTime = val;
  }

  void __set_extend(const std::string& val) {
    extend = val;
  }

  bool operator == (const SGService & rhs) const
  {
    if (!(appkey == rhs.appkey))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(ip == rhs.ip))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(weight == rhs.weight))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(role == rhs.role))
      return false;
    if (!(envir == rhs.envir))
      return false;
    if (!(lastUpdateTime == rhs.lastUpdateTime))
      return false;
    if (!(extend == rhs.extend))
      return false;
    return true;
  }
  bool operator != (const SGService &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGService & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGLog__isset {
  _SGLog__isset() : appkey(false), time(false), level(false), content(false) {}
  bool appkey;
  bool time;
  bool level;
  bool content;
} _SGLog__isset;

class SGLog {
 public:

  static const char* ascii_fingerprint; // = "4BB100F683C996B9C99F9E4B75E3065A";
  static const uint8_t binary_fingerprint[16]; // = {0x4B,0xB1,0x00,0xF6,0x83,0xC9,0x96,0xB9,0xC9,0x9F,0x9E,0x4B,0x75,0xE3,0x06,0x5A};

  SGLog() : appkey(""), time(0), level(0), content("") {
  }

  virtual ~SGLog() throw() {}

  std::string appkey;
  int64_t time;
  int32_t level;
  std::string content;

  _SGLog__isset __isset;

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_time(const int64_t val) {
    time = val;
  }

  void __set_level(const int32_t val) {
    level = val;
  }

  void __set_content(const std::string& val) {
    content = val;
  }

  bool operator == (const SGLog & rhs) const
  {
    if (!(appkey == rhs.appkey))
      return false;
    if (!(time == rhs.time))
      return false;
    if (!(level == rhs.level))
      return false;
    if (!(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const SGLog &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGLog & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGModuleInvokeInfo__isset {
  _SGModuleInvokeInfo__isset() : traceId(false), spanId(false), spanName(false), localAppKey(false), localHost(false), localPort(false), remoteAppKey(false), remoteHost(false), remotePort(false), start(false), cost(false), type(false), status(false), count(false), debug(false), extend(false) {}
  bool traceId;
  bool spanId;
  bool spanName;
  bool localAppKey;
  bool localHost;
  bool localPort;
  bool remoteAppKey;
  bool remoteHost;
  bool remotePort;
  bool start;
  bool cost;
  bool type;
  bool status;
  bool count;
  bool debug;
  bool extend;
} _SGModuleInvokeInfo__isset;

class SGModuleInvokeInfo {
 public:

  static const char* ascii_fingerprint; // = "E873F482F9C9473903C455089A45ECBB";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x73,0xF4,0x82,0xF9,0xC9,0x47,0x39,0x03,0xC4,0x55,0x08,0x9A,0x45,0xEC,0xBB};

  SGModuleInvokeInfo() : traceId(""), spanId(""), spanName(""), localAppKey(""), localHost(""), localPort(0), remoteAppKey(""), remoteHost(""), remotePort(0), start(0), cost(0), type(0), status(0), count(0), debug(0), extend("") {
  }

  virtual ~SGModuleInvokeInfo() throw() {}

  std::string traceId;
  std::string spanId;
  std::string spanName;
  std::string localAppKey;
  std::string localHost;
  int32_t localPort;
  std::string remoteAppKey;
  std::string remoteHost;
  int32_t remotePort;
  int64_t start;
  int32_t cost;
  int32_t type;
  int32_t status;
  int32_t count;
  int32_t debug;
  std::string extend;

  _SGModuleInvokeInfo__isset __isset;

  void __set_traceId(const std::string& val) {
    traceId = val;
  }

  void __set_spanId(const std::string& val) {
    spanId = val;
  }

  void __set_spanName(const std::string& val) {
    spanName = val;
  }

  void __set_localAppKey(const std::string& val) {
    localAppKey = val;
  }

  void __set_localHost(const std::string& val) {
    localHost = val;
  }

  void __set_localPort(const int32_t val) {
    localPort = val;
  }

  void __set_remoteAppKey(const std::string& val) {
    remoteAppKey = val;
  }

  void __set_remoteHost(const std::string& val) {
    remoteHost = val;
  }

  void __set_remotePort(const int32_t val) {
    remotePort = val;
  }

  void __set_start(const int64_t val) {
    start = val;
  }

  void __set_cost(const int32_t val) {
    cost = val;
  }

  void __set_type(const int32_t val) {
    type = val;
  }

  void __set_status(const int32_t val) {
    status = val;
  }

  void __set_count(const int32_t val) {
    count = val;
  }

  void __set_debug(const int32_t val) {
    debug = val;
  }

  void __set_extend(const std::string& val) {
    extend = val;
  }

  bool operator == (const SGModuleInvokeInfo & rhs) const
  {
    if (!(traceId == rhs.traceId))
      return false;
    if (!(spanId == rhs.spanId))
      return false;
    if (!(spanName == rhs.spanName))
      return false;
    if (!(localAppKey == rhs.localAppKey))
      return false;
    if (!(localHost == rhs.localHost))
      return false;
    if (!(localPort == rhs.localPort))
      return false;
    if (!(remoteAppKey == rhs.remoteAppKey))
      return false;
    if (!(remoteHost == rhs.remoteHost))
      return false;
    if (!(remotePort == rhs.remotePort))
      return false;
    if (!(start == rhs.start))
      return false;
    if (!(cost == rhs.cost))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(count == rhs.count))
      return false;
    if (!(debug == rhs.debug))
      return false;
    if (!(extend == rhs.extend))
      return false;
    return true;
  }
  bool operator != (const SGModuleInvokeInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGModuleInvokeInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Consumer__isset {
  _Consumer__isset() : ips(false), appkeys(false) {}
  bool ips;
  bool appkeys;
} _Consumer__isset;

class Consumer {
 public:

  static const char* ascii_fingerprint; // = "AA819045335EAFAB5C2FE456B4B9CC1C";
  static const uint8_t binary_fingerprint[16]; // = {0xAA,0x81,0x90,0x45,0x33,0x5E,0xAF,0xAB,0x5C,0x2F,0xE4,0x56,0xB4,0xB9,0xCC,0x1C};

  Consumer() {
  }

  virtual ~Consumer() throw() {}

  std::vector<std::string>  ips;
  std::vector<std::string>  appkeys;

  _Consumer__isset __isset;

  void __set_ips(const std::vector<std::string> & val) {
    ips = val;
  }

  void __set_appkeys(const std::vector<std::string> & val) {
    appkeys = val;
  }

  bool operator == (const Consumer & rhs) const
  {
    if (!(ips == rhs.ips))
      return false;
    if (!(appkeys == rhs.appkeys))
      return false;
    return true;
  }
  bool operator != (const Consumer &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Consumer & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CRouteData__isset {
  _CRouteData__isset() : id(false), name(false), appkey(false), env(false), category(false), priority(false), status(false), consumer(false), provider(false), updateTime(false), createTime(false), reserved(false) {}
  bool id;
  bool name;
  bool appkey;
  bool env;
  bool category;
  bool priority;
  bool status;
  bool consumer;
  bool provider;
  bool updateTime;
  bool createTime;
  bool reserved;
} _CRouteData__isset;

class CRouteData {
 public:

  static const char* ascii_fingerprint; // = "BA097AEDC13A13D0EF25D33F4578FC59";
  static const uint8_t binary_fingerprint[16]; // = {0xBA,0x09,0x7A,0xED,0xC1,0x3A,0x13,0xD0,0xEF,0x25,0xD3,0x3F,0x45,0x78,0xFC,0x59};

  CRouteData() : id(""), name(""), appkey(""), env(0), category(0), priority(0), status(0), updateTime(0), createTime(0), reserved("") {
  }

  virtual ~CRouteData() throw() {}

  std::string id;
  std::string name;
  std::string appkey;
  int32_t env;
  int32_t category;
  int32_t priority;
  int32_t status;
  Consumer consumer;
  std::vector<std::string>  provider;
  int32_t updateTime;
  int32_t createTime;
  std::string reserved;

  _CRouteData__isset __isset;

  void __set_id(const std::string& val) {
    id = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_env(const int32_t val) {
    env = val;
  }

  void __set_category(const int32_t val) {
    category = val;
  }

  void __set_priority(const int32_t val) {
    priority = val;
  }

  void __set_status(const int32_t val) {
    status = val;
  }

  void __set_consumer(const Consumer& val) {
    consumer = val;
  }

  void __set_provider(const std::vector<std::string> & val) {
    provider = val;
  }

  void __set_updateTime(const int32_t val) {
    updateTime = val;
  }

  void __set_createTime(const int32_t val) {
    createTime = val;
  }

  void __set_reserved(const std::string& val) {
    reserved = val;
  }

  bool operator == (const CRouteData & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(appkey == rhs.appkey))
      return false;
    if (!(env == rhs.env))
      return false;
    if (!(category == rhs.category))
      return false;
    if (!(priority == rhs.priority))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(consumer == rhs.consumer))
      return false;
    if (!(provider == rhs.provider))
      return false;
    if (!(updateTime == rhs.updateTime))
      return false;
    if (!(createTime == rhs.createTime))
      return false;
    if (!(reserved == rhs.reserved))
      return false;
    return true;
  }
  bool operator != (const CRouteData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CRouteData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
