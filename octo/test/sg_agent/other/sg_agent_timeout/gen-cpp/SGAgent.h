/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SGAgent_H
#define SGAgent_H

#include <TProcessor.h>
#include "sgagent_types.h"



class SGAgentIf {
 public:
  virtual ~SGAgentIf() {}
  virtual void getServiceList(std::vector<SGService> & _return, const std::string& localAppkey, const std::string& remoteAppkey) = 0;
  virtual void getService(SGService& _return, const std::string& localAppkey, const std::string& remoteAppkey, const int32_t strategy) = 0;
  virtual int32_t registService(const SGService& oService) = 0;
  virtual void callBackMCC(std::string& _return, const int32_t cmdType, const std::string& sData) = 0;
  virtual void getLocalConfig(std::string& _return, const std::string& localAppkey, const std::string& ip) = 0;
  virtual int32_t uploadLog(const SGLog& oLog) = 0;
  virtual int32_t uploadModuleInvoke(const SGModuleInvokeInfo& oInfo) = 0;
  virtual void getName(std::string& _return) = 0;
  virtual void getVersion(std::string& _return) = 0;
  virtual fb_status::type getStatus() = 0;
  virtual void getStatusDetails(std::string& _return) = 0;
  virtual void getCounters(std::map<std::string, int64_t> & _return) = 0;
  virtual int64_t getCounter(const std::string& key) = 0;
  virtual void setOption(const std::string& key, const std::string& value) = 0;
  virtual void getOption(std::string& _return, const std::string& key) = 0;
  virtual void getOptions(std::map<std::string, std::string> & _return) = 0;
  virtual void getCpuProfile(std::string& _return, const int32_t profileDurationInSec) = 0;
  virtual int64_t aliveSince() = 0;
  virtual void reinitialize() = 0;
  virtual void shutdown() = 0;
};

class SGAgentIfFactory {
 public:
  typedef SGAgentIf Handler;

  virtual ~SGAgentIfFactory() {}

  virtual SGAgentIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SGAgentIf* /* handler */) = 0;
};

class SGAgentIfSingletonFactory : virtual public SGAgentIfFactory {
 public:
  SGAgentIfSingletonFactory(const boost::shared_ptr<SGAgentIf>& iface) : iface_(iface) {}
  virtual ~SGAgentIfSingletonFactory() {}

  virtual SGAgentIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SGAgentIf* /* handler */) {}

 protected:
  boost::shared_ptr<SGAgentIf> iface_;
};

class SGAgentNull : virtual public SGAgentIf {
 public:
  virtual ~SGAgentNull() {}
  void getServiceList(std::vector<SGService> & /* _return */, const std::string& /* localAppkey */, const std::string& /* remoteAppkey */) {
    return;
  }
  void getService(SGService& /* _return */, const std::string& /* localAppkey */, const std::string& /* remoteAppkey */, const int32_t /* strategy */) {
    return;
  }
  int32_t registService(const SGService& /* oService */) {
    int32_t _return = 0;
    return _return;
  }
  void callBackMCC(std::string& /* _return */, const int32_t /* cmdType */, const std::string& /* sData */) {
    return;
  }
  void getLocalConfig(std::string& /* _return */, const std::string& /* localAppkey */, const std::string& /* ip */) {
    return;
  }
  int32_t uploadLog(const SGLog& /* oLog */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t uploadModuleInvoke(const SGModuleInvokeInfo& /* oInfo */) {
    int32_t _return = 0;
    return _return;
  }
  void getName(std::string& /* _return */) {
    return;
  }
  void getVersion(std::string& /* _return */) {
    return;
  }
  fb_status::type getStatus() {
    fb_status::type _return = (fb_status::type)0;
    return _return;
  }
  void getStatusDetails(std::string& /* _return */) {
    return;
  }
  void getCounters(std::map<std::string, int64_t> & /* _return */) {
    return;
  }
  int64_t getCounter(const std::string& /* key */) {
    int64_t _return = 0;
    return _return;
  }
  void setOption(const std::string& /* key */, const std::string& /* value */) {
    return;
  }
  void getOption(std::string& /* _return */, const std::string& /* key */) {
    return;
  }
  void getOptions(std::map<std::string, std::string> & /* _return */) {
    return;
  }
  void getCpuProfile(std::string& /* _return */, const int32_t /* profileDurationInSec */) {
    return;
  }
  int64_t aliveSince() {
    int64_t _return = 0;
    return _return;
  }
  void reinitialize() {
    return;
  }
  void shutdown() {
    return;
  }
};

typedef struct _SGAgent_getServiceList_args__isset {
  _SGAgent_getServiceList_args__isset() : localAppkey(false), remoteAppkey(false) {}
  bool localAppkey;
  bool remoteAppkey;
} _SGAgent_getServiceList_args__isset;

class SGAgent_getServiceList_args {
 public:

  SGAgent_getServiceList_args() : localAppkey(""), remoteAppkey("") {
  }

  virtual ~SGAgent_getServiceList_args() throw() {}

  std::string localAppkey;
  std::string remoteAppkey;

  _SGAgent_getServiceList_args__isset __isset;

  void __set_localAppkey(const std::string& val) {
    localAppkey = val;
  }

  void __set_remoteAppkey(const std::string& val) {
    remoteAppkey = val;
  }

  bool operator == (const SGAgent_getServiceList_args & rhs) const
  {
    if (!(localAppkey == rhs.localAppkey))
      return false;
    if (!(remoteAppkey == rhs.remoteAppkey))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getServiceList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getServiceList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_getServiceList_pargs {
 public:


  virtual ~SGAgent_getServiceList_pargs() throw() {}

  const std::string* localAppkey;
  const std::string* remoteAppkey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getServiceList_result__isset {
  _SGAgent_getServiceList_result__isset() : success(false) {}
  bool success;
} _SGAgent_getServiceList_result__isset;

class SGAgent_getServiceList_result {
 public:

  SGAgent_getServiceList_result() {
  }

  virtual ~SGAgent_getServiceList_result() throw() {}

  std::vector<SGService>  success;

  _SGAgent_getServiceList_result__isset __isset;

  void __set_success(const std::vector<SGService> & val) {
    success = val;
  }

  bool operator == (const SGAgent_getServiceList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getServiceList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getServiceList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getServiceList_presult__isset {
  _SGAgent_getServiceList_presult__isset() : success(false) {}
  bool success;
} _SGAgent_getServiceList_presult__isset;

class SGAgent_getServiceList_presult {
 public:


  virtual ~SGAgent_getServiceList_presult() throw() {}

  std::vector<SGService> * success;

  _SGAgent_getServiceList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgent_getService_args__isset {
  _SGAgent_getService_args__isset() : localAppkey(false), remoteAppkey(false), strategy(false) {}
  bool localAppkey;
  bool remoteAppkey;
  bool strategy;
} _SGAgent_getService_args__isset;

class SGAgent_getService_args {
 public:

  SGAgent_getService_args() : localAppkey(""), remoteAppkey(""), strategy(0) {
  }

  virtual ~SGAgent_getService_args() throw() {}

  std::string localAppkey;
  std::string remoteAppkey;
  int32_t strategy;

  _SGAgent_getService_args__isset __isset;

  void __set_localAppkey(const std::string& val) {
    localAppkey = val;
  }

  void __set_remoteAppkey(const std::string& val) {
    remoteAppkey = val;
  }

  void __set_strategy(const int32_t val) {
    strategy = val;
  }

  bool operator == (const SGAgent_getService_args & rhs) const
  {
    if (!(localAppkey == rhs.localAppkey))
      return false;
    if (!(remoteAppkey == rhs.remoteAppkey))
      return false;
    if (!(strategy == rhs.strategy))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getService_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getService_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_getService_pargs {
 public:


  virtual ~SGAgent_getService_pargs() throw() {}

  const std::string* localAppkey;
  const std::string* remoteAppkey;
  const int32_t* strategy;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getService_result__isset {
  _SGAgent_getService_result__isset() : success(false) {}
  bool success;
} _SGAgent_getService_result__isset;

class SGAgent_getService_result {
 public:

  SGAgent_getService_result() {
  }

  virtual ~SGAgent_getService_result() throw() {}

  SGService success;

  _SGAgent_getService_result__isset __isset;

  void __set_success(const SGService& val) {
    success = val;
  }

  bool operator == (const SGAgent_getService_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getService_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getService_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getService_presult__isset {
  _SGAgent_getService_presult__isset() : success(false) {}
  bool success;
} _SGAgent_getService_presult__isset;

class SGAgent_getService_presult {
 public:


  virtual ~SGAgent_getService_presult() throw() {}

  SGService* success;

  _SGAgent_getService_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgent_registService_args__isset {
  _SGAgent_registService_args__isset() : oService(false) {}
  bool oService;
} _SGAgent_registService_args__isset;

class SGAgent_registService_args {
 public:

  SGAgent_registService_args() {
  }

  virtual ~SGAgent_registService_args() throw() {}

  SGService oService;

  _SGAgent_registService_args__isset __isset;

  void __set_oService(const SGService& val) {
    oService = val;
  }

  bool operator == (const SGAgent_registService_args & rhs) const
  {
    if (!(oService == rhs.oService))
      return false;
    return true;
  }
  bool operator != (const SGAgent_registService_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_registService_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_registService_pargs {
 public:


  virtual ~SGAgent_registService_pargs() throw() {}

  const SGService* oService;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_registService_result__isset {
  _SGAgent_registService_result__isset() : success(false) {}
  bool success;
} _SGAgent_registService_result__isset;

class SGAgent_registService_result {
 public:

  SGAgent_registService_result() : success(0) {
  }

  virtual ~SGAgent_registService_result() throw() {}

  int32_t success;

  _SGAgent_registService_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SGAgent_registService_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_registService_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_registService_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_registService_presult__isset {
  _SGAgent_registService_presult__isset() : success(false) {}
  bool success;
} _SGAgent_registService_presult__isset;

class SGAgent_registService_presult {
 public:


  virtual ~SGAgent_registService_presult() throw() {}

  int32_t* success;

  _SGAgent_registService_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgent_callBackMCC_args__isset {
  _SGAgent_callBackMCC_args__isset() : cmdType(false), sData(false) {}
  bool cmdType;
  bool sData;
} _SGAgent_callBackMCC_args__isset;

class SGAgent_callBackMCC_args {
 public:

  SGAgent_callBackMCC_args() : cmdType(0), sData("") {
  }

  virtual ~SGAgent_callBackMCC_args() throw() {}

  int32_t cmdType;
  std::string sData;

  _SGAgent_callBackMCC_args__isset __isset;

  void __set_cmdType(const int32_t val) {
    cmdType = val;
  }

  void __set_sData(const std::string& val) {
    sData = val;
  }

  bool operator == (const SGAgent_callBackMCC_args & rhs) const
  {
    if (!(cmdType == rhs.cmdType))
      return false;
    if (!(sData == rhs.sData))
      return false;
    return true;
  }
  bool operator != (const SGAgent_callBackMCC_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_callBackMCC_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_callBackMCC_pargs {
 public:


  virtual ~SGAgent_callBackMCC_pargs() throw() {}

  const int32_t* cmdType;
  const std::string* sData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_callBackMCC_result__isset {
  _SGAgent_callBackMCC_result__isset() : success(false) {}
  bool success;
} _SGAgent_callBackMCC_result__isset;

class SGAgent_callBackMCC_result {
 public:

  SGAgent_callBackMCC_result() : success("") {
  }

  virtual ~SGAgent_callBackMCC_result() throw() {}

  std::string success;

  _SGAgent_callBackMCC_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const SGAgent_callBackMCC_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_callBackMCC_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_callBackMCC_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_callBackMCC_presult__isset {
  _SGAgent_callBackMCC_presult__isset() : success(false) {}
  bool success;
} _SGAgent_callBackMCC_presult__isset;

class SGAgent_callBackMCC_presult {
 public:


  virtual ~SGAgent_callBackMCC_presult() throw() {}

  std::string* success;

  _SGAgent_callBackMCC_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgent_getLocalConfig_args__isset {
  _SGAgent_getLocalConfig_args__isset() : localAppkey(false), ip(false) {}
  bool localAppkey;
  bool ip;
} _SGAgent_getLocalConfig_args__isset;

class SGAgent_getLocalConfig_args {
 public:

  SGAgent_getLocalConfig_args() : localAppkey(""), ip("") {
  }

  virtual ~SGAgent_getLocalConfig_args() throw() {}

  std::string localAppkey;
  std::string ip;

  _SGAgent_getLocalConfig_args__isset __isset;

  void __set_localAppkey(const std::string& val) {
    localAppkey = val;
  }

  void __set_ip(const std::string& val) {
    ip = val;
  }

  bool operator == (const SGAgent_getLocalConfig_args & rhs) const
  {
    if (!(localAppkey == rhs.localAppkey))
      return false;
    if (!(ip == rhs.ip))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getLocalConfig_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getLocalConfig_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_getLocalConfig_pargs {
 public:


  virtual ~SGAgent_getLocalConfig_pargs() throw() {}

  const std::string* localAppkey;
  const std::string* ip;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getLocalConfig_result__isset {
  _SGAgent_getLocalConfig_result__isset() : success(false) {}
  bool success;
} _SGAgent_getLocalConfig_result__isset;

class SGAgent_getLocalConfig_result {
 public:

  SGAgent_getLocalConfig_result() : success("") {
  }

  virtual ~SGAgent_getLocalConfig_result() throw() {}

  std::string success;

  _SGAgent_getLocalConfig_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const SGAgent_getLocalConfig_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getLocalConfig_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getLocalConfig_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getLocalConfig_presult__isset {
  _SGAgent_getLocalConfig_presult__isset() : success(false) {}
  bool success;
} _SGAgent_getLocalConfig_presult__isset;

class SGAgent_getLocalConfig_presult {
 public:


  virtual ~SGAgent_getLocalConfig_presult() throw() {}

  std::string* success;

  _SGAgent_getLocalConfig_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgent_uploadLog_args__isset {
  _SGAgent_uploadLog_args__isset() : oLog(false) {}
  bool oLog;
} _SGAgent_uploadLog_args__isset;

class SGAgent_uploadLog_args {
 public:

  SGAgent_uploadLog_args() {
  }

  virtual ~SGAgent_uploadLog_args() throw() {}

  SGLog oLog;

  _SGAgent_uploadLog_args__isset __isset;

  void __set_oLog(const SGLog& val) {
    oLog = val;
  }

  bool operator == (const SGAgent_uploadLog_args & rhs) const
  {
    if (!(oLog == rhs.oLog))
      return false;
    return true;
  }
  bool operator != (const SGAgent_uploadLog_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_uploadLog_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_uploadLog_pargs {
 public:


  virtual ~SGAgent_uploadLog_pargs() throw() {}

  const SGLog* oLog;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_uploadLog_result__isset {
  _SGAgent_uploadLog_result__isset() : success(false) {}
  bool success;
} _SGAgent_uploadLog_result__isset;

class SGAgent_uploadLog_result {
 public:

  SGAgent_uploadLog_result() : success(0) {
  }

  virtual ~SGAgent_uploadLog_result() throw() {}

  int32_t success;

  _SGAgent_uploadLog_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SGAgent_uploadLog_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_uploadLog_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_uploadLog_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_uploadLog_presult__isset {
  _SGAgent_uploadLog_presult__isset() : success(false) {}
  bool success;
} _SGAgent_uploadLog_presult__isset;

class SGAgent_uploadLog_presult {
 public:


  virtual ~SGAgent_uploadLog_presult() throw() {}

  int32_t* success;

  _SGAgent_uploadLog_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgent_uploadModuleInvoke_args__isset {
  _SGAgent_uploadModuleInvoke_args__isset() : oInfo(false) {}
  bool oInfo;
} _SGAgent_uploadModuleInvoke_args__isset;

class SGAgent_uploadModuleInvoke_args {
 public:

  SGAgent_uploadModuleInvoke_args() {
  }

  virtual ~SGAgent_uploadModuleInvoke_args() throw() {}

  SGModuleInvokeInfo oInfo;

  _SGAgent_uploadModuleInvoke_args__isset __isset;

  void __set_oInfo(const SGModuleInvokeInfo& val) {
    oInfo = val;
  }

  bool operator == (const SGAgent_uploadModuleInvoke_args & rhs) const
  {
    if (!(oInfo == rhs.oInfo))
      return false;
    return true;
  }
  bool operator != (const SGAgent_uploadModuleInvoke_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_uploadModuleInvoke_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_uploadModuleInvoke_pargs {
 public:


  virtual ~SGAgent_uploadModuleInvoke_pargs() throw() {}

  const SGModuleInvokeInfo* oInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_uploadModuleInvoke_result__isset {
  _SGAgent_uploadModuleInvoke_result__isset() : success(false) {}
  bool success;
} _SGAgent_uploadModuleInvoke_result__isset;

class SGAgent_uploadModuleInvoke_result {
 public:

  SGAgent_uploadModuleInvoke_result() : success(0) {
  }

  virtual ~SGAgent_uploadModuleInvoke_result() throw() {}

  int32_t success;

  _SGAgent_uploadModuleInvoke_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SGAgent_uploadModuleInvoke_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_uploadModuleInvoke_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_uploadModuleInvoke_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_uploadModuleInvoke_presult__isset {
  _SGAgent_uploadModuleInvoke_presult__isset() : success(false) {}
  bool success;
} _SGAgent_uploadModuleInvoke_presult__isset;

class SGAgent_uploadModuleInvoke_presult {
 public:


  virtual ~SGAgent_uploadModuleInvoke_presult() throw() {}

  int32_t* success;

  _SGAgent_uploadModuleInvoke_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SGAgent_getName_args {
 public:

  SGAgent_getName_args() {
  }

  virtual ~SGAgent_getName_args() throw() {}


  bool operator == (const SGAgent_getName_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SGAgent_getName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_getName_pargs {
 public:


  virtual ~SGAgent_getName_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getName_result__isset {
  _SGAgent_getName_result__isset() : success(false) {}
  bool success;
} _SGAgent_getName_result__isset;

class SGAgent_getName_result {
 public:

  SGAgent_getName_result() : success("") {
  }

  virtual ~SGAgent_getName_result() throw() {}

  std::string success;

  _SGAgent_getName_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const SGAgent_getName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getName_presult__isset {
  _SGAgent_getName_presult__isset() : success(false) {}
  bool success;
} _SGAgent_getName_presult__isset;

class SGAgent_getName_presult {
 public:


  virtual ~SGAgent_getName_presult() throw() {}

  std::string* success;

  _SGAgent_getName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SGAgent_getVersion_args {
 public:

  SGAgent_getVersion_args() {
  }

  virtual ~SGAgent_getVersion_args() throw() {}


  bool operator == (const SGAgent_getVersion_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SGAgent_getVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_getVersion_pargs {
 public:


  virtual ~SGAgent_getVersion_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getVersion_result__isset {
  _SGAgent_getVersion_result__isset() : success(false) {}
  bool success;
} _SGAgent_getVersion_result__isset;

class SGAgent_getVersion_result {
 public:

  SGAgent_getVersion_result() : success("") {
  }

  virtual ~SGAgent_getVersion_result() throw() {}

  std::string success;

  _SGAgent_getVersion_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const SGAgent_getVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getVersion_presult__isset {
  _SGAgent_getVersion_presult__isset() : success(false) {}
  bool success;
} _SGAgent_getVersion_presult__isset;

class SGAgent_getVersion_presult {
 public:


  virtual ~SGAgent_getVersion_presult() throw() {}

  std::string* success;

  _SGAgent_getVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SGAgent_getStatus_args {
 public:

  SGAgent_getStatus_args() {
  }

  virtual ~SGAgent_getStatus_args() throw() {}


  bool operator == (const SGAgent_getStatus_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SGAgent_getStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_getStatus_pargs {
 public:


  virtual ~SGAgent_getStatus_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getStatus_result__isset {
  _SGAgent_getStatus_result__isset() : success(false) {}
  bool success;
} _SGAgent_getStatus_result__isset;

class SGAgent_getStatus_result {
 public:

  SGAgent_getStatus_result() : success((fb_status::type)0) {
  }

  virtual ~SGAgent_getStatus_result() throw() {}

  fb_status::type success;

  _SGAgent_getStatus_result__isset __isset;

  void __set_success(const fb_status::type val) {
    success = val;
  }

  bool operator == (const SGAgent_getStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getStatus_presult__isset {
  _SGAgent_getStatus_presult__isset() : success(false) {}
  bool success;
} _SGAgent_getStatus_presult__isset;

class SGAgent_getStatus_presult {
 public:


  virtual ~SGAgent_getStatus_presult() throw() {}

  fb_status::type* success;

  _SGAgent_getStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SGAgent_getStatusDetails_args {
 public:

  SGAgent_getStatusDetails_args() {
  }

  virtual ~SGAgent_getStatusDetails_args() throw() {}


  bool operator == (const SGAgent_getStatusDetails_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SGAgent_getStatusDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getStatusDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_getStatusDetails_pargs {
 public:


  virtual ~SGAgent_getStatusDetails_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getStatusDetails_result__isset {
  _SGAgent_getStatusDetails_result__isset() : success(false) {}
  bool success;
} _SGAgent_getStatusDetails_result__isset;

class SGAgent_getStatusDetails_result {
 public:

  SGAgent_getStatusDetails_result() : success("") {
  }

  virtual ~SGAgent_getStatusDetails_result() throw() {}

  std::string success;

  _SGAgent_getStatusDetails_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const SGAgent_getStatusDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getStatusDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getStatusDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getStatusDetails_presult__isset {
  _SGAgent_getStatusDetails_presult__isset() : success(false) {}
  bool success;
} _SGAgent_getStatusDetails_presult__isset;

class SGAgent_getStatusDetails_presult {
 public:


  virtual ~SGAgent_getStatusDetails_presult() throw() {}

  std::string* success;

  _SGAgent_getStatusDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SGAgent_getCounters_args {
 public:

  SGAgent_getCounters_args() {
  }

  virtual ~SGAgent_getCounters_args() throw() {}


  bool operator == (const SGAgent_getCounters_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SGAgent_getCounters_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getCounters_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_getCounters_pargs {
 public:


  virtual ~SGAgent_getCounters_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getCounters_result__isset {
  _SGAgent_getCounters_result__isset() : success(false) {}
  bool success;
} _SGAgent_getCounters_result__isset;

class SGAgent_getCounters_result {
 public:

  SGAgent_getCounters_result() {
  }

  virtual ~SGAgent_getCounters_result() throw() {}

  std::map<std::string, int64_t>  success;

  _SGAgent_getCounters_result__isset __isset;

  void __set_success(const std::map<std::string, int64_t> & val) {
    success = val;
  }

  bool operator == (const SGAgent_getCounters_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getCounters_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getCounters_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getCounters_presult__isset {
  _SGAgent_getCounters_presult__isset() : success(false) {}
  bool success;
} _SGAgent_getCounters_presult__isset;

class SGAgent_getCounters_presult {
 public:


  virtual ~SGAgent_getCounters_presult() throw() {}

  std::map<std::string, int64_t> * success;

  _SGAgent_getCounters_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgent_getCounter_args__isset {
  _SGAgent_getCounter_args__isset() : key(false) {}
  bool key;
} _SGAgent_getCounter_args__isset;

class SGAgent_getCounter_args {
 public:

  SGAgent_getCounter_args() : key("") {
  }

  virtual ~SGAgent_getCounter_args() throw() {}

  std::string key;

  _SGAgent_getCounter_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  bool operator == (const SGAgent_getCounter_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getCounter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getCounter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_getCounter_pargs {
 public:


  virtual ~SGAgent_getCounter_pargs() throw() {}

  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getCounter_result__isset {
  _SGAgent_getCounter_result__isset() : success(false) {}
  bool success;
} _SGAgent_getCounter_result__isset;

class SGAgent_getCounter_result {
 public:

  SGAgent_getCounter_result() : success(0) {
  }

  virtual ~SGAgent_getCounter_result() throw() {}

  int64_t success;

  _SGAgent_getCounter_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const SGAgent_getCounter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getCounter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getCounter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getCounter_presult__isset {
  _SGAgent_getCounter_presult__isset() : success(false) {}
  bool success;
} _SGAgent_getCounter_presult__isset;

class SGAgent_getCounter_presult {
 public:


  virtual ~SGAgent_getCounter_presult() throw() {}

  int64_t* success;

  _SGAgent_getCounter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgent_setOption_args__isset {
  _SGAgent_setOption_args__isset() : key(false), value(false) {}
  bool key;
  bool value;
} _SGAgent_setOption_args__isset;

class SGAgent_setOption_args {
 public:

  SGAgent_setOption_args() : key(""), value("") {
  }

  virtual ~SGAgent_setOption_args() throw() {}

  std::string key;
  std::string value;

  _SGAgent_setOption_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  bool operator == (const SGAgent_setOption_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const SGAgent_setOption_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_setOption_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_setOption_pargs {
 public:


  virtual ~SGAgent_setOption_pargs() throw() {}

  const std::string* key;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_setOption_result {
 public:

  SGAgent_setOption_result() {
  }

  virtual ~SGAgent_setOption_result() throw() {}


  bool operator == (const SGAgent_setOption_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SGAgent_setOption_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_setOption_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_setOption_presult {
 public:


  virtual ~SGAgent_setOption_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgent_getOption_args__isset {
  _SGAgent_getOption_args__isset() : key(false) {}
  bool key;
} _SGAgent_getOption_args__isset;

class SGAgent_getOption_args {
 public:

  SGAgent_getOption_args() : key("") {
  }

  virtual ~SGAgent_getOption_args() throw() {}

  std::string key;

  _SGAgent_getOption_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  bool operator == (const SGAgent_getOption_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getOption_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getOption_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_getOption_pargs {
 public:


  virtual ~SGAgent_getOption_pargs() throw() {}

  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getOption_result__isset {
  _SGAgent_getOption_result__isset() : success(false) {}
  bool success;
} _SGAgent_getOption_result__isset;

class SGAgent_getOption_result {
 public:

  SGAgent_getOption_result() : success("") {
  }

  virtual ~SGAgent_getOption_result() throw() {}

  std::string success;

  _SGAgent_getOption_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const SGAgent_getOption_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getOption_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getOption_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getOption_presult__isset {
  _SGAgent_getOption_presult__isset() : success(false) {}
  bool success;
} _SGAgent_getOption_presult__isset;

class SGAgent_getOption_presult {
 public:


  virtual ~SGAgent_getOption_presult() throw() {}

  std::string* success;

  _SGAgent_getOption_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SGAgent_getOptions_args {
 public:

  SGAgent_getOptions_args() {
  }

  virtual ~SGAgent_getOptions_args() throw() {}


  bool operator == (const SGAgent_getOptions_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SGAgent_getOptions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getOptions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_getOptions_pargs {
 public:


  virtual ~SGAgent_getOptions_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getOptions_result__isset {
  _SGAgent_getOptions_result__isset() : success(false) {}
  bool success;
} _SGAgent_getOptions_result__isset;

class SGAgent_getOptions_result {
 public:

  SGAgent_getOptions_result() {
  }

  virtual ~SGAgent_getOptions_result() throw() {}

  std::map<std::string, std::string>  success;

  _SGAgent_getOptions_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val) {
    success = val;
  }

  bool operator == (const SGAgent_getOptions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getOptions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getOptions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getOptions_presult__isset {
  _SGAgent_getOptions_presult__isset() : success(false) {}
  bool success;
} _SGAgent_getOptions_presult__isset;

class SGAgent_getOptions_presult {
 public:


  virtual ~SGAgent_getOptions_presult() throw() {}

  std::map<std::string, std::string> * success;

  _SGAgent_getOptions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgent_getCpuProfile_args__isset {
  _SGAgent_getCpuProfile_args__isset() : profileDurationInSec(false) {}
  bool profileDurationInSec;
} _SGAgent_getCpuProfile_args__isset;

class SGAgent_getCpuProfile_args {
 public:

  SGAgent_getCpuProfile_args() : profileDurationInSec(0) {
  }

  virtual ~SGAgent_getCpuProfile_args() throw() {}

  int32_t profileDurationInSec;

  _SGAgent_getCpuProfile_args__isset __isset;

  void __set_profileDurationInSec(const int32_t val) {
    profileDurationInSec = val;
  }

  bool operator == (const SGAgent_getCpuProfile_args & rhs) const
  {
    if (!(profileDurationInSec == rhs.profileDurationInSec))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getCpuProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getCpuProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_getCpuProfile_pargs {
 public:


  virtual ~SGAgent_getCpuProfile_pargs() throw() {}

  const int32_t* profileDurationInSec;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getCpuProfile_result__isset {
  _SGAgent_getCpuProfile_result__isset() : success(false) {}
  bool success;
} _SGAgent_getCpuProfile_result__isset;

class SGAgent_getCpuProfile_result {
 public:

  SGAgent_getCpuProfile_result() : success("") {
  }

  virtual ~SGAgent_getCpuProfile_result() throw() {}

  std::string success;

  _SGAgent_getCpuProfile_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const SGAgent_getCpuProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getCpuProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getCpuProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getCpuProfile_presult__isset {
  _SGAgent_getCpuProfile_presult__isset() : success(false) {}
  bool success;
} _SGAgent_getCpuProfile_presult__isset;

class SGAgent_getCpuProfile_presult {
 public:


  virtual ~SGAgent_getCpuProfile_presult() throw() {}

  std::string* success;

  _SGAgent_getCpuProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SGAgent_aliveSince_args {
 public:

  SGAgent_aliveSince_args() {
  }

  virtual ~SGAgent_aliveSince_args() throw() {}


  bool operator == (const SGAgent_aliveSince_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SGAgent_aliveSince_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_aliveSince_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_aliveSince_pargs {
 public:


  virtual ~SGAgent_aliveSince_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_aliveSince_result__isset {
  _SGAgent_aliveSince_result__isset() : success(false) {}
  bool success;
} _SGAgent_aliveSince_result__isset;

class SGAgent_aliveSince_result {
 public:

  SGAgent_aliveSince_result() : success(0) {
  }

  virtual ~SGAgent_aliveSince_result() throw() {}

  int64_t success;

  _SGAgent_aliveSince_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const SGAgent_aliveSince_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_aliveSince_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_aliveSince_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_aliveSince_presult__isset {
  _SGAgent_aliveSince_presult__isset() : success(false) {}
  bool success;
} _SGAgent_aliveSince_presult__isset;

class SGAgent_aliveSince_presult {
 public:


  virtual ~SGAgent_aliveSince_presult() throw() {}

  int64_t* success;

  _SGAgent_aliveSince_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SGAgent_reinitialize_args {
 public:

  SGAgent_reinitialize_args() {
  }

  virtual ~SGAgent_reinitialize_args() throw() {}


  bool operator == (const SGAgent_reinitialize_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SGAgent_reinitialize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_reinitialize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_reinitialize_pargs {
 public:


  virtual ~SGAgent_reinitialize_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_shutdown_args {
 public:

  SGAgent_shutdown_args() {
  }

  virtual ~SGAgent_shutdown_args() throw() {}


  bool operator == (const SGAgent_shutdown_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SGAgent_shutdown_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_shutdown_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_shutdown_pargs {
 public:


  virtual ~SGAgent_shutdown_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class SGAgentClient : virtual public SGAgentIf {
 public:
  SGAgentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  SGAgentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getServiceList(std::vector<SGService> & _return, const std::string& localAppkey, const std::string& remoteAppkey);
  void send_getServiceList(const std::string& localAppkey, const std::string& remoteAppkey);
  void recv_getServiceList(std::vector<SGService> & _return);
  void getService(SGService& _return, const std::string& localAppkey, const std::string& remoteAppkey, const int32_t strategy);
  void send_getService(const std::string& localAppkey, const std::string& remoteAppkey, const int32_t strategy);
  void recv_getService(SGService& _return);
  int32_t registService(const SGService& oService);
  void send_registService(const SGService& oService);
  int32_t recv_registService();
  void callBackMCC(std::string& _return, const int32_t cmdType, const std::string& sData);
  void send_callBackMCC(const int32_t cmdType, const std::string& sData);
  void recv_callBackMCC(std::string& _return);
  void getLocalConfig(std::string& _return, const std::string& localAppkey, const std::string& ip);
  void send_getLocalConfig(const std::string& localAppkey, const std::string& ip);
  void recv_getLocalConfig(std::string& _return);
  int32_t uploadLog(const SGLog& oLog);
  void send_uploadLog(const SGLog& oLog);
  int32_t recv_uploadLog();
  int32_t uploadModuleInvoke(const SGModuleInvokeInfo& oInfo);
  void send_uploadModuleInvoke(const SGModuleInvokeInfo& oInfo);
  int32_t recv_uploadModuleInvoke();
  void getName(std::string& _return);
  void send_getName();
  void recv_getName(std::string& _return);
  void getVersion(std::string& _return);
  void send_getVersion();
  void recv_getVersion(std::string& _return);
  fb_status::type getStatus();
  void send_getStatus();
  fb_status::type recv_getStatus();
  void getStatusDetails(std::string& _return);
  void send_getStatusDetails();
  void recv_getStatusDetails(std::string& _return);
  void getCounters(std::map<std::string, int64_t> & _return);
  void send_getCounters();
  void recv_getCounters(std::map<std::string, int64_t> & _return);
  int64_t getCounter(const std::string& key);
  void send_getCounter(const std::string& key);
  int64_t recv_getCounter();
  void setOption(const std::string& key, const std::string& value);
  void send_setOption(const std::string& key, const std::string& value);
  void recv_setOption();
  void getOption(std::string& _return, const std::string& key);
  void send_getOption(const std::string& key);
  void recv_getOption(std::string& _return);
  void getOptions(std::map<std::string, std::string> & _return);
  void send_getOptions();
  void recv_getOptions(std::map<std::string, std::string> & _return);
  void getCpuProfile(std::string& _return, const int32_t profileDurationInSec);
  void send_getCpuProfile(const int32_t profileDurationInSec);
  void recv_getCpuProfile(std::string& _return);
  int64_t aliveSince();
  void send_aliveSince();
  int64_t recv_aliveSince();
  void reinitialize();
  void send_reinitialize();
  void shutdown();
  void send_shutdown();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SGAgentProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<SGAgentIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (SGAgentProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_getServiceList(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getService(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registService(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_callBackMCC(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getLocalConfig(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_uploadLog(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_uploadModuleInvoke(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getName(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getVersion(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getStatus(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getStatusDetails(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCounters(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCounter(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setOption(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getOption(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getOptions(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCpuProfile(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_aliveSince(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reinitialize(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_shutdown(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SGAgentProcessor(boost::shared_ptr<SGAgentIf> iface) :
    iface_(iface) {
    processMap_["getServiceList"] = &SGAgentProcessor::process_getServiceList;
    processMap_["getService"] = &SGAgentProcessor::process_getService;
    processMap_["registService"] = &SGAgentProcessor::process_registService;
    processMap_["callBackMCC"] = &SGAgentProcessor::process_callBackMCC;
    processMap_["getLocalConfig"] = &SGAgentProcessor::process_getLocalConfig;
    processMap_["uploadLog"] = &SGAgentProcessor::process_uploadLog;
    processMap_["uploadModuleInvoke"] = &SGAgentProcessor::process_uploadModuleInvoke;
    processMap_["getName"] = &SGAgentProcessor::process_getName;
    processMap_["getVersion"] = &SGAgentProcessor::process_getVersion;
    processMap_["getStatus"] = &SGAgentProcessor::process_getStatus;
    processMap_["getStatusDetails"] = &SGAgentProcessor::process_getStatusDetails;
    processMap_["getCounters"] = &SGAgentProcessor::process_getCounters;
    processMap_["getCounter"] = &SGAgentProcessor::process_getCounter;
    processMap_["setOption"] = &SGAgentProcessor::process_setOption;
    processMap_["getOption"] = &SGAgentProcessor::process_getOption;
    processMap_["getOptions"] = &SGAgentProcessor::process_getOptions;
    processMap_["getCpuProfile"] = &SGAgentProcessor::process_getCpuProfile;
    processMap_["aliveSince"] = &SGAgentProcessor::process_aliveSince;
    processMap_["reinitialize"] = &SGAgentProcessor::process_reinitialize;
    processMap_["shutdown"] = &SGAgentProcessor::process_shutdown;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~SGAgentProcessor() {}
};

class SGAgentProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SGAgentProcessorFactory(const ::boost::shared_ptr< SGAgentIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SGAgentIfFactory > handlerFactory_;
};

class SGAgentMultiface : virtual public SGAgentIf {
 public:
  SGAgentMultiface(std::vector<boost::shared_ptr<SGAgentIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SGAgentMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SGAgentIf> > ifaces_;
  SGAgentMultiface() {}
  void add(boost::shared_ptr<SGAgentIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getServiceList(std::vector<SGService> & _return, const std::string& localAppkey, const std::string& remoteAppkey) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getServiceList(_return, localAppkey, remoteAppkey);
        return;
      } else {
        ifaces_[i]->getServiceList(_return, localAppkey, remoteAppkey);
      }
    }
  }

  void getService(SGService& _return, const std::string& localAppkey, const std::string& remoteAppkey, const int32_t strategy) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getService(_return, localAppkey, remoteAppkey, strategy);
        return;
      } else {
        ifaces_[i]->getService(_return, localAppkey, remoteAppkey, strategy);
      }
    }
  }

  int32_t registService(const SGService& oService) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->registService(oService);
      } else {
        ifaces_[i]->registService(oService);
      }
    }
  }

  void callBackMCC(std::string& _return, const int32_t cmdType, const std::string& sData) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->callBackMCC(_return, cmdType, sData);
        return;
      } else {
        ifaces_[i]->callBackMCC(_return, cmdType, sData);
      }
    }
  }

  void getLocalConfig(std::string& _return, const std::string& localAppkey, const std::string& ip) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getLocalConfig(_return, localAppkey, ip);
        return;
      } else {
        ifaces_[i]->getLocalConfig(_return, localAppkey, ip);
      }
    }
  }

  int32_t uploadLog(const SGLog& oLog) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->uploadLog(oLog);
      } else {
        ifaces_[i]->uploadLog(oLog);
      }
    }
  }

  int32_t uploadModuleInvoke(const SGModuleInvokeInfo& oInfo) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->uploadModuleInvoke(oInfo);
      } else {
        ifaces_[i]->uploadModuleInvoke(oInfo);
      }
    }
  }

  void getName(std::string& _return) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getName(_return);
        return;
      } else {
        ifaces_[i]->getName(_return);
      }
    }
  }

  void getVersion(std::string& _return) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getVersion(_return);
        return;
      } else {
        ifaces_[i]->getVersion(_return);
      }
    }
  }

  fb_status::type getStatus() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->getStatus();
      } else {
        ifaces_[i]->getStatus();
      }
    }
  }

  void getStatusDetails(std::string& _return) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getStatusDetails(_return);
        return;
      } else {
        ifaces_[i]->getStatusDetails(_return);
      }
    }
  }

  void getCounters(std::map<std::string, int64_t> & _return) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getCounters(_return);
        return;
      } else {
        ifaces_[i]->getCounters(_return);
      }
    }
  }

  int64_t getCounter(const std::string& key) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->getCounter(key);
      } else {
        ifaces_[i]->getCounter(key);
      }
    }
  }

  void setOption(const std::string& key, const std::string& value) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->setOption(key, value);
    }
  }

  void getOption(std::string& _return, const std::string& key) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getOption(_return, key);
        return;
      } else {
        ifaces_[i]->getOption(_return, key);
      }
    }
  }

  void getOptions(std::map<std::string, std::string> & _return) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getOptions(_return);
        return;
      } else {
        ifaces_[i]->getOptions(_return);
      }
    }
  }

  void getCpuProfile(std::string& _return, const int32_t profileDurationInSec) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getCpuProfile(_return, profileDurationInSec);
        return;
      } else {
        ifaces_[i]->getCpuProfile(_return, profileDurationInSec);
      }
    }
  }

  int64_t aliveSince() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->aliveSince();
      } else {
        ifaces_[i]->aliveSince();
      }
    }
  }

  void reinitialize() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->reinitialize();
    }
  }

  void shutdown() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->shutdown();
    }
  }

};



#endif
