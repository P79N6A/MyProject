<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


$GLOBALS['E_fb_status'] = array(
  'DEAD' => 0,
  'STARTING' => 1,
  'ALIVE' => 2,
  'STOPPING' => 3,
  'STOPPED' => 4,
  'WARNING' => 5,
);

final class fb_status {
  const DEAD = 0;
  const STARTING = 1;
  const ALIVE = 2;
  const STOPPING = 3;
  const STOPPED = 4;
  const WARNING = 5;
  static public $__names = array(
    0 => 'DEAD',
    1 => 'STARTING',
    2 => 'ALIVE',
    3 => 'STOPPING',
    4 => 'STOPPED',
    5 => 'WARNING',
  );
}
 
class SGService {
  static $_TSPEC;

  public $appkey = null;
  public $version = null;
  public $ip = null;
  public $port = null;
  public $weight = null;
  public $status = null;
  public $role = null;
  public $envir = null;
  public $lastUpdateTime = null;
  public $extend = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'appkey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'version',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'port',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'weight',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'role',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'envir',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'lastUpdateTime',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'extend',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['appkey'])) {
        $this->appkey = $vals['appkey'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['ip'])) {
        $this->ip = $vals['ip'];
      }
      if (isset($vals['port'])) {
        $this->port = $vals['port'];
      }
      if (isset($vals['weight'])) {
        $this->weight = $vals['weight'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['role'])) {
        $this->role = $vals['role'];
      }
      if (isset($vals['envir'])) {
        $this->envir = $vals['envir'];
      }
      if (isset($vals['lastUpdateTime'])) {
        $this->lastUpdateTime = $vals['lastUpdateTime'];
      }
      if (isset($vals['extend'])) {
        $this->extend = $vals['extend'];
      }
    }
  }

  public function getName() {
    return 'SGService';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appkey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->port);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->weight);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->role);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->envir);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lastUpdateTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->extend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SGService');
    if ($this->appkey !== null) {
      $xfer += $output->writeFieldBegin('appkey', TType::STRING, 1);
      $xfer += $output->writeString($this->appkey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::STRING, 2);
      $xfer += $output->writeString($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ip !== null) {
      $xfer += $output->writeFieldBegin('ip', TType::STRING, 3);
      $xfer += $output->writeString($this->ip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->port !== null) {
      $xfer += $output->writeFieldBegin('port', TType::I32, 4);
      $xfer += $output->writeI32($this->port);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->weight !== null) {
      $xfer += $output->writeFieldBegin('weight', TType::I32, 5);
      $xfer += $output->writeI32($this->weight);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 6);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->role !== null) {
      $xfer += $output->writeFieldBegin('role', TType::I32, 7);
      $xfer += $output->writeI32($this->role);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->envir !== null) {
      $xfer += $output->writeFieldBegin('envir', TType::I32, 8);
      $xfer += $output->writeI32($this->envir);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastUpdateTime !== null) {
      $xfer += $output->writeFieldBegin('lastUpdateTime', TType::I32, 9);
      $xfer += $output->writeI32($this->lastUpdateTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extend !== null) {
      $xfer += $output->writeFieldBegin('extend', TType::STRING, 10);
      $xfer += $output->writeString($this->extend);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SGLog {
  static $_TSPEC;

  public $appkey = null;
  public $time = null;
  public $level = null;
  public $content = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'appkey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'time',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'level',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['appkey'])) {
        $this->appkey = $vals['appkey'];
      }
      if (isset($vals['time'])) {
        $this->time = $vals['time'];
      }
      if (isset($vals['level'])) {
        $this->level = $vals['level'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
    }
  }

  public function getName() {
    return 'SGLog';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appkey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->level);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SGLog');
    if ($this->appkey !== null) {
      $xfer += $output->writeFieldBegin('appkey', TType::STRING, 1);
      $xfer += $output->writeString($this->appkey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->time !== null) {
      $xfer += $output->writeFieldBegin('time', TType::STRING, 2);
      $xfer += $output->writeString($this->time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->level !== null) {
      $xfer += $output->writeFieldBegin('level', TType::I32, 3);
      $xfer += $output->writeI32($this->level);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 4);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SGModuleInvokeInfo {
  static $_TSPEC;

  public $traceId = null;
  public $spanId = null;
  public $spanName = null;
  public $localAppKey = null;
  public $localHost = null;
  public $localPort = null;
  public $remoteAppKey = null;
  public $remoteHost = null;
  public $remotePort = null;
  public $start = null;
  public $cost = null;
  public $type = null;
  public $status = null;
  public $count = null;
  public $debug = null;
  public $extend = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'traceId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'spanId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'spanName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'localAppKey',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'localHost',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'localPort',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'remoteAppKey',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'remoteHost',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'remotePort',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'cost',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'debug',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'extend',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['traceId'])) {
        $this->traceId = $vals['traceId'];
      }
      if (isset($vals['spanId'])) {
        $this->spanId = $vals['spanId'];
      }
      if (isset($vals['spanName'])) {
        $this->spanName = $vals['spanName'];
      }
      if (isset($vals['localAppKey'])) {
        $this->localAppKey = $vals['localAppKey'];
      }
      if (isset($vals['localHost'])) {
        $this->localHost = $vals['localHost'];
      }
      if (isset($vals['localPort'])) {
        $this->localPort = $vals['localPort'];
      }
      if (isset($vals['remoteAppKey'])) {
        $this->remoteAppKey = $vals['remoteAppKey'];
      }
      if (isset($vals['remoteHost'])) {
        $this->remoteHost = $vals['remoteHost'];
      }
      if (isset($vals['remotePort'])) {
        $this->remotePort = $vals['remotePort'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['cost'])) {
        $this->cost = $vals['cost'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
      if (isset($vals['debug'])) {
        $this->debug = $vals['debug'];
      }
      if (isset($vals['extend'])) {
        $this->extend = $vals['extend'];
      }
    }
  }

  public function getName() {
    return 'SGModuleInvokeInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->traceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->spanId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->spanName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->localAppKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->localHost);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->localPort);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->remoteAppKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->remoteHost);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->remotePort);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cost);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->debug);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->extend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SGModuleInvokeInfo');
    if ($this->traceId !== null) {
      $xfer += $output->writeFieldBegin('traceId', TType::STRING, 1);
      $xfer += $output->writeString($this->traceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spanId !== null) {
      $xfer += $output->writeFieldBegin('spanId', TType::STRING, 2);
      $xfer += $output->writeString($this->spanId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spanName !== null) {
      $xfer += $output->writeFieldBegin('spanName', TType::STRING, 3);
      $xfer += $output->writeString($this->spanName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->localAppKey !== null) {
      $xfer += $output->writeFieldBegin('localAppKey', TType::STRING, 4);
      $xfer += $output->writeString($this->localAppKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->localHost !== null) {
      $xfer += $output->writeFieldBegin('localHost', TType::STRING, 5);
      $xfer += $output->writeString($this->localHost);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->localPort !== null) {
      $xfer += $output->writeFieldBegin('localPort', TType::I32, 6);
      $xfer += $output->writeI32($this->localPort);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->remoteAppKey !== null) {
      $xfer += $output->writeFieldBegin('remoteAppKey', TType::STRING, 7);
      $xfer += $output->writeString($this->remoteAppKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->remoteHost !== null) {
      $xfer += $output->writeFieldBegin('remoteHost', TType::STRING, 8);
      $xfer += $output->writeString($this->remoteHost);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->remotePort !== null) {
      $xfer += $output->writeFieldBegin('remotePort', TType::I32, 9);
      $xfer += $output->writeI32($this->remotePort);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 10);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cost !== null) {
      $xfer += $output->writeFieldBegin('cost', TType::I32, 11);
      $xfer += $output->writeI32($this->cost);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 12);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 13);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 14);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->debug !== null) {
      $xfer += $output->writeFieldBegin('debug', TType::I32, 15);
      $xfer += $output->writeI32($this->debug);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extend !== null) {
      $xfer += $output->writeFieldBegin('extend', TType::STRING, 16);
      $xfer += $output->writeString($this->extend);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRouteData {
  static $_TSPEC;

  public $id = null;
  public $name = null;
  public $appkey = null;
  public $env = null;
  public $category = null;
  public $priority = null;
  public $status = null;
  public $consumer = null;
  public $provider = null;
  public $updateTime = null;
  public $createTime = null;
  public $reserved = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'appkey',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'env',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'category',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'priority',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'consumer',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'provider',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'updateTime',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'createTime',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'reserved',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['appkey'])) {
        $this->appkey = $vals['appkey'];
      }
      if (isset($vals['env'])) {
        $this->env = $vals['env'];
      }
      if (isset($vals['category'])) {
        $this->category = $vals['category'];
      }
      if (isset($vals['priority'])) {
        $this->priority = $vals['priority'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['consumer'])) {
        $this->consumer = $vals['consumer'];
      }
      if (isset($vals['provider'])) {
        $this->provider = $vals['provider'];
      }
      if (isset($vals['updateTime'])) {
        $this->updateTime = $vals['updateTime'];
      }
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
      if (isset($vals['reserved'])) {
        $this->reserved = $vals['reserved'];
      }
    }
  }

  public function getName() {
    return 'CRouteData';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appkey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->env);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->category);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->priority);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->consumer);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->provider);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->updateTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->createTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reserved);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRouteData');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appkey !== null) {
      $xfer += $output->writeFieldBegin('appkey', TType::STRING, 3);
      $xfer += $output->writeString($this->appkey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->env !== null) {
      $xfer += $output->writeFieldBegin('env', TType::I32, 4);
      $xfer += $output->writeI32($this->env);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->category !== null) {
      $xfer += $output->writeFieldBegin('category', TType::I32, 5);
      $xfer += $output->writeI32($this->category);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priority !== null) {
      $xfer += $output->writeFieldBegin('priority', TType::I32, 6);
      $xfer += $output->writeI32($this->priority);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 7);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->consumer !== null) {
      $xfer += $output->writeFieldBegin('consumer', TType::STRING, 8);
      $xfer += $output->writeString($this->consumer);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->provider !== null) {
      $xfer += $output->writeFieldBegin('provider', TType::STRING, 9);
      $xfer += $output->writeString($this->provider);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updateTime !== null) {
      $xfer += $output->writeFieldBegin('updateTime', TType::I32, 10);
      $xfer += $output->writeI32($this->updateTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTime !== null) {
      $xfer += $output->writeFieldBegin('createTime', TType::I32, 11);
      $xfer += $output->writeI32($this->createTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reserved !== null) {
      $xfer += $output->writeFieldBegin('reserved', TType::STRING, 12);
      $xfer += $output->writeString($this->reserved);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
