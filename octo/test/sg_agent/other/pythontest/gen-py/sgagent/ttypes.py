#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class fb_status:
  """
  Common status reporting mechanism across all services
  """
  DEAD = 0
  STARTING = 1
  ALIVE = 2
  STOPPING = 3
  STOPPED = 4
  WARNING = 5

  _VALUES_TO_NAMES = {
    0: "DEAD",
    1: "STARTING",
    2: "ALIVE",
    3: "STOPPING",
    4: "STOPPED",
    5: "WARNING",
  }

  _NAMES_TO_VALUES = {
    "DEAD": 0,
    "STARTING": 1,
    "ALIVE": 2,
    "STOPPING": 3,
    "STOPPED": 4,
    "WARNING": 5,
  }


class SGService:
  """
  Attributes:
   - appkey
   - version
   - ip
   - port
   - weight
   - status
   - role
   - envir
   - lastUpdateTime
   - extend
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'appkey', None, None, ), # 1
    (2, TType.STRING, 'version', None, None, ), # 2
    (3, TType.STRING, 'ip', None, None, ), # 3
    (4, TType.I32, 'port', None, None, ), # 4
    (5, TType.I32, 'weight', None, None, ), # 5
    (6, TType.I32, 'status', None, None, ), # 6
    (7, TType.I32, 'role', None, None, ), # 7
    (8, TType.I32, 'envir', None, None, ), # 8
    (9, TType.I32, 'lastUpdateTime', None, None, ), # 9
    (10, TType.STRING, 'extend', None, None, ), # 10
  )

  def __init__(self, appkey=None, version=None, ip=None, port=None, weight=None, status=None, role=None, envir=None, lastUpdateTime=None, extend=None,):
    self.appkey = appkey
    self.version = version
    self.ip = ip
    self.port = port
    self.weight = weight
    self.status = status
    self.role = role
    self.envir = envir
    self.lastUpdateTime = lastUpdateTime
    self.extend = extend

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.appkey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.version = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.ip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.port = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.weight = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.role = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.envir = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.lastUpdateTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.extend = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SGService')
    if self.appkey is not None:
      oprot.writeFieldBegin('appkey', TType.STRING, 1)
      oprot.writeString(self.appkey)
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.STRING, 2)
      oprot.writeString(self.version)
      oprot.writeFieldEnd()
    if self.ip is not None:
      oprot.writeFieldBegin('ip', TType.STRING, 3)
      oprot.writeString(self.ip)
      oprot.writeFieldEnd()
    if self.port is not None:
      oprot.writeFieldBegin('port', TType.I32, 4)
      oprot.writeI32(self.port)
      oprot.writeFieldEnd()
    if self.weight is not None:
      oprot.writeFieldBegin('weight', TType.I32, 5)
      oprot.writeI32(self.weight)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 6)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.role is not None:
      oprot.writeFieldBegin('role', TType.I32, 7)
      oprot.writeI32(self.role)
      oprot.writeFieldEnd()
    if self.envir is not None:
      oprot.writeFieldBegin('envir', TType.I32, 8)
      oprot.writeI32(self.envir)
      oprot.writeFieldEnd()
    if self.lastUpdateTime is not None:
      oprot.writeFieldBegin('lastUpdateTime', TType.I32, 9)
      oprot.writeI32(self.lastUpdateTime)
      oprot.writeFieldEnd()
    if self.extend is not None:
      oprot.writeFieldBegin('extend', TType.STRING, 10)
      oprot.writeString(self.extend)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Consumer:
  """
  Attributes:
   - ips
   - appkeys
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'ips', (TType.STRING,None), None, ), # 1
    (2, TType.LIST, 'appkeys', (TType.STRING,None), None, ), # 2
  )

  def __init__(self, ips=None, appkeys=None,):
    self.ips = ips
    self.appkeys = appkeys

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.ips = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.ips.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.appkeys = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readString();
            self.appkeys.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Consumer')
    if self.ips is not None:
      oprot.writeFieldBegin('ips', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.ips))
      for iter12 in self.ips:
        oprot.writeString(iter12)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.appkeys is not None:
      oprot.writeFieldBegin('appkeys', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.appkeys))
      for iter13 in self.appkeys:
        oprot.writeString(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CRouteData:
  """
  Attributes:
   - id
   - name
   - appkey
   - env
   - category
   - priority
   - status
   - consumer
   - provider
   - updateTime
   - createTime
   - reserved
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'appkey', None, None, ), # 3
    (4, TType.I32, 'env', None, None, ), # 4
    (5, TType.I32, 'category', None, None, ), # 5
    (6, TType.I32, 'priority', None, None, ), # 6
    (7, TType.I32, 'status', None, None, ), # 7
    (8, TType.STRUCT, 'consumer', (Consumer, Consumer.thrift_spec), None, ), # 8
    (9, TType.LIST, 'provider', (TType.STRING,None), None, ), # 9
    (10, TType.I32, 'updateTime', None, None, ), # 10
    (11, TType.I32, 'createTime', None, None, ), # 11
    (12, TType.STRING, 'reserved', None, None, ), # 12
  )

  def __init__(self, id=None, name=None, appkey=None, env=None, category=None, priority=None, status=None, consumer=None, provider=None, updateTime=None, createTime=None, reserved=None,):
    self.id = id
    self.name = name
    self.appkey = appkey
    self.env = env
    self.category = category
    self.priority = priority
    self.status = status
    self.consumer = consumer
    self.provider = provider
    self.updateTime = updateTime
    self.createTime = createTime
    self.reserved = reserved

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.appkey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.env = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.category = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.priority = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.consumer = Consumer()
          self.consumer.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.provider = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = iprot.readString();
            self.provider.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.updateTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.createTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.reserved = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CRouteData')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.appkey is not None:
      oprot.writeFieldBegin('appkey', TType.STRING, 3)
      oprot.writeString(self.appkey)
      oprot.writeFieldEnd()
    if self.env is not None:
      oprot.writeFieldBegin('env', TType.I32, 4)
      oprot.writeI32(self.env)
      oprot.writeFieldEnd()
    if self.category is not None:
      oprot.writeFieldBegin('category', TType.I32, 5)
      oprot.writeI32(self.category)
      oprot.writeFieldEnd()
    if self.priority is not None:
      oprot.writeFieldBegin('priority', TType.I32, 6)
      oprot.writeI32(self.priority)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 7)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.consumer is not None:
      oprot.writeFieldBegin('consumer', TType.STRUCT, 8)
      self.consumer.write(oprot)
      oprot.writeFieldEnd()
    if self.provider is not None:
      oprot.writeFieldBegin('provider', TType.LIST, 9)
      oprot.writeListBegin(TType.STRING, len(self.provider))
      for iter20 in self.provider:
        oprot.writeString(iter20)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.updateTime is not None:
      oprot.writeFieldBegin('updateTime', TType.I32, 10)
      oprot.writeI32(self.updateTime)
      oprot.writeFieldEnd()
    if self.createTime is not None:
      oprot.writeFieldBegin('createTime', TType.I32, 11)
      oprot.writeI32(self.createTime)
      oprot.writeFieldEnd()
    if self.reserved is not None:
      oprot.writeFieldBegin('reserved', TType.STRING, 12)
      oprot.writeString(self.reserved)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SGLog:
  """
  Attributes:
   - appkey
   - time
   - level
   - content
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'appkey', None, None, ), # 1
    (2, TType.I64, 'time', None, None, ), # 2
    (3, TType.I32, 'level', None, None, ), # 3
    (4, TType.STRING, 'content', None, None, ), # 4
  )

  def __init__(self, appkey=None, time=None, level=None, content=None,):
    self.appkey = appkey
    self.time = time
    self.level = level
    self.content = content

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.appkey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.level = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SGLog')
    if self.appkey is not None:
      oprot.writeFieldBegin('appkey', TType.STRING, 1)
      oprot.writeString(self.appkey)
      oprot.writeFieldEnd()
    if self.time is not None:
      oprot.writeFieldBegin('time', TType.I64, 2)
      oprot.writeI64(self.time)
      oprot.writeFieldEnd()
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I32, 3)
      oprot.writeI32(self.level)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 4)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CommonLog:
  """
  Attributes:
   - cmd
   - content
   - extend
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'cmd', None, None, ), # 1
    (2, TType.STRING, 'content', None, None, ), # 2
    (3, TType.STRING, 'extend', None, None, ), # 3
  )

  def __init__(self, cmd=None, content=None, extend=None,):
    self.cmd = cmd
    self.content = content
    self.extend = extend

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.cmd = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.extend = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CommonLog')
    if self.cmd is not None:
      oprot.writeFieldBegin('cmd', TType.I32, 1)
      oprot.writeI32(self.cmd)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 2)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.extend is not None:
      oprot.writeFieldBegin('extend', TType.STRING, 3)
      oprot.writeString(self.extend)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.cmd is None:
      raise TProtocol.TProtocolException(message='Required field cmd is unset!')
    if self.content is None:
      raise TProtocol.TProtocolException(message='Required field content is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SGModuleInvokeInfo:
  """
  Attributes:
   - traceId
   - spanId
   - spanName
   - localAppKey
   - localHost
   - localPort
   - remoteAppKey
   - remoteHost
   - remotePort
   - start
   - cost
   - type
   - status
   - count
   - debug
   - extend
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'traceId', None, None, ), # 1
    (2, TType.STRING, 'spanId', None, None, ), # 2
    (3, TType.STRING, 'spanName', None, None, ), # 3
    (4, TType.STRING, 'localAppKey', None, None, ), # 4
    (5, TType.STRING, 'localHost', None, None, ), # 5
    (6, TType.I32, 'localPort', None, None, ), # 6
    (7, TType.STRING, 'remoteAppKey', None, None, ), # 7
    (8, TType.STRING, 'remoteHost', None, None, ), # 8
    (9, TType.I32, 'remotePort', None, None, ), # 9
    (10, TType.I64, 'start', None, None, ), # 10
    (11, TType.I32, 'cost', None, None, ), # 11
    (12, TType.I32, 'type', None, None, ), # 12
    (13, TType.I32, 'status', None, None, ), # 13
    (14, TType.I32, 'count', None, None, ), # 14
    (15, TType.I32, 'debug', None, None, ), # 15
    (16, TType.STRING, 'extend', None, None, ), # 16
  )

  def __init__(self, traceId=None, spanId=None, spanName=None, localAppKey=None, localHost=None, localPort=None, remoteAppKey=None, remoteHost=None, remotePort=None, start=None, cost=None, type=None, status=None, count=None, debug=None, extend=None,):
    self.traceId = traceId
    self.spanId = spanId
    self.spanName = spanName
    self.localAppKey = localAppKey
    self.localHost = localHost
    self.localPort = localPort
    self.remoteAppKey = remoteAppKey
    self.remoteHost = remoteHost
    self.remotePort = remotePort
    self.start = start
    self.cost = cost
    self.type = type
    self.status = status
    self.count = count
    self.debug = debug
    self.extend = extend

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.traceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.spanId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.spanName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.localAppKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.localHost = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.localPort = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.remoteAppKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.remoteHost = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.remotePort = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.start = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.cost = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.debug = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.extend = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SGModuleInvokeInfo')
    if self.traceId is not None:
      oprot.writeFieldBegin('traceId', TType.STRING, 1)
      oprot.writeString(self.traceId)
      oprot.writeFieldEnd()
    if self.spanId is not None:
      oprot.writeFieldBegin('spanId', TType.STRING, 2)
      oprot.writeString(self.spanId)
      oprot.writeFieldEnd()
    if self.spanName is not None:
      oprot.writeFieldBegin('spanName', TType.STRING, 3)
      oprot.writeString(self.spanName)
      oprot.writeFieldEnd()
    if self.localAppKey is not None:
      oprot.writeFieldBegin('localAppKey', TType.STRING, 4)
      oprot.writeString(self.localAppKey)
      oprot.writeFieldEnd()
    if self.localHost is not None:
      oprot.writeFieldBegin('localHost', TType.STRING, 5)
      oprot.writeString(self.localHost)
      oprot.writeFieldEnd()
    if self.localPort is not None:
      oprot.writeFieldBegin('localPort', TType.I32, 6)
      oprot.writeI32(self.localPort)
      oprot.writeFieldEnd()
    if self.remoteAppKey is not None:
      oprot.writeFieldBegin('remoteAppKey', TType.STRING, 7)
      oprot.writeString(self.remoteAppKey)
      oprot.writeFieldEnd()
    if self.remoteHost is not None:
      oprot.writeFieldBegin('remoteHost', TType.STRING, 8)
      oprot.writeString(self.remoteHost)
      oprot.writeFieldEnd()
    if self.remotePort is not None:
      oprot.writeFieldBegin('remotePort', TType.I32, 9)
      oprot.writeI32(self.remotePort)
      oprot.writeFieldEnd()
    if self.start is not None:
      oprot.writeFieldBegin('start', TType.I64, 10)
      oprot.writeI64(self.start)
      oprot.writeFieldEnd()
    if self.cost is not None:
      oprot.writeFieldBegin('cost', TType.I32, 11)
      oprot.writeI32(self.cost)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 12)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 13)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 14)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.debug is not None:
      oprot.writeFieldBegin('debug', TType.I32, 15)
      oprot.writeI32(self.debug)
      oprot.writeFieldEnd()
    if self.extend is not None:
      oprot.writeFieldBegin('extend', TType.STRING, 16)
      oprot.writeString(self.extend)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CProviderNode:
  """
  Attributes:
   - appkey
   - lastModifiedTime
   - mtime
   - cversion
   - version
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'appkey', None, None, ), # 1
    (2, TType.I64, 'lastModifiedTime', None, None, ), # 2
    (3, TType.I64, 'mtime', None, None, ), # 3
    (4, TType.I64, 'cversion', None, None, ), # 4
    (5, TType.I64, 'version', None, None, ), # 5
  )

  def __init__(self, appkey=None, lastModifiedTime=None, mtime=None, cversion=None, version=None,):
    self.appkey = appkey
    self.lastModifiedTime = lastModifiedTime
    self.mtime = mtime
    self.cversion = cversion
    self.version = version

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.appkey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.lastModifiedTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.mtime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.cversion = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.version = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CProviderNode')
    if self.appkey is not None:
      oprot.writeFieldBegin('appkey', TType.STRING, 1)
      oprot.writeString(self.appkey)
      oprot.writeFieldEnd()
    if self.lastModifiedTime is not None:
      oprot.writeFieldBegin('lastModifiedTime', TType.I64, 2)
      oprot.writeI64(self.lastModifiedTime)
      oprot.writeFieldEnd()
    if self.mtime is not None:
      oprot.writeFieldBegin('mtime', TType.I64, 3)
      oprot.writeI64(self.mtime)
      oprot.writeFieldEnd()
    if self.cversion is not None:
      oprot.writeFieldBegin('cversion', TType.I64, 4)
      oprot.writeI64(self.cversion)
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.I64, 5)
      oprot.writeI64(self.version)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CRouteNode:
  """
  Attributes:
   - appkey
   - lastModifiedTime
   - mtime
   - cversion
   - version
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'appkey', None, None, ), # 1
    (2, TType.I64, 'lastModifiedTime', None, None, ), # 2
    (3, TType.I64, 'mtime', None, None, ), # 3
    (4, TType.I64, 'cversion', None, None, ), # 4
    (5, TType.I64, 'version', None, None, ), # 5
  )

  def __init__(self, appkey=None, lastModifiedTime=None, mtime=None, cversion=None, version=None,):
    self.appkey = appkey
    self.lastModifiedTime = lastModifiedTime
    self.mtime = mtime
    self.cversion = cversion
    self.version = version

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.appkey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.lastModifiedTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.mtime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.cversion = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.version = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CRouteNode')
    if self.appkey is not None:
      oprot.writeFieldBegin('appkey', TType.STRING, 1)
      oprot.writeString(self.appkey)
      oprot.writeFieldEnd()
    if self.lastModifiedTime is not None:
      oprot.writeFieldBegin('lastModifiedTime', TType.I64, 2)
      oprot.writeI64(self.lastModifiedTime)
      oprot.writeFieldEnd()
    if self.mtime is not None:
      oprot.writeFieldBegin('mtime', TType.I64, 3)
      oprot.writeI64(self.mtime)
      oprot.writeFieldEnd()
    if self.cversion is not None:
      oprot.writeFieldBegin('cversion', TType.I64, 4)
      oprot.writeI64(self.cversion)
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.I64, 5)
      oprot.writeI64(self.version)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ParamMCC:
  """
  Attributes:
   - appkey
   - zkNode
   - md5
   - fileName
   - path
   - lastUpdateTime
   - needToLocal
   - createTime
   - privilege
   - reserved
   - fileType
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'appkey', None, None, ), # 1
    (2, TType.STRING, 'zkNode', None, None, ), # 2
    (3, TType.STRING, 'md5', None, None, ), # 3
    (4, TType.STRING, 'fileName', None, None, ), # 4
    (5, TType.STRING, 'path', None, None, ), # 5
    (6, TType.I64, 'lastUpdateTime', None, None, ), # 6
    (7, TType.I32, 'needToLocal', None, None, ), # 7
    (8, TType.I64, 'createTime', None, None, ), # 8
    (9, TType.STRING, 'privilege', None, None, ), # 9
    (10, TType.STRING, 'reserved', None, None, ), # 10
    (11, TType.STRING, 'fileType', None, None, ), # 11
  )

  def __init__(self, appkey=None, zkNode=None, md5=None, fileName=None, path=None, lastUpdateTime=None, needToLocal=None, createTime=None, privilege=None, reserved=None, fileType=None,):
    self.appkey = appkey
    self.zkNode = zkNode
    self.md5 = md5
    self.fileName = fileName
    self.path = path
    self.lastUpdateTime = lastUpdateTime
    self.needToLocal = needToLocal
    self.createTime = createTime
    self.privilege = privilege
    self.reserved = reserved
    self.fileType = fileType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.appkey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.zkNode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.md5 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.fileName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.path = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.lastUpdateTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.needToLocal = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.createTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.privilege = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.reserved = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.fileType = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ParamMCC')
    if self.appkey is not None:
      oprot.writeFieldBegin('appkey', TType.STRING, 1)
      oprot.writeString(self.appkey)
      oprot.writeFieldEnd()
    if self.zkNode is not None:
      oprot.writeFieldBegin('zkNode', TType.STRING, 2)
      oprot.writeString(self.zkNode)
      oprot.writeFieldEnd()
    if self.md5 is not None:
      oprot.writeFieldBegin('md5', TType.STRING, 3)
      oprot.writeString(self.md5)
      oprot.writeFieldEnd()
    if self.fileName is not None:
      oprot.writeFieldBegin('fileName', TType.STRING, 4)
      oprot.writeString(self.fileName)
      oprot.writeFieldEnd()
    if self.path is not None:
      oprot.writeFieldBegin('path', TType.STRING, 5)
      oprot.writeString(self.path)
      oprot.writeFieldEnd()
    if self.lastUpdateTime is not None:
      oprot.writeFieldBegin('lastUpdateTime', TType.I64, 6)
      oprot.writeI64(self.lastUpdateTime)
      oprot.writeFieldEnd()
    if self.needToLocal is not None:
      oprot.writeFieldBegin('needToLocal', TType.I32, 7)
      oprot.writeI32(self.needToLocal)
      oprot.writeFieldEnd()
    if self.createTime is not None:
      oprot.writeFieldBegin('createTime', TType.I64, 8)
      oprot.writeI64(self.createTime)
      oprot.writeFieldEnd()
    if self.privilege is not None:
      oprot.writeFieldBegin('privilege', TType.STRING, 9)
      oprot.writeString(self.privilege)
      oprot.writeFieldEnd()
    if self.reserved is not None:
      oprot.writeFieldBegin('reserved', TType.STRING, 10)
      oprot.writeString(self.reserved)
      oprot.writeFieldEnd()
    if self.fileType is not None:
      oprot.writeFieldBegin('fileType', TType.STRING, 11)
      oprot.writeString(self.fileType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ZabbixSelfCheck:
  """
  Attributes:
   - msgQueueSize
   - shmKeyNums
   - bufferKeyNum
   - missBuffNum
   - vmRss
   - cpu
   - zkConnections
   - mtConfigConnections
   - logCollectorConnections
   - extend
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'msgQueueSize', (TType.I32,None,TType.I64,None), None, ), # 1
    (2, TType.MAP, 'shmKeyNums', (TType.I32,None,TType.I32,None), None, ), # 2
    (3, TType.I32, 'bufferKeyNum', None, None, ), # 3
    (4, TType.I32, 'missBuffNum', None, None, ), # 4
    (5, TType.I32, 'vmRss', None, None, ), # 5
    (6, TType.I32, 'cpu', None, None, ), # 6
    (7, TType.I32, 'zkConnections', None, None, ), # 7
    (8, TType.I32, 'mtConfigConnections', None, None, ), # 8
    (9, TType.I32, 'logCollectorConnections', None, None, ), # 9
    (10, TType.STRING, 'extend', None, None, ), # 10
  )

  def __init__(self, msgQueueSize=None, shmKeyNums=None, bufferKeyNum=None, missBuffNum=None, vmRss=None, cpu=None, zkConnections=None, mtConfigConnections=None, logCollectorConnections=None, extend=None,):
    self.msgQueueSize = msgQueueSize
    self.shmKeyNums = shmKeyNums
    self.bufferKeyNum = bufferKeyNum
    self.missBuffNum = missBuffNum
    self.vmRss = vmRss
    self.cpu = cpu
    self.zkConnections = zkConnections
    self.mtConfigConnections = mtConfigConnections
    self.logCollectorConnections = logCollectorConnections
    self.extend = extend

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.msgQueueSize = {}
          (_ktype22, _vtype23, _size21 ) = iprot.readMapBegin() 
          for _i25 in xrange(_size21):
            _key26 = iprot.readI32();
            _val27 = iprot.readI64();
            self.msgQueueSize[_key26] = _val27
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.shmKeyNums = {}
          (_ktype29, _vtype30, _size28 ) = iprot.readMapBegin() 
          for _i32 in xrange(_size28):
            _key33 = iprot.readI32();
            _val34 = iprot.readI32();
            self.shmKeyNums[_key33] = _val34
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.bufferKeyNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.missBuffNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.vmRss = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.cpu = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.zkConnections = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.mtConfigConnections = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.logCollectorConnections = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.extend = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ZabbixSelfCheck')
    if self.msgQueueSize is not None:
      oprot.writeFieldBegin('msgQueueSize', TType.MAP, 1)
      oprot.writeMapBegin(TType.I32, TType.I64, len(self.msgQueueSize))
      for kiter35,viter36 in self.msgQueueSize.items():
        oprot.writeI32(kiter35)
        oprot.writeI64(viter36)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.shmKeyNums is not None:
      oprot.writeFieldBegin('shmKeyNums', TType.MAP, 2)
      oprot.writeMapBegin(TType.I32, TType.I32, len(self.shmKeyNums))
      for kiter37,viter38 in self.shmKeyNums.items():
        oprot.writeI32(kiter37)
        oprot.writeI32(viter38)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.bufferKeyNum is not None:
      oprot.writeFieldBegin('bufferKeyNum', TType.I32, 3)
      oprot.writeI32(self.bufferKeyNum)
      oprot.writeFieldEnd()
    if self.missBuffNum is not None:
      oprot.writeFieldBegin('missBuffNum', TType.I32, 4)
      oprot.writeI32(self.missBuffNum)
      oprot.writeFieldEnd()
    if self.vmRss is not None:
      oprot.writeFieldBegin('vmRss', TType.I32, 5)
      oprot.writeI32(self.vmRss)
      oprot.writeFieldEnd()
    if self.cpu is not None:
      oprot.writeFieldBegin('cpu', TType.I32, 6)
      oprot.writeI32(self.cpu)
      oprot.writeFieldEnd()
    if self.zkConnections is not None:
      oprot.writeFieldBegin('zkConnections', TType.I32, 7)
      oprot.writeI32(self.zkConnections)
      oprot.writeFieldEnd()
    if self.mtConfigConnections is not None:
      oprot.writeFieldBegin('mtConfigConnections', TType.I32, 8)
      oprot.writeI32(self.mtConfigConnections)
      oprot.writeFieldEnd()
    if self.logCollectorConnections is not None:
      oprot.writeFieldBegin('logCollectorConnections', TType.I32, 9)
      oprot.writeI32(self.logCollectorConnections)
      oprot.writeFieldEnd()
    if self.extend is not None:
      oprot.writeFieldBegin('extend', TType.STRING, 10)
      oprot.writeString(self.extend)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
