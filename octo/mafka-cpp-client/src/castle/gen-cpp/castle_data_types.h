/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef castle_data_TYPES_H
#define castle_data_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>





struct ErrorCode {
  enum type {
    OK = 0,
    NO_CHANGE = 1,
    ILLEGAL_ROLE = 2,
    ILLEGAL_APPKEY = 3,
    ILLEGAL_TOPIC = 4,
    ILLEGAL_GROUP = 5,
    REGISTER_FAIL = 6,
    ILLEGAL_PARAM = 7,
    ILLEGAL_CLIENT_INFO = 8,
    ILLEGAL_CLIENT_CONFIG = 9,
    ILLEGAL_PRODUCER_CONFIG = 10,
    ILLEGAL_CONSUMER_CONFIG = 11,
    NO_VERSION_FOUND = 12,
    NO_TOPIC_CONFIG_FOUND = 13,
    NO_BROKER_FOUND = 14,
    NO_CLUSTER_FOUND = 15,
    NO_PARTITION_FOUND = 16,
    NO_PARTITION_ASSIGN = 17,
    OTHER_ERROR = 100
  };
};

extern const std::map<int, const char*> _ErrorCode_VALUES_TO_NAMES;

struct SendType {
  enum type {
    SYNC = 0,
    ASYN = 1
  };
};

extern const std::map<int, const char*> _SendType_VALUES_TO_NAMES;

struct RequestType {
  enum type {
    ALL = 0,
    CONFIG = 1,
    MONITOR = 2
  };
};

extern const std::map<int, const char*> _RequestType_VALUES_TO_NAMES;

struct ClientRole {
  enum type {
    PRODUCER = 0,
    CONSUMER = 1
  };
};

extern const std::map<int, const char*> _ClientRole_VALUES_TO_NAMES;

typedef struct _ClientInfo__isset {
  _ClientInfo__isset() : version(false), hostname(false), ip(false) {}
  bool version;
  bool hostname;
  bool ip;
} _ClientInfo__isset;

class ClientInfo {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  ClientInfo() : version(""), hostname(""), ip("") {
  }

  virtual ~ClientInfo() throw() {}

  std::string version;
  std::string hostname;
  std::string ip;

  _ClientInfo__isset __isset;

  void __set_version(const std::string& val) {
    version = val;
  }

  void __set_hostname(const std::string& val) {
    hostname = val;
  }

  void __set_ip(const std::string& val) {
    ip = val;
  }

  bool operator == (const ClientInfo & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (!(hostname == rhs.hostname))
      return false;
    if (!(ip == rhs.ip))
      return false;
    return true;
  }
  bool operator != (const ClientInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProducerConfig__isset {
  _ProducerConfig__isset() : appkey(false), topic(false), producerId(false) {}
  bool appkey;
  bool topic;
  bool producerId;
} _ProducerConfig__isset;

class ProducerConfig {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  ProducerConfig() : appkey(""), topic(""), producerId("") {
  }

  virtual ~ProducerConfig() throw() {}

  std::string appkey;
  std::string topic;
  std::string producerId;

  _ProducerConfig__isset __isset;

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_topic(const std::string& val) {
    topic = val;
  }

  void __set_producerId(const std::string& val) {
    producerId = val;
  }

  bool operator == (const ProducerConfig & rhs) const
  {
    if (!(appkey == rhs.appkey))
      return false;
    if (!(topic == rhs.topic))
      return false;
    if (!(producerId == rhs.producerId))
      return false;
    return true;
  }
  bool operator != (const ProducerConfig &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProducerConfig & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConsumerConfig__isset {
  _ConsumerConfig__isset() : appkey(false), topic(false), groupName(false), consumerId(false) {}
  bool appkey;
  bool topic;
  bool groupName;
  bool consumerId;
} _ConsumerConfig__isset;

class ConsumerConfig {
 public:

  static const char* ascii_fingerprint; // = "C93D890311F28844166CF6E571EB3AC2";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0x3D,0x89,0x03,0x11,0xF2,0x88,0x44,0x16,0x6C,0xF6,0xE5,0x71,0xEB,0x3A,0xC2};

  ConsumerConfig() : appkey(""), topic(""), groupName(""), consumerId("") {
  }

  virtual ~ConsumerConfig() throw() {}

  std::string appkey;
  std::string topic;
  std::string groupName;
  std::string consumerId;

  _ConsumerConfig__isset __isset;

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_topic(const std::string& val) {
    topic = val;
  }

  void __set_groupName(const std::string& val) {
    groupName = val;
  }

  void __set_consumerId(const std::string& val) {
    consumerId = val;
  }

  bool operator == (const ConsumerConfig & rhs) const
  {
    if (!(appkey == rhs.appkey))
      return false;
    if (!(topic == rhs.topic))
      return false;
    if (!(groupName == rhs.groupName))
      return false;
    if (!(consumerId == rhs.consumerId))
      return false;
    return true;
  }
  bool operator != (const ConsumerConfig &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConsumerConfig & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientConfig__isset {
  _ClientConfig__isset() : producerConfig(false), consumerConfig(false) {}
  bool producerConfig;
  bool consumerConfig;
} _ClientConfig__isset;

class ClientConfig {
 public:

  static const char* ascii_fingerprint; // = "FD11DB73BD5F565E31AB00AFD25F5C2B";
  static const uint8_t binary_fingerprint[16]; // = {0xFD,0x11,0xDB,0x73,0xBD,0x5F,0x56,0x5E,0x31,0xAB,0x00,0xAF,0xD2,0x5F,0x5C,0x2B};

  ClientConfig() {
  }

  virtual ~ClientConfig() throw() {}

  ProducerConfig producerConfig;
  ConsumerConfig consumerConfig;

  _ClientConfig__isset __isset;

  void __set_producerConfig(const ProducerConfig& val) {
    producerConfig = val;
  }

  void __set_consumerConfig(const ConsumerConfig& val) {
    consumerConfig = val;
  }

  bool operator == (const ClientConfig & rhs) const
  {
    if (!(producerConfig == rhs.producerConfig))
      return false;
    if (!(consumerConfig == rhs.consumerConfig))
      return false;
    return true;
  }
  bool operator != (const ClientConfig &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientConfig & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrokerInfo__isset {
  _BrokerInfo__isset() : id(false), host(false), port(false) {}
  bool id;
  bool host;
  bool port;
} _BrokerInfo__isset;

class BrokerInfo {
 public:

  static const char* ascii_fingerprint; // = "52C6DAB6CF51AF617111F6D3964C6503";
  static const uint8_t binary_fingerprint[16]; // = {0x52,0xC6,0xDA,0xB6,0xCF,0x51,0xAF,0x61,0x71,0x11,0xF6,0xD3,0x96,0x4C,0x65,0x03};

  BrokerInfo() : id(0), host(""), port(0) {
  }

  virtual ~BrokerInfo() throw() {}

  int32_t id;
  std::string host;
  int32_t port;

  _BrokerInfo__isset __isset;

  void __set_id(const int32_t val) {
    id = val;
  }

  void __set_host(const std::string& val) {
    host = val;
  }

  void __set_port(const int32_t val) {
    port = val;
  }

  bool operator == (const BrokerInfo & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(host == rhs.host))
      return false;
    if (!(port == rhs.port))
      return false;
    return true;
  }
  bool operator != (const BrokerInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrokerInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProducerClusterInfo__isset {
  _ProducerClusterInfo__isset() : clusterName(false), brokerInfos(false), partitionList(false) {}
  bool clusterName;
  bool brokerInfos;
  bool partitionList;
} _ProducerClusterInfo__isset;

class ProducerClusterInfo {
 public:

  static const char* ascii_fingerprint; // = "DC66DD5698E10AD2C14B484BD17CCB09";
  static const uint8_t binary_fingerprint[16]; // = {0xDC,0x66,0xDD,0x56,0x98,0xE1,0x0A,0xD2,0xC1,0x4B,0x48,0x4B,0xD1,0x7C,0xCB,0x09};

  ProducerClusterInfo() : clusterName("") {
  }

  virtual ~ProducerClusterInfo() throw() {}

  std::string clusterName;
  std::vector<BrokerInfo>  brokerInfos;
  std::vector<int32_t>  partitionList;

  _ProducerClusterInfo__isset __isset;

  void __set_clusterName(const std::string& val) {
    clusterName = val;
  }

  void __set_brokerInfos(const std::vector<BrokerInfo> & val) {
    brokerInfos = val;
  }

  void __set_partitionList(const std::vector<int32_t> & val) {
    partitionList = val;
  }

  bool operator == (const ProducerClusterInfo & rhs) const
  {
    if (!(clusterName == rhs.clusterName))
      return false;
    if (!(brokerInfos == rhs.brokerInfos))
      return false;
    if (!(partitionList == rhs.partitionList))
      return false;
    return true;
  }
  bool operator != (const ProducerClusterInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProducerClusterInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProducerResponse__isset {
  _ProducerResponse__isset() : kvPair(false), clusterInfoPair(false) {}
  bool kvPair;
  bool clusterInfoPair;
} _ProducerResponse__isset;

class ProducerResponse {
 public:

  static const char* ascii_fingerprint; // = "C8C902714AF61723C386021063B9871A";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0xC9,0x02,0x71,0x4A,0xF6,0x17,0x23,0xC3,0x86,0x02,0x10,0x63,0xB9,0x87,0x1A};

  ProducerResponse() {
  }

  virtual ~ProducerResponse() throw() {}

  std::map<std::string, std::string>  kvPair;
  std::map<std::string, ProducerClusterInfo>  clusterInfoPair;

  _ProducerResponse__isset __isset;

  void __set_kvPair(const std::map<std::string, std::string> & val) {
    kvPair = val;
  }

  void __set_clusterInfoPair(const std::map<std::string, ProducerClusterInfo> & val) {
    clusterInfoPair = val;
  }

  bool operator == (const ProducerResponse & rhs) const
  {
    if (!(kvPair == rhs.kvPair))
      return false;
    if (!(clusterInfoPair == rhs.clusterInfoPair))
      return false;
    return true;
  }
  bool operator != (const ProducerResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProducerResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PartitionAssign__isset {
  _PartitionAssign__isset() : generationId(false), partitionList(false) {}
  bool generationId;
  bool partitionList;
} _PartitionAssign__isset;

class PartitionAssign {
 public:

  static const char* ascii_fingerprint; // = "ACBC8ECF4940BD768FA35CCD08154770";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xBC,0x8E,0xCF,0x49,0x40,0xBD,0x76,0x8F,0xA3,0x5C,0xCD,0x08,0x15,0x47,0x70};

  PartitionAssign() : generationId(0) {
  }

  virtual ~PartitionAssign() throw() {}

  int32_t generationId;
  std::vector<int32_t>  partitionList;

  _PartitionAssign__isset __isset;

  void __set_generationId(const int32_t val) {
    generationId = val;
  }

  void __set_partitionList(const std::vector<int32_t> & val) {
    partitionList = val;
  }

  bool operator == (const PartitionAssign & rhs) const
  {
    if (!(generationId == rhs.generationId))
      return false;
    if (!(partitionList == rhs.partitionList))
      return false;
    return true;
  }
  bool operator != (const PartitionAssign &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PartitionAssign & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConsumerClusterInfo__isset {
  _ConsumerClusterInfo__isset() : clusterName(false), brokerInfos(false), partitionAssign(false) {}
  bool clusterName;
  bool brokerInfos;
  bool partitionAssign;
} _ConsumerClusterInfo__isset;

class ConsumerClusterInfo {
 public:

  static const char* ascii_fingerprint; // = "38AE4D6DADC0E87BAA7EFEBC95A9EB34";
  static const uint8_t binary_fingerprint[16]; // = {0x38,0xAE,0x4D,0x6D,0xAD,0xC0,0xE8,0x7B,0xAA,0x7E,0xFE,0xBC,0x95,0xA9,0xEB,0x34};

  ConsumerClusterInfo() : clusterName("") {
  }

  virtual ~ConsumerClusterInfo() throw() {}

  std::string clusterName;
  std::vector<BrokerInfo>  brokerInfos;
  PartitionAssign partitionAssign;

  _ConsumerClusterInfo__isset __isset;

  void __set_clusterName(const std::string& val) {
    clusterName = val;
  }

  void __set_brokerInfos(const std::vector<BrokerInfo> & val) {
    brokerInfos = val;
  }

  void __set_partitionAssign(const PartitionAssign& val) {
    partitionAssign = val;
  }

  bool operator == (const ConsumerClusterInfo & rhs) const
  {
    if (!(clusterName == rhs.clusterName))
      return false;
    if (!(brokerInfos == rhs.brokerInfos))
      return false;
    if (!(partitionAssign == rhs.partitionAssign))
      return false;
    return true;
  }
  bool operator != (const ConsumerClusterInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConsumerClusterInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConsumerResponse__isset {
  _ConsumerResponse__isset() : kvPair(false), clusterInfoPair(false) {}
  bool kvPair;
  bool clusterInfoPair;
} _ConsumerResponse__isset;

class ConsumerResponse {
 public:

  static const char* ascii_fingerprint; // = "A7BFB88BFC70E3646F8AA011B2EEC05A";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xBF,0xB8,0x8B,0xFC,0x70,0xE3,0x64,0x6F,0x8A,0xA0,0x11,0xB2,0xEE,0xC0,0x5A};

  ConsumerResponse() {
  }

  virtual ~ConsumerResponse() throw() {}

  std::map<std::string, std::string>  kvPair;
  std::map<std::string, ConsumerClusterInfo>  clusterInfoPair;

  _ConsumerResponse__isset __isset;

  void __set_kvPair(const std::map<std::string, std::string> & val) {
    kvPair = val;
  }

  void __set_clusterInfoPair(const std::map<std::string, ConsumerClusterInfo> & val) {
    clusterInfoPair = val;
  }

  bool operator == (const ConsumerResponse & rhs) const
  {
    if (!(kvPair == rhs.kvPair))
      return false;
    if (!(clusterInfoPair == rhs.clusterInfoPair))
      return false;
    return true;
  }
  bool operator != (const ConsumerResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConsumerResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientResponse__isset {
  _ClientResponse__isset() : producerResponse(false), consumerResponse(false) {}
  bool producerResponse;
  bool consumerResponse;
} _ClientResponse__isset;

class ClientResponse {
 public:

  static const char* ascii_fingerprint; // = "7E7256E36D1891F8E99EC3F2E53069C6";
  static const uint8_t binary_fingerprint[16]; // = {0x7E,0x72,0x56,0xE3,0x6D,0x18,0x91,0xF8,0xE9,0x9E,0xC3,0xF2,0xE5,0x30,0x69,0xC6};

  ClientResponse() {
  }

  virtual ~ClientResponse() throw() {}

  ProducerResponse producerResponse;
  ConsumerResponse consumerResponse;

  _ClientResponse__isset __isset;

  void __set_producerResponse(const ProducerResponse& val) {
    producerResponse = val;
  }

  void __set_consumerResponse(const ConsumerResponse& val) {
    consumerResponse = val;
  }

  bool operator == (const ClientResponse & rhs) const
  {
    if (!(producerResponse == rhs.producerResponse))
      return false;
    if (!(consumerResponse == rhs.consumerResponse))
      return false;
    return true;
  }
  bool operator != (const ClientResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HeartBeatRequest__isset {
  _HeartBeatRequest__isset() : version(false), clientRole(false), heartbeatTime(false), clientInfo(false), clientConfig(false) {}
  bool version;
  bool clientRole;
  bool heartbeatTime;
  bool clientInfo;
  bool clientConfig;
} _HeartBeatRequest__isset;

class HeartBeatRequest {
 public:

  static const char* ascii_fingerprint; // = "8F285C5968983B9695BF8B2EDA0C4EAD";
  static const uint8_t binary_fingerprint[16]; // = {0x8F,0x28,0x5C,0x59,0x68,0x98,0x3B,0x96,0x95,0xBF,0x8B,0x2E,0xDA,0x0C,0x4E,0xAD};

  HeartBeatRequest() : version(0), clientRole((ClientRole::type)0), heartbeatTime(0) {
  }

  virtual ~HeartBeatRequest() throw() {}

  int32_t version;
  ClientRole::type clientRole;
  int32_t heartbeatTime;
  ClientInfo clientInfo;
  ClientConfig clientConfig;

  _HeartBeatRequest__isset __isset;

  void __set_version(const int32_t val) {
    version = val;
  }

  void __set_clientRole(const ClientRole::type val) {
    clientRole = val;
  }

  void __set_heartbeatTime(const int32_t val) {
    heartbeatTime = val;
  }

  void __set_clientInfo(const ClientInfo& val) {
    clientInfo = val;
  }

  void __set_clientConfig(const ClientConfig& val) {
    clientConfig = val;
  }

  bool operator == (const HeartBeatRequest & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (!(clientRole == rhs.clientRole))
      return false;
    if (!(heartbeatTime == rhs.heartbeatTime))
      return false;
    if (!(clientInfo == rhs.clientInfo))
      return false;
    if (!(clientConfig == rhs.clientConfig))
      return false;
    return true;
  }
  bool operator != (const HeartBeatRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HeartBeatRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HeartBeatResponse__isset {
  _HeartBeatResponse__isset() : errorCode(false), version(false), clientResponse(false) {}
  bool errorCode;
  bool version;
  bool clientResponse;
} _HeartBeatResponse__isset;

class HeartBeatResponse {
 public:

  static const char* ascii_fingerprint; // = "B3D21B701EF62E61508F5C3AEB6BB10A";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xD2,0x1B,0x70,0x1E,0xF6,0x2E,0x61,0x50,0x8F,0x5C,0x3A,0xEB,0x6B,0xB1,0x0A};

  HeartBeatResponse() : errorCode((ErrorCode::type)0), version(0) {
  }

  virtual ~HeartBeatResponse() throw() {}

  ErrorCode::type errorCode;
  int32_t version;
  ClientResponse clientResponse;

  _HeartBeatResponse__isset __isset;

  void __set_errorCode(const ErrorCode::type val) {
    errorCode = val;
  }

  void __set_version(const int32_t val) {
    version = val;
  }

  void __set_clientResponse(const ClientResponse& val) {
    clientResponse = val;
  }

  bool operator == (const HeartBeatResponse & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(clientResponse == rhs.clientResponse))
      return false;
    return true;
  }
  bool operator != (const HeartBeatResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HeartBeatResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientInfoRequest__isset {
  _ClientInfoRequest__isset() : clientRole(false), cluster(false), topic(false), group(false), appkey(false) {}
  bool clientRole;
  bool cluster;
  bool topic;
  bool group;
  bool appkey;
} _ClientInfoRequest__isset;

class ClientInfoRequest {
 public:

  static const char* ascii_fingerprint; // = "C75690EE49518353886426C3D96DB33D";
  static const uint8_t binary_fingerprint[16]; // = {0xC7,0x56,0x90,0xEE,0x49,0x51,0x83,0x53,0x88,0x64,0x26,0xC3,0xD9,0x6D,0xB3,0x3D};

  ClientInfoRequest() : clientRole((ClientRole::type)0), cluster(""), topic(""), group(""), appkey("") {
  }

  virtual ~ClientInfoRequest() throw() {}

  ClientRole::type clientRole;
  std::string cluster;
  std::string topic;
  std::string group;
  std::string appkey;

  _ClientInfoRequest__isset __isset;

  void __set_clientRole(const ClientRole::type val) {
    clientRole = val;
  }

  void __set_cluster(const std::string& val) {
    cluster = val;
  }

  void __set_topic(const std::string& val) {
    topic = val;
  }

  void __set_group(const std::string& val) {
    group = val;
  }

  void __set_appkey(const std::string& val) {
    appkey = val;
    __isset.appkey = true;
  }

  bool operator == (const ClientInfoRequest & rhs) const
  {
    if (!(clientRole == rhs.clientRole))
      return false;
    if (!(cluster == rhs.cluster))
      return false;
    if (!(topic == rhs.topic))
      return false;
    if (!(group == rhs.group))
      return false;
    if (__isset.appkey != rhs.__isset.appkey)
      return false;
    else if (__isset.appkey && !(appkey == rhs.appkey))
      return false;
    return true;
  }
  bool operator != (const ClientInfoRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientInfoRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProducerInfo__isset {
  _ProducerInfo__isset() : clientInfo(false), createTime(false), modifyedTime(false) {}
  bool clientInfo;
  bool createTime;
  bool modifyedTime;
} _ProducerInfo__isset;

class ProducerInfo {
 public:

  static const char* ascii_fingerprint; // = "F972067EEA735D41A447C0F8C4925135";
  static const uint8_t binary_fingerprint[16]; // = {0xF9,0x72,0x06,0x7E,0xEA,0x73,0x5D,0x41,0xA4,0x47,0xC0,0xF8,0xC4,0x92,0x51,0x35};

  ProducerInfo() : createTime(0), modifyedTime(0) {
  }

  virtual ~ProducerInfo() throw() {}

  ClientInfo clientInfo;
  int64_t createTime;
  int64_t modifyedTime;

  _ProducerInfo__isset __isset;

  void __set_clientInfo(const ClientInfo& val) {
    clientInfo = val;
  }

  void __set_createTime(const int64_t val) {
    createTime = val;
  }

  void __set_modifyedTime(const int64_t val) {
    modifyedTime = val;
    __isset.modifyedTime = true;
  }

  bool operator == (const ProducerInfo & rhs) const
  {
    if (!(clientInfo == rhs.clientInfo))
      return false;
    if (!(createTime == rhs.createTime))
      return false;
    if (__isset.modifyedTime != rhs.__isset.modifyedTime)
      return false;
    else if (__isset.modifyedTime && !(modifyedTime == rhs.modifyedTime))
      return false;
    return true;
  }
  bool operator != (const ProducerInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProducerInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConsumerInfo__isset {
  _ConsumerInfo__isset() : clientInfo(false), createTime(false), partition(false), modifyedTime(false) {}
  bool clientInfo;
  bool createTime;
  bool partition;
  bool modifyedTime;
} _ConsumerInfo__isset;

class ConsumerInfo {
 public:

  static const char* ascii_fingerprint; // = "A2897D244B0DA29D95D71D39E81AE73D";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0x89,0x7D,0x24,0x4B,0x0D,0xA2,0x9D,0x95,0xD7,0x1D,0x39,0xE8,0x1A,0xE7,0x3D};

  ConsumerInfo() : createTime(0), partition(0), modifyedTime(0) {
  }

  virtual ~ConsumerInfo() throw() {}

  ClientInfo clientInfo;
  int64_t createTime;
  int32_t partition;
  int64_t modifyedTime;

  _ConsumerInfo__isset __isset;

  void __set_clientInfo(const ClientInfo& val) {
    clientInfo = val;
  }

  void __set_createTime(const int64_t val) {
    createTime = val;
  }

  void __set_partition(const int32_t val) {
    partition = val;
  }

  void __set_modifyedTime(const int64_t val) {
    modifyedTime = val;
    __isset.modifyedTime = true;
  }

  bool operator == (const ConsumerInfo & rhs) const
  {
    if (!(clientInfo == rhs.clientInfo))
      return false;
    if (!(createTime == rhs.createTime))
      return false;
    if (!(partition == rhs.partition))
      return false;
    if (__isset.modifyedTime != rhs.__isset.modifyedTime)
      return false;
    else if (__isset.modifyedTime && !(modifyedTime == rhs.modifyedTime))
      return false;
    return true;
  }
  bool operator != (const ConsumerInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConsumerInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientPartitionInfo__isset {
  _ClientPartitionInfo__isset() : clientInfo(false), partition(false), createDTime(false), modifyedTime(false), clientRole(false), threadId(false), cluster(false) {}
  bool clientInfo;
  bool partition;
  bool createDTime;
  bool modifyedTime;
  bool clientRole;
  bool threadId;
  bool cluster;
} _ClientPartitionInfo__isset;

class ClientPartitionInfo {
 public:

  static const char* ascii_fingerprint; // = "3A9091F94BF73CDFF768005EF54AB7A4";
  static const uint8_t binary_fingerprint[16]; // = {0x3A,0x90,0x91,0xF9,0x4B,0xF7,0x3C,0xDF,0xF7,0x68,0x00,0x5E,0xF5,0x4A,0xB7,0xA4};

  ClientPartitionInfo() : partition(0), createDTime(0), modifyedTime(0), clientRole((ClientRole::type)0), threadId(0), cluster("") {
  }

  virtual ~ClientPartitionInfo() throw() {}

  ClientInfo clientInfo;
  int32_t partition;
  int64_t createDTime;
  int64_t modifyedTime;
  ClientRole::type clientRole;
  int32_t threadId;
  std::string cluster;

  _ClientPartitionInfo__isset __isset;

  void __set_clientInfo(const ClientInfo& val) {
    clientInfo = val;
  }

  void __set_partition(const int32_t val) {
    partition = val;
  }

  void __set_createDTime(const int64_t val) {
    createDTime = val;
  }

  void __set_modifyedTime(const int64_t val) {
    modifyedTime = val;
  }

  void __set_clientRole(const ClientRole::type val) {
    clientRole = val;
  }

  void __set_threadId(const int32_t val) {
    threadId = val;
  }

  void __set_cluster(const std::string& val) {
    cluster = val;
  }

  bool operator == (const ClientPartitionInfo & rhs) const
  {
    if (!(clientInfo == rhs.clientInfo))
      return false;
    if (!(partition == rhs.partition))
      return false;
    if (!(createDTime == rhs.createDTime))
      return false;
    if (!(modifyedTime == rhs.modifyedTime))
      return false;
    if (!(clientRole == rhs.clientRole))
      return false;
    if (!(threadId == rhs.threadId))
      return false;
    if (!(cluster == rhs.cluster))
      return false;
    return true;
  }
  bool operator != (const ClientPartitionInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientPartitionInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TopicConfig__isset {
  _TopicConfig__isset() : topicName(false), appkey(false), cluster(false), partition(false), replica(false), sendType(false), ack(false), sendSwitchEnable(false), requestTimeOutMs(false), queueMaxMs(false), queueMaxMessages(false), batchNumMessages(false), messagSendFailMax(false), clusterName(false), idcSwitch(false), mafkaConfigSource(false), sendMessageVersion(false) {}
  bool topicName;
  bool appkey;
  bool cluster;
  bool partition;
  bool replica;
  bool sendType;
  bool ack;
  bool sendSwitchEnable;
  bool requestTimeOutMs;
  bool queueMaxMs;
  bool queueMaxMessages;
  bool batchNumMessages;
  bool messagSendFailMax;
  bool clusterName;
  bool idcSwitch;
  bool mafkaConfigSource;
  bool sendMessageVersion;
} _TopicConfig__isset;

class TopicConfig {
 public:

  static const char* ascii_fingerprint; // = "8CED7D0196384D9CBED24F5EA594C819";
  static const uint8_t binary_fingerprint[16]; // = {0x8C,0xED,0x7D,0x01,0x96,0x38,0x4D,0x9C,0xBE,0xD2,0x4F,0x5E,0xA5,0x94,0xC8,0x19};

  TopicConfig() : topicName(""), appkey(""), partition(0), replica(0), sendType((SendType::type)0), ack(0), sendSwitchEnable(0), requestTimeOutMs(0), queueMaxMs(0), queueMaxMessages(0), batchNumMessages(0), messagSendFailMax(0), clusterName(""), idcSwitch(""), mafkaConfigSource(""), sendMessageVersion(0) {
  }

  virtual ~TopicConfig() throw() {}

  std::string topicName;
  std::string appkey;
  std::vector<std::string>  cluster;
  int32_t partition;
  int32_t replica;
  SendType::type sendType;
  int32_t ack;
  bool sendSwitchEnable;
  int32_t requestTimeOutMs;
  int32_t queueMaxMs;
  int32_t queueMaxMessages;
  int32_t batchNumMessages;
  int32_t messagSendFailMax;
  std::string clusterName;
  std::string idcSwitch;
  std::string mafkaConfigSource;
  int32_t sendMessageVersion;

  _TopicConfig__isset __isset;

  void __set_topicName(const std::string& val) {
    topicName = val;
  }

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_cluster(const std::vector<std::string> & val) {
    cluster = val;
  }

  void __set_partition(const int32_t val) {
    partition = val;
  }

  void __set_replica(const int32_t val) {
    replica = val;
  }

  void __set_sendType(const SendType::type val) {
    sendType = val;
  }

  void __set_ack(const int32_t val) {
    ack = val;
  }

  void __set_sendSwitchEnable(const bool val) {
    sendSwitchEnable = val;
    __isset.sendSwitchEnable = true;
  }

  void __set_requestTimeOutMs(const int32_t val) {
    requestTimeOutMs = val;
    __isset.requestTimeOutMs = true;
  }

  void __set_queueMaxMs(const int32_t val) {
    queueMaxMs = val;
    __isset.queueMaxMs = true;
  }

  void __set_queueMaxMessages(const int32_t val) {
    queueMaxMessages = val;
    __isset.queueMaxMessages = true;
  }

  void __set_batchNumMessages(const int32_t val) {
    batchNumMessages = val;
    __isset.batchNumMessages = true;
  }

  void __set_messagSendFailMax(const int32_t val) {
    messagSendFailMax = val;
    __isset.messagSendFailMax = true;
  }

  void __set_clusterName(const std::string& val) {
    clusterName = val;
    __isset.clusterName = true;
  }

  void __set_idcSwitch(const std::string& val) {
    idcSwitch = val;
    __isset.idcSwitch = true;
  }

  void __set_mafkaConfigSource(const std::string& val) {
    mafkaConfigSource = val;
    __isset.mafkaConfigSource = true;
  }

  void __set_sendMessageVersion(const int32_t val) {
    sendMessageVersion = val;
    __isset.sendMessageVersion = true;
  }

  bool operator == (const TopicConfig & rhs) const
  {
    if (!(topicName == rhs.topicName))
      return false;
    if (!(appkey == rhs.appkey))
      return false;
    if (!(cluster == rhs.cluster))
      return false;
    if (!(partition == rhs.partition))
      return false;
    if (!(replica == rhs.replica))
      return false;
    if (!(sendType == rhs.sendType))
      return false;
    if (!(ack == rhs.ack))
      return false;
    if (__isset.sendSwitchEnable != rhs.__isset.sendSwitchEnable)
      return false;
    else if (__isset.sendSwitchEnable && !(sendSwitchEnable == rhs.sendSwitchEnable))
      return false;
    if (__isset.requestTimeOutMs != rhs.__isset.requestTimeOutMs)
      return false;
    else if (__isset.requestTimeOutMs && !(requestTimeOutMs == rhs.requestTimeOutMs))
      return false;
    if (__isset.queueMaxMs != rhs.__isset.queueMaxMs)
      return false;
    else if (__isset.queueMaxMs && !(queueMaxMs == rhs.queueMaxMs))
      return false;
    if (__isset.queueMaxMessages != rhs.__isset.queueMaxMessages)
      return false;
    else if (__isset.queueMaxMessages && !(queueMaxMessages == rhs.queueMaxMessages))
      return false;
    if (__isset.batchNumMessages != rhs.__isset.batchNumMessages)
      return false;
    else if (__isset.batchNumMessages && !(batchNumMessages == rhs.batchNumMessages))
      return false;
    if (__isset.messagSendFailMax != rhs.__isset.messagSendFailMax)
      return false;
    else if (__isset.messagSendFailMax && !(messagSendFailMax == rhs.messagSendFailMax))
      return false;
    if (__isset.clusterName != rhs.__isset.clusterName)
      return false;
    else if (__isset.clusterName && !(clusterName == rhs.clusterName))
      return false;
    if (__isset.idcSwitch != rhs.__isset.idcSwitch)
      return false;
    else if (__isset.idcSwitch && !(idcSwitch == rhs.idcSwitch))
      return false;
    if (__isset.mafkaConfigSource != rhs.__isset.mafkaConfigSource)
      return false;
    else if (__isset.mafkaConfigSource && !(mafkaConfigSource == rhs.mafkaConfigSource))
      return false;
    if (__isset.sendMessageVersion != rhs.__isset.sendMessageVersion)
      return false;
    else if (__isset.sendMessageVersion && !(sendMessageVersion == rhs.sendMessageVersion))
      return false;
    return true;
  }
  bool operator != (const TopicConfig &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopicConfig & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConsumerGroupConfig__isset {
  _ConsumerGroupConfig__isset() : topic(false), appkey(false), group(false), cluster(false), topicAppkey(false), clusterName(false), consumerThreadNum(false), autoCommitEnable(false), autoCommitIntervalMs(false), rebalanceMaxRetries(false), fetchMinBytes(false), fetchWaitMaxMs(false), zookeeperSyncTimeMs(false), rebalanceBackOffMs(false), autoOffsetReset(false), idcSwitch(false), mafkaIdcSwitch(false), mafkaConfigSource(false), consumerParallarNum(false), consumeMessageDelay(false) {}
  bool topic;
  bool appkey;
  bool group;
  bool cluster;
  bool topicAppkey;
  bool clusterName;
  bool consumerThreadNum;
  bool autoCommitEnable;
  bool autoCommitIntervalMs;
  bool rebalanceMaxRetries;
  bool fetchMinBytes;
  bool fetchWaitMaxMs;
  bool zookeeperSyncTimeMs;
  bool rebalanceBackOffMs;
  bool autoOffsetReset;
  bool idcSwitch;
  bool mafkaIdcSwitch;
  bool mafkaConfigSource;
  bool consumerParallarNum;
  bool consumeMessageDelay;
} _ConsumerGroupConfig__isset;

class ConsumerGroupConfig {
 public:

  static const char* ascii_fingerprint; // = "ACBDECED2C8B5AE0480AB82FE88FBF1D";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xBD,0xEC,0xED,0x2C,0x8B,0x5A,0xE0,0x48,0x0A,0xB8,0x2F,0xE8,0x8F,0xBF,0x1D};

  ConsumerGroupConfig() : topic(""), appkey(""), group(""), topicAppkey(""), clusterName(""), consumerThreadNum(0), autoCommitEnable(0), autoCommitIntervalMs(0), rebalanceMaxRetries(0), fetchMinBytes(0), fetchWaitMaxMs(0), zookeeperSyncTimeMs(0), rebalanceBackOffMs(0), autoOffsetReset(""), idcSwitch(""), mafkaIdcSwitch(""), mafkaConfigSource(""), consumerParallarNum(0), consumeMessageDelay(0) {
  }

  virtual ~ConsumerGroupConfig() throw() {}

  std::string topic;
  std::string appkey;
  std::string group;
  std::vector<std::string>  cluster;
  std::string topicAppkey;
  std::string clusterName;
  int32_t consumerThreadNum;
  bool autoCommitEnable;
  int32_t autoCommitIntervalMs;
  int32_t rebalanceMaxRetries;
  int32_t fetchMinBytes;
  int32_t fetchWaitMaxMs;
  int32_t zookeeperSyncTimeMs;
  int32_t rebalanceBackOffMs;
  std::string autoOffsetReset;
  std::string idcSwitch;
  std::string mafkaIdcSwitch;
  std::string mafkaConfigSource;
  int32_t consumerParallarNum;
  int32_t consumeMessageDelay;

  _ConsumerGroupConfig__isset __isset;

  void __set_topic(const std::string& val) {
    topic = val;
  }

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_group(const std::string& val) {
    group = val;
  }

  void __set_cluster(const std::vector<std::string> & val) {
    cluster = val;
  }

  void __set_topicAppkey(const std::string& val) {
    topicAppkey = val;
    __isset.topicAppkey = true;
  }

  void __set_clusterName(const std::string& val) {
    clusterName = val;
    __isset.clusterName = true;
  }

  void __set_consumerThreadNum(const int32_t val) {
    consumerThreadNum = val;
    __isset.consumerThreadNum = true;
  }

  void __set_autoCommitEnable(const bool val) {
    autoCommitEnable = val;
    __isset.autoCommitEnable = true;
  }

  void __set_autoCommitIntervalMs(const int32_t val) {
    autoCommitIntervalMs = val;
    __isset.autoCommitIntervalMs = true;
  }

  void __set_rebalanceMaxRetries(const int32_t val) {
    rebalanceMaxRetries = val;
    __isset.rebalanceMaxRetries = true;
  }

  void __set_fetchMinBytes(const int32_t val) {
    fetchMinBytes = val;
    __isset.fetchMinBytes = true;
  }

  void __set_fetchWaitMaxMs(const int32_t val) {
    fetchWaitMaxMs = val;
    __isset.fetchWaitMaxMs = true;
  }

  void __set_zookeeperSyncTimeMs(const int32_t val) {
    zookeeperSyncTimeMs = val;
    __isset.zookeeperSyncTimeMs = true;
  }

  void __set_rebalanceBackOffMs(const int32_t val) {
    rebalanceBackOffMs = val;
    __isset.rebalanceBackOffMs = true;
  }

  void __set_autoOffsetReset(const std::string& val) {
    autoOffsetReset = val;
    __isset.autoOffsetReset = true;
  }

  void __set_idcSwitch(const std::string& val) {
    idcSwitch = val;
    __isset.idcSwitch = true;
  }

  void __set_mafkaIdcSwitch(const std::string& val) {
    mafkaIdcSwitch = val;
    __isset.mafkaIdcSwitch = true;
  }

  void __set_mafkaConfigSource(const std::string& val) {
    mafkaConfigSource = val;
    __isset.mafkaConfigSource = true;
  }

  void __set_consumerParallarNum(const int32_t val) {
    consumerParallarNum = val;
    __isset.consumerParallarNum = true;
  }

  void __set_consumeMessageDelay(const int32_t val) {
    consumeMessageDelay = val;
    __isset.consumeMessageDelay = true;
  }

  bool operator == (const ConsumerGroupConfig & rhs) const
  {
    if (!(topic == rhs.topic))
      return false;
    if (!(appkey == rhs.appkey))
      return false;
    if (!(group == rhs.group))
      return false;
    if (!(cluster == rhs.cluster))
      return false;
    if (__isset.topicAppkey != rhs.__isset.topicAppkey)
      return false;
    else if (__isset.topicAppkey && !(topicAppkey == rhs.topicAppkey))
      return false;
    if (__isset.clusterName != rhs.__isset.clusterName)
      return false;
    else if (__isset.clusterName && !(clusterName == rhs.clusterName))
      return false;
    if (__isset.consumerThreadNum != rhs.__isset.consumerThreadNum)
      return false;
    else if (__isset.consumerThreadNum && !(consumerThreadNum == rhs.consumerThreadNum))
      return false;
    if (__isset.autoCommitEnable != rhs.__isset.autoCommitEnable)
      return false;
    else if (__isset.autoCommitEnable && !(autoCommitEnable == rhs.autoCommitEnable))
      return false;
    if (__isset.autoCommitIntervalMs != rhs.__isset.autoCommitIntervalMs)
      return false;
    else if (__isset.autoCommitIntervalMs && !(autoCommitIntervalMs == rhs.autoCommitIntervalMs))
      return false;
    if (__isset.rebalanceMaxRetries != rhs.__isset.rebalanceMaxRetries)
      return false;
    else if (__isset.rebalanceMaxRetries && !(rebalanceMaxRetries == rhs.rebalanceMaxRetries))
      return false;
    if (__isset.fetchMinBytes != rhs.__isset.fetchMinBytes)
      return false;
    else if (__isset.fetchMinBytes && !(fetchMinBytes == rhs.fetchMinBytes))
      return false;
    if (__isset.fetchWaitMaxMs != rhs.__isset.fetchWaitMaxMs)
      return false;
    else if (__isset.fetchWaitMaxMs && !(fetchWaitMaxMs == rhs.fetchWaitMaxMs))
      return false;
    if (__isset.zookeeperSyncTimeMs != rhs.__isset.zookeeperSyncTimeMs)
      return false;
    else if (__isset.zookeeperSyncTimeMs && !(zookeeperSyncTimeMs == rhs.zookeeperSyncTimeMs))
      return false;
    if (__isset.rebalanceBackOffMs != rhs.__isset.rebalanceBackOffMs)
      return false;
    else if (__isset.rebalanceBackOffMs && !(rebalanceBackOffMs == rhs.rebalanceBackOffMs))
      return false;
    if (__isset.autoOffsetReset != rhs.__isset.autoOffsetReset)
      return false;
    else if (__isset.autoOffsetReset && !(autoOffsetReset == rhs.autoOffsetReset))
      return false;
    if (__isset.idcSwitch != rhs.__isset.idcSwitch)
      return false;
    else if (__isset.idcSwitch && !(idcSwitch == rhs.idcSwitch))
      return false;
    if (__isset.mafkaIdcSwitch != rhs.__isset.mafkaIdcSwitch)
      return false;
    else if (__isset.mafkaIdcSwitch && !(mafkaIdcSwitch == rhs.mafkaIdcSwitch))
      return false;
    if (__isset.mafkaConfigSource != rhs.__isset.mafkaConfigSource)
      return false;
    else if (__isset.mafkaConfigSource && !(mafkaConfigSource == rhs.mafkaConfigSource))
      return false;
    if (__isset.consumerParallarNum != rhs.__isset.consumerParallarNum)
      return false;
    else if (__isset.consumerParallarNum && !(consumerParallarNum == rhs.consumerParallarNum))
      return false;
    if (__isset.consumeMessageDelay != rhs.__isset.consumeMessageDelay)
      return false;
    else if (__isset.consumeMessageDelay && !(consumeMessageDelay == rhs.consumeMessageDelay))
      return false;
    return true;
  }
  bool operator != (const ConsumerGroupConfig &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConsumerGroupConfig & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientInfoResponse__isset {
  _ClientInfoResponse__isset() : errorCode(false), producerInfoList(false), consumerInfoList(false), mqClientInfoList(false) {}
  bool errorCode;
  bool producerInfoList;
  bool consumerInfoList;
  bool mqClientInfoList;
} _ClientInfoResponse__isset;

class ClientInfoResponse {
 public:

  static const char* ascii_fingerprint; // = "3B169BD4679619E042BB4B3816A95C6E";
  static const uint8_t binary_fingerprint[16]; // = {0x3B,0x16,0x9B,0xD4,0x67,0x96,0x19,0xE0,0x42,0xBB,0x4B,0x38,0x16,0xA9,0x5C,0x6E};

  ClientInfoResponse() : errorCode((ErrorCode::type)0) {
  }

  virtual ~ClientInfoResponse() throw() {}

  ErrorCode::type errorCode;
  std::vector<ProducerInfo>  producerInfoList;
  std::vector<ConsumerInfo>  consumerInfoList;
  std::vector<ClientPartitionInfo>  mqClientInfoList;

  _ClientInfoResponse__isset __isset;

  void __set_errorCode(const ErrorCode::type val) {
    errorCode = val;
  }

  void __set_producerInfoList(const std::vector<ProducerInfo> & val) {
    producerInfoList = val;
  }

  void __set_consumerInfoList(const std::vector<ConsumerInfo> & val) {
    consumerInfoList = val;
  }

  void __set_mqClientInfoList(const std::vector<ClientPartitionInfo> & val) {
    mqClientInfoList = val;
    __isset.mqClientInfoList = true;
  }

  bool operator == (const ClientInfoResponse & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (!(producerInfoList == rhs.producerInfoList))
      return false;
    if (!(consumerInfoList == rhs.consumerInfoList))
      return false;
    if (__isset.mqClientInfoList != rhs.__isset.mqClientInfoList)
      return false;
    else if (__isset.mqClientInfoList && !(mqClientInfoList == rhs.mqClientInfoList))
      return false;
    return true;
  }
  bool operator != (const ClientInfoResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientInfoResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TopicStatistic__isset {
  _TopicStatistic__isset() : messageCount(false), produceRate(false) {}
  bool messageCount;
  bool produceRate;
} _TopicStatistic__isset;

class TopicStatistic {
 public:

  static const char* ascii_fingerprint; // = "F33135321253DAEB67B0E79E416CA831";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

  TopicStatistic() : messageCount(0), produceRate(0) {
  }

  virtual ~TopicStatistic() throw() {}

  int64_t messageCount;
  int64_t produceRate;

  _TopicStatistic__isset __isset;

  void __set_messageCount(const int64_t val) {
    messageCount = val;
  }

  void __set_produceRate(const int64_t val) {
    produceRate = val;
  }

  bool operator == (const TopicStatistic & rhs) const
  {
    if (!(messageCount == rhs.messageCount))
      return false;
    if (!(produceRate == rhs.produceRate))
      return false;
    return true;
  }
  bool operator != (const TopicStatistic &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopicStatistic & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GroupStatistic__isset {
  _GroupStatistic__isset() : accumulation(false), offset(false), consumeRate(false), logSize(false) {}
  bool accumulation;
  bool offset;
  bool consumeRate;
  bool logSize;
} _GroupStatistic__isset;

class GroupStatistic {
 public:

  static const char* ascii_fingerprint; // = "66C8E6F97F0275919D86FEB536251B17";
  static const uint8_t binary_fingerprint[16]; // = {0x66,0xC8,0xE6,0xF9,0x7F,0x02,0x75,0x91,0x9D,0x86,0xFE,0xB5,0x36,0x25,0x1B,0x17};

  GroupStatistic() : accumulation(0), offset(0), consumeRate(0), logSize(0) {
  }

  virtual ~GroupStatistic() throw() {}

  int64_t accumulation;
  int64_t offset;
  int64_t consumeRate;
  int64_t logSize;

  _GroupStatistic__isset __isset;

  void __set_accumulation(const int64_t val) {
    accumulation = val;
  }

  void __set_offset(const int64_t val) {
    offset = val;
  }

  void __set_consumeRate(const int64_t val) {
    consumeRate = val;
  }

  void __set_logSize(const int64_t val) {
    logSize = val;
  }

  bool operator == (const GroupStatistic & rhs) const
  {
    if (!(accumulation == rhs.accumulation))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(consumeRate == rhs.consumeRate))
      return false;
    if (!(logSize == rhs.logSize))
      return false;
    return true;
  }
  bool operator != (const GroupStatistic &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GroupStatistic & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PartitionInfo__isset {
  _PartitionInfo__isset() : partitionId(false), topicPartitionInfo(false), groupPartitionInfo(false) {}
  bool partitionId;
  bool topicPartitionInfo;
  bool groupPartitionInfo;
} _PartitionInfo__isset;

class PartitionInfo {
 public:

  static const char* ascii_fingerprint; // = "8C35DF6AC9EEB3CE6791D97AB2AB1167";
  static const uint8_t binary_fingerprint[16]; // = {0x8C,0x35,0xDF,0x6A,0xC9,0xEE,0xB3,0xCE,0x67,0x91,0xD9,0x7A,0xB2,0xAB,0x11,0x67};

  PartitionInfo() : partitionId(0) {
  }

  virtual ~PartitionInfo() throw() {}

  int32_t partitionId;
  TopicStatistic topicPartitionInfo;
  GroupStatistic groupPartitionInfo;

  _PartitionInfo__isset __isset;

  void __set_partitionId(const int32_t val) {
    partitionId = val;
  }

  void __set_topicPartitionInfo(const TopicStatistic& val) {
    topicPartitionInfo = val;
  }

  void __set_groupPartitionInfo(const GroupStatistic& val) {
    groupPartitionInfo = val;
  }

  bool operator == (const PartitionInfo & rhs) const
  {
    if (!(partitionId == rhs.partitionId))
      return false;
    if (!(topicPartitionInfo == rhs.topicPartitionInfo))
      return false;
    if (!(groupPartitionInfo == rhs.groupPartitionInfo))
      return false;
    return true;
  }
  bool operator != (const PartitionInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PartitionInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TopicMonitorInfo__isset {
  _TopicMonitorInfo__isset() : topicPartitionInfoList(false), topicStatic(false) {}
  bool topicPartitionInfoList;
  bool topicStatic;
} _TopicMonitorInfo__isset;

class TopicMonitorInfo {
 public:

  static const char* ascii_fingerprint; // = "BE1AD48E4A75C9E0758E9D2AA5263585";
  static const uint8_t binary_fingerprint[16]; // = {0xBE,0x1A,0xD4,0x8E,0x4A,0x75,0xC9,0xE0,0x75,0x8E,0x9D,0x2A,0xA5,0x26,0x35,0x85};

  TopicMonitorInfo() {
  }

  virtual ~TopicMonitorInfo() throw() {}

  std::vector<PartitionInfo>  topicPartitionInfoList;
  TopicStatistic topicStatic;

  _TopicMonitorInfo__isset __isset;

  void __set_topicPartitionInfoList(const std::vector<PartitionInfo> & val) {
    topicPartitionInfoList = val;
  }

  void __set_topicStatic(const TopicStatistic& val) {
    topicStatic = val;
  }

  bool operator == (const TopicMonitorInfo & rhs) const
  {
    if (!(topicPartitionInfoList == rhs.topicPartitionInfoList))
      return false;
    if (!(topicStatic == rhs.topicStatic))
      return false;
    return true;
  }
  bool operator != (const TopicMonitorInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopicMonitorInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConsumerGroupMonitorInfo__isset {
  _ConsumerGroupMonitorInfo__isset() : partitionInfoList(false), groupStatistic(false) {}
  bool partitionInfoList;
  bool groupStatistic;
} _ConsumerGroupMonitorInfo__isset;

class ConsumerGroupMonitorInfo {
 public:

  static const char* ascii_fingerprint; // = "45E0F06ABBE9DCC1D14C83167C08F1C5";
  static const uint8_t binary_fingerprint[16]; // = {0x45,0xE0,0xF0,0x6A,0xBB,0xE9,0xDC,0xC1,0xD1,0x4C,0x83,0x16,0x7C,0x08,0xF1,0xC5};

  ConsumerGroupMonitorInfo() {
  }

  virtual ~ConsumerGroupMonitorInfo() throw() {}

  std::vector<PartitionInfo>  partitionInfoList;
  GroupStatistic groupStatistic;

  _ConsumerGroupMonitorInfo__isset __isset;

  void __set_partitionInfoList(const std::vector<PartitionInfo> & val) {
    partitionInfoList = val;
  }

  void __set_groupStatistic(const GroupStatistic& val) {
    groupStatistic = val;
  }

  bool operator == (const ConsumerGroupMonitorInfo & rhs) const
  {
    if (!(partitionInfoList == rhs.partitionInfoList))
      return false;
    if (!(groupStatistic == rhs.groupStatistic))
      return false;
    return true;
  }
  bool operator != (const ConsumerGroupMonitorInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConsumerGroupMonitorInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TopicInfo__isset {
  _TopicInfo__isset() : topicConfig(false), topicMonitorInfo(false) {}
  bool topicConfig;
  bool topicMonitorInfo;
} _TopicInfo__isset;

class TopicInfo {
 public:

  static const char* ascii_fingerprint; // = "17BA584FD1C0E73C97BAED1804F6295E";
  static const uint8_t binary_fingerprint[16]; // = {0x17,0xBA,0x58,0x4F,0xD1,0xC0,0xE7,0x3C,0x97,0xBA,0xED,0x18,0x04,0xF6,0x29,0x5E};

  TopicInfo() {
  }

  virtual ~TopicInfo() throw() {}

  TopicConfig topicConfig;
  TopicMonitorInfo topicMonitorInfo;

  _TopicInfo__isset __isset;

  void __set_topicConfig(const TopicConfig& val) {
    topicConfig = val;
  }

  void __set_topicMonitorInfo(const TopicMonitorInfo& val) {
    topicMonitorInfo = val;
  }

  bool operator == (const TopicInfo & rhs) const
  {
    if (!(topicConfig == rhs.topicConfig))
      return false;
    if (!(topicMonitorInfo == rhs.topicMonitorInfo))
      return false;
    return true;
  }
  bool operator != (const TopicInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopicInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConsumerGroupInfo__isset {
  _ConsumerGroupInfo__isset() : consumerGroupConfig(false), consumerGroupMonitorInfo(false) {}
  bool consumerGroupConfig;
  bool consumerGroupMonitorInfo;
} _ConsumerGroupInfo__isset;

class ConsumerGroupInfo {
 public:

  static const char* ascii_fingerprint; // = "46CFAE7A0DBFAA2D9D02016260D64024";
  static const uint8_t binary_fingerprint[16]; // = {0x46,0xCF,0xAE,0x7A,0x0D,0xBF,0xAA,0x2D,0x9D,0x02,0x01,0x62,0x60,0xD6,0x40,0x24};

  ConsumerGroupInfo() {
  }

  virtual ~ConsumerGroupInfo() throw() {}

  ConsumerGroupConfig consumerGroupConfig;
  ConsumerGroupMonitorInfo consumerGroupMonitorInfo;

  _ConsumerGroupInfo__isset __isset;

  void __set_consumerGroupConfig(const ConsumerGroupConfig& val) {
    consumerGroupConfig = val;
  }

  void __set_consumerGroupMonitorInfo(const ConsumerGroupMonitorInfo& val) {
    consumerGroupMonitorInfo = val;
  }

  bool operator == (const ConsumerGroupInfo & rhs) const
  {
    if (!(consumerGroupConfig == rhs.consumerGroupConfig))
      return false;
    if (!(consumerGroupMonitorInfo == rhs.consumerGroupMonitorInfo))
      return false;
    return true;
  }
  bool operator != (const ConsumerGroupInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConsumerGroupInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TopicConfigRequest__isset {
  _TopicConfigRequest__isset() : topicConfig(false), requestType(false) {}
  bool topicConfig;
  bool requestType;
} _TopicConfigRequest__isset;

class TopicConfigRequest {
 public:

  static const char* ascii_fingerprint; // = "E9F7A362A1C1148C1832D2C9C1789088";
  static const uint8_t binary_fingerprint[16]; // = {0xE9,0xF7,0xA3,0x62,0xA1,0xC1,0x14,0x8C,0x18,0x32,0xD2,0xC9,0xC1,0x78,0x90,0x88};

  TopicConfigRequest() : requestType((RequestType::type)0) {
  }

  virtual ~TopicConfigRequest() throw() {}

  TopicConfig topicConfig;
  RequestType::type requestType;

  _TopicConfigRequest__isset __isset;

  void __set_topicConfig(const TopicConfig& val) {
    topicConfig = val;
  }

  void __set_requestType(const RequestType::type val) {
    requestType = val;
  }

  bool operator == (const TopicConfigRequest & rhs) const
  {
    if (!(topicConfig == rhs.topicConfig))
      return false;
    if (!(requestType == rhs.requestType))
      return false;
    return true;
  }
  bool operator != (const TopicConfigRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopicConfigRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TopicActionResponse__isset {
  _TopicActionResponse__isset() : errocode(false) {}
  bool errocode;
} _TopicActionResponse__isset;

class TopicActionResponse {
 public:

  static const char* ascii_fingerprint; // = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

  TopicActionResponse() : errocode((ErrorCode::type)0) {
  }

  virtual ~TopicActionResponse() throw() {}

  ErrorCode::type errocode;

  _TopicActionResponse__isset __isset;

  void __set_errocode(const ErrorCode::type val) {
    errocode = val;
  }

  bool operator == (const TopicActionResponse & rhs) const
  {
    if (!(errocode == rhs.errocode))
      return false;
    return true;
  }
  bool operator != (const TopicActionResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopicActionResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TopicConfigResponse__isset {
  _TopicConfigResponse__isset() : errocode(false), topicConfig(false) {}
  bool errocode;
  bool topicConfig;
} _TopicConfigResponse__isset;

class TopicConfigResponse {
 public:

  static const char* ascii_fingerprint; // = "BD96FCA5749F01DA5CDBF2BC74E91ABC";
  static const uint8_t binary_fingerprint[16]; // = {0xBD,0x96,0xFC,0xA5,0x74,0x9F,0x01,0xDA,0x5C,0xDB,0xF2,0xBC,0x74,0xE9,0x1A,0xBC};

  TopicConfigResponse() : errocode((ErrorCode::type)0) {
  }

  virtual ~TopicConfigResponse() throw() {}

  ErrorCode::type errocode;
  TopicConfig topicConfig;

  _TopicConfigResponse__isset __isset;

  void __set_errocode(const ErrorCode::type val) {
    errocode = val;
  }

  void __set_topicConfig(const TopicConfig& val) {
    topicConfig = val;
  }

  bool operator == (const TopicConfigResponse & rhs) const
  {
    if (!(errocode == rhs.errocode))
      return false;
    if (!(topicConfig == rhs.topicConfig))
      return false;
    return true;
  }
  bool operator != (const TopicConfigResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopicConfigResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TopicInfoResponse__isset {
  _TopicInfoResponse__isset() : errocode(false), topicInfo(false) {}
  bool errocode;
  bool topicInfo;
} _TopicInfoResponse__isset;

class TopicInfoResponse {
 public:

  static const char* ascii_fingerprint; // = "AF13CCAE77296557B67493182BCB1B5C";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0x13,0xCC,0xAE,0x77,0x29,0x65,0x57,0xB6,0x74,0x93,0x18,0x2B,0xCB,0x1B,0x5C};

  TopicInfoResponse() : errocode((ErrorCode::type)0) {
  }

  virtual ~TopicInfoResponse() throw() {}

  ErrorCode::type errocode;
  TopicInfo topicInfo;

  _TopicInfoResponse__isset __isset;

  void __set_errocode(const ErrorCode::type val) {
    errocode = val;
  }

  void __set_topicInfo(const TopicInfo& val) {
    topicInfo = val;
  }

  bool operator == (const TopicInfoResponse & rhs) const
  {
    if (!(errocode == rhs.errocode))
      return false;
    if (!(topicInfo == rhs.topicInfo))
      return false;
    return true;
  }
  bool operator != (const TopicInfoResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopicInfoResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConsumerGroupConfigRequest__isset {
  _ConsumerGroupConfigRequest__isset() : consumerGroupConfig(false), requestType(false) {}
  bool consumerGroupConfig;
  bool requestType;
} _ConsumerGroupConfigRequest__isset;

class ConsumerGroupConfigRequest {
 public:

  static const char* ascii_fingerprint; // = "1F4313910A9362DEC6ACE5A62A997CE4";
  static const uint8_t binary_fingerprint[16]; // = {0x1F,0x43,0x13,0x91,0x0A,0x93,0x62,0xDE,0xC6,0xAC,0xE5,0xA6,0x2A,0x99,0x7C,0xE4};

  ConsumerGroupConfigRequest() : requestType((RequestType::type)0) {
  }

  virtual ~ConsumerGroupConfigRequest() throw() {}

  ConsumerGroupConfig consumerGroupConfig;
  RequestType::type requestType;

  _ConsumerGroupConfigRequest__isset __isset;

  void __set_consumerGroupConfig(const ConsumerGroupConfig& val) {
    consumerGroupConfig = val;
  }

  void __set_requestType(const RequestType::type val) {
    requestType = val;
  }

  bool operator == (const ConsumerGroupConfigRequest & rhs) const
  {
    if (!(consumerGroupConfig == rhs.consumerGroupConfig))
      return false;
    if (!(requestType == rhs.requestType))
      return false;
    return true;
  }
  bool operator != (const ConsumerGroupConfigRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConsumerGroupConfigRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConsumerGroupInfoResponse__isset {
  _ConsumerGroupInfoResponse__isset() : errocode(false), consumerGroupInfo(false) {}
  bool errocode;
  bool consumerGroupInfo;
} _ConsumerGroupInfoResponse__isset;

class ConsumerGroupInfoResponse {
 public:

  static const char* ascii_fingerprint; // = "269EBBFD0DA2208825B51BE3B763932C";
  static const uint8_t binary_fingerprint[16]; // = {0x26,0x9E,0xBB,0xFD,0x0D,0xA2,0x20,0x88,0x25,0xB5,0x1B,0xE3,0xB7,0x63,0x93,0x2C};

  ConsumerGroupInfoResponse() : errocode((ErrorCode::type)0) {
  }

  virtual ~ConsumerGroupInfoResponse() throw() {}

  ErrorCode::type errocode;
  ConsumerGroupInfo consumerGroupInfo;

  _ConsumerGroupInfoResponse__isset __isset;

  void __set_errocode(const ErrorCode::type val) {
    errocode = val;
  }

  void __set_consumerGroupInfo(const ConsumerGroupInfo& val) {
    consumerGroupInfo = val;
  }

  bool operator == (const ConsumerGroupInfoResponse & rhs) const
  {
    if (!(errocode == rhs.errocode))
      return false;
    if (!(consumerGroupInfo == rhs.consumerGroupInfo))
      return false;
    return true;
  }
  bool operator != (const ConsumerGroupInfoResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConsumerGroupInfoResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TopicInfoListResponse__isset {
  _TopicInfoListResponse__isset() : errocode(false), topicInfoList(false) {}
  bool errocode;
  bool topicInfoList;
} _TopicInfoListResponse__isset;

class TopicInfoListResponse {
 public:

  static const char* ascii_fingerprint; // = "89AD62DC37C7F27DD2098FDCECFF5AE2";
  static const uint8_t binary_fingerprint[16]; // = {0x89,0xAD,0x62,0xDC,0x37,0xC7,0xF2,0x7D,0xD2,0x09,0x8F,0xDC,0xEC,0xFF,0x5A,0xE2};

  TopicInfoListResponse() : errocode((ErrorCode::type)0) {
  }

  virtual ~TopicInfoListResponse() throw() {}

  ErrorCode::type errocode;
  std::vector<TopicInfo>  topicInfoList;

  _TopicInfoListResponse__isset __isset;

  void __set_errocode(const ErrorCode::type val) {
    errocode = val;
  }

  void __set_topicInfoList(const std::vector<TopicInfo> & val) {
    topicInfoList = val;
  }

  bool operator == (const TopicInfoListResponse & rhs) const
  {
    if (!(errocode == rhs.errocode))
      return false;
    if (!(topicInfoList == rhs.topicInfoList))
      return false;
    return true;
  }
  bool operator != (const TopicInfoListResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopicInfoListResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConsumerGroupListResponse__isset {
  _ConsumerGroupListResponse__isset() : errocode(false), consumerGroupInfoList(false) {}
  bool errocode;
  bool consumerGroupInfoList;
} _ConsumerGroupListResponse__isset;

class ConsumerGroupListResponse {
 public:

  static const char* ascii_fingerprint; // = "7820CD79C11BC2AF60561C7D74261F6B";
  static const uint8_t binary_fingerprint[16]; // = {0x78,0x20,0xCD,0x79,0xC1,0x1B,0xC2,0xAF,0x60,0x56,0x1C,0x7D,0x74,0x26,0x1F,0x6B};

  ConsumerGroupListResponse() : errocode((ErrorCode::type)0) {
  }

  virtual ~ConsumerGroupListResponse() throw() {}

  ErrorCode::type errocode;
  std::vector<ConsumerGroupInfo>  consumerGroupInfoList;

  _ConsumerGroupListResponse__isset __isset;

  void __set_errocode(const ErrorCode::type val) {
    errocode = val;
  }

  void __set_consumerGroupInfoList(const std::vector<ConsumerGroupInfo> & val) {
    consumerGroupInfoList = val;
  }

  bool operator == (const ConsumerGroupListResponse & rhs) const
  {
    if (!(errocode == rhs.errocode))
      return false;
    if (!(consumerGroupInfoList == rhs.consumerGroupInfoList))
      return false;
    return true;
  }
  bool operator != (const ConsumerGroupListResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConsumerGroupListResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClusterNameRequest__isset {
  _ClusterNameRequest__isset() : cluster(false) {}
  bool cluster;
} _ClusterNameRequest__isset;

class ClusterNameRequest {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ClusterNameRequest() : cluster("") {
  }

  virtual ~ClusterNameRequest() throw() {}

  std::string cluster;

  _ClusterNameRequest__isset __isset;

  void __set_cluster(const std::string& val) {
    cluster = val;
  }

  bool operator == (const ClusterNameRequest & rhs) const
  {
    if (!(cluster == rhs.cluster))
      return false;
    return true;
  }
  bool operator != (const ClusterNameRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClusterNameRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
