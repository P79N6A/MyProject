/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CastleService_H
#define CastleService_H

#include <TProcessor.h>
#include "castle_service_types.h"



class CastleServiceIf {
 public:
  virtual ~CastleServiceIf() {}
  virtual void getHeartBeat(HeartBeatResponse& _return, const HeartBeatRequest& heartBeatRequest) = 0;
  virtual void getClientInfo(ClientInfoResponse& _return, const ClientInfoRequest& clientInfoRequest) = 0;
  virtual void createTopic(TopicActionResponse& _return, const TopicConfigRequest& topicConfigRequest) = 0;
  virtual void updateTopic(TopicActionResponse& _return, const TopicConfigRequest& topicConfigRequest) = 0;
  virtual void deleteTopic(TopicActionResponse& _return, const TopicConfigRequest& topicConfigRequest) = 0;
  virtual void getTopicInfo(TopicInfoResponse& _return, const TopicConfigRequest& topicConfigRequest) = 0;
  virtual void createConsumerGroup(ConsumerGroupInfoResponse& _return, const ConsumerGroupConfigRequest& consumerGroupConfigRequest) = 0;
  virtual void updateConsumerGroup(ConsumerGroupInfoResponse& _return, const ConsumerGroupConfigRequest& consumerGroupConfigRequest) = 0;
  virtual void deleteConsumerGroup(ConsumerGroupInfoResponse& _return, const ConsumerGroupConfigRequest& consumerGroupConfigRequest) = 0;
  virtual void getConsumerGroupInfo(ConsumerGroupInfoResponse& _return, const ConsumerGroupConfigRequest& consumerGroupConfigRequest) = 0;
  virtual void getClusterTopicAllInfo(TopicInfoListResponse& _return, const ClusterNameRequest& clusterNameRequest) = 0;
  virtual void getClusterGroupAllInfo(ConsumerGroupListResponse& _return, const ClusterNameRequest& clusterNameRequest) = 0;
};

class CastleServiceIfFactory {
 public:
  typedef CastleServiceIf Handler;

  virtual ~CastleServiceIfFactory() {}

  virtual CastleServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CastleServiceIf* /* handler */) = 0;
};

class CastleServiceIfSingletonFactory : virtual public CastleServiceIfFactory {
 public:
  CastleServiceIfSingletonFactory(const boost::shared_ptr<CastleServiceIf>& iface) : iface_(iface) {}
  virtual ~CastleServiceIfSingletonFactory() {}

  virtual CastleServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CastleServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<CastleServiceIf> iface_;
};

class CastleServiceNull : virtual public CastleServiceIf {
 public:
  virtual ~CastleServiceNull() {}
  void getHeartBeat(HeartBeatResponse& /* _return */, const HeartBeatRequest& /* heartBeatRequest */) {
    return;
  }
  void getClientInfo(ClientInfoResponse& /* _return */, const ClientInfoRequest& /* clientInfoRequest */) {
    return;
  }
  void createTopic(TopicActionResponse& /* _return */, const TopicConfigRequest& /* topicConfigRequest */) {
    return;
  }
  void updateTopic(TopicActionResponse& /* _return */, const TopicConfigRequest& /* topicConfigRequest */) {
    return;
  }
  void deleteTopic(TopicActionResponse& /* _return */, const TopicConfigRequest& /* topicConfigRequest */) {
    return;
  }
  void getTopicInfo(TopicInfoResponse& /* _return */, const TopicConfigRequest& /* topicConfigRequest */) {
    return;
  }
  void createConsumerGroup(ConsumerGroupInfoResponse& /* _return */, const ConsumerGroupConfigRequest& /* consumerGroupConfigRequest */) {
    return;
  }
  void updateConsumerGroup(ConsumerGroupInfoResponse& /* _return */, const ConsumerGroupConfigRequest& /* consumerGroupConfigRequest */) {
    return;
  }
  void deleteConsumerGroup(ConsumerGroupInfoResponse& /* _return */, const ConsumerGroupConfigRequest& /* consumerGroupConfigRequest */) {
    return;
  }
  void getConsumerGroupInfo(ConsumerGroupInfoResponse& /* _return */, const ConsumerGroupConfigRequest& /* consumerGroupConfigRequest */) {
    return;
  }
  void getClusterTopicAllInfo(TopicInfoListResponse& /* _return */, const ClusterNameRequest& /* clusterNameRequest */) {
    return;
  }
  void getClusterGroupAllInfo(ConsumerGroupListResponse& /* _return */, const ClusterNameRequest& /* clusterNameRequest */) {
    return;
  }
};

typedef struct _CastleService_getHeartBeat_args__isset {
  _CastleService_getHeartBeat_args__isset() : heartBeatRequest(false) {}
  bool heartBeatRequest;
} _CastleService_getHeartBeat_args__isset;

class CastleService_getHeartBeat_args {
 public:

  CastleService_getHeartBeat_args() {
  }

  virtual ~CastleService_getHeartBeat_args() throw() {}

  HeartBeatRequest heartBeatRequest;

  _CastleService_getHeartBeat_args__isset __isset;

  void __set_heartBeatRequest(const HeartBeatRequest& val) {
    heartBeatRequest = val;
  }

  bool operator == (const CastleService_getHeartBeat_args & rhs) const
  {
    if (!(heartBeatRequest == rhs.heartBeatRequest))
      return false;
    return true;
  }
  bool operator != (const CastleService_getHeartBeat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CastleService_getHeartBeat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CastleService_getHeartBeat_pargs {
 public:


  virtual ~CastleService_getHeartBeat_pargs() throw() {}

  const HeartBeatRequest* heartBeatRequest;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CastleService_getHeartBeat_result__isset {
  _CastleService_getHeartBeat_result__isset() : success(false) {}
  bool success;
} _CastleService_getHeartBeat_result__isset;

class CastleService_getHeartBeat_result {
 public:

  CastleService_getHeartBeat_result() {
  }

  virtual ~CastleService_getHeartBeat_result() throw() {}

  HeartBeatResponse success;

  _CastleService_getHeartBeat_result__isset __isset;

  void __set_success(const HeartBeatResponse& val) {
    success = val;
  }

  bool operator == (const CastleService_getHeartBeat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CastleService_getHeartBeat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CastleService_getHeartBeat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CastleService_getHeartBeat_presult__isset {
  _CastleService_getHeartBeat_presult__isset() : success(false) {}
  bool success;
} _CastleService_getHeartBeat_presult__isset;

class CastleService_getHeartBeat_presult {
 public:


  virtual ~CastleService_getHeartBeat_presult() throw() {}

  HeartBeatResponse* success;

  _CastleService_getHeartBeat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CastleService_getClientInfo_args__isset {
  _CastleService_getClientInfo_args__isset() : clientInfoRequest(false) {}
  bool clientInfoRequest;
} _CastleService_getClientInfo_args__isset;

class CastleService_getClientInfo_args {
 public:

  CastleService_getClientInfo_args() {
  }

  virtual ~CastleService_getClientInfo_args() throw() {}

  ClientInfoRequest clientInfoRequest;

  _CastleService_getClientInfo_args__isset __isset;

  void __set_clientInfoRequest(const ClientInfoRequest& val) {
    clientInfoRequest = val;
  }

  bool operator == (const CastleService_getClientInfo_args & rhs) const
  {
    if (!(clientInfoRequest == rhs.clientInfoRequest))
      return false;
    return true;
  }
  bool operator != (const CastleService_getClientInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CastleService_getClientInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CastleService_getClientInfo_pargs {
 public:


  virtual ~CastleService_getClientInfo_pargs() throw() {}

  const ClientInfoRequest* clientInfoRequest;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CastleService_getClientInfo_result__isset {
  _CastleService_getClientInfo_result__isset() : success(false) {}
  bool success;
} _CastleService_getClientInfo_result__isset;

class CastleService_getClientInfo_result {
 public:

  CastleService_getClientInfo_result() {
  }

  virtual ~CastleService_getClientInfo_result() throw() {}

  ClientInfoResponse success;

  _CastleService_getClientInfo_result__isset __isset;

  void __set_success(const ClientInfoResponse& val) {
    success = val;
  }

  bool operator == (const CastleService_getClientInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CastleService_getClientInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CastleService_getClientInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CastleService_getClientInfo_presult__isset {
  _CastleService_getClientInfo_presult__isset() : success(false) {}
  bool success;
} _CastleService_getClientInfo_presult__isset;

class CastleService_getClientInfo_presult {
 public:


  virtual ~CastleService_getClientInfo_presult() throw() {}

  ClientInfoResponse* success;

  _CastleService_getClientInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CastleService_createTopic_args__isset {
  _CastleService_createTopic_args__isset() : topicConfigRequest(false) {}
  bool topicConfigRequest;
} _CastleService_createTopic_args__isset;

class CastleService_createTopic_args {
 public:

  CastleService_createTopic_args() {
  }

  virtual ~CastleService_createTopic_args() throw() {}

  TopicConfigRequest topicConfigRequest;

  _CastleService_createTopic_args__isset __isset;

  void __set_topicConfigRequest(const TopicConfigRequest& val) {
    topicConfigRequest = val;
  }

  bool operator == (const CastleService_createTopic_args & rhs) const
  {
    if (!(topicConfigRequest == rhs.topicConfigRequest))
      return false;
    return true;
  }
  bool operator != (const CastleService_createTopic_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CastleService_createTopic_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CastleService_createTopic_pargs {
 public:


  virtual ~CastleService_createTopic_pargs() throw() {}

  const TopicConfigRequest* topicConfigRequest;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CastleService_createTopic_result__isset {
  _CastleService_createTopic_result__isset() : success(false) {}
  bool success;
} _CastleService_createTopic_result__isset;

class CastleService_createTopic_result {
 public:

  CastleService_createTopic_result() {
  }

  virtual ~CastleService_createTopic_result() throw() {}

  TopicActionResponse success;

  _CastleService_createTopic_result__isset __isset;

  void __set_success(const TopicActionResponse& val) {
    success = val;
  }

  bool operator == (const CastleService_createTopic_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CastleService_createTopic_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CastleService_createTopic_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CastleService_createTopic_presult__isset {
  _CastleService_createTopic_presult__isset() : success(false) {}
  bool success;
} _CastleService_createTopic_presult__isset;

class CastleService_createTopic_presult {
 public:


  virtual ~CastleService_createTopic_presult() throw() {}

  TopicActionResponse* success;

  _CastleService_createTopic_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CastleService_updateTopic_args__isset {
  _CastleService_updateTopic_args__isset() : topicConfigRequest(false) {}
  bool topicConfigRequest;
} _CastleService_updateTopic_args__isset;

class CastleService_updateTopic_args {
 public:

  CastleService_updateTopic_args() {
  }

  virtual ~CastleService_updateTopic_args() throw() {}

  TopicConfigRequest topicConfigRequest;

  _CastleService_updateTopic_args__isset __isset;

  void __set_topicConfigRequest(const TopicConfigRequest& val) {
    topicConfigRequest = val;
  }

  bool operator == (const CastleService_updateTopic_args & rhs) const
  {
    if (!(topicConfigRequest == rhs.topicConfigRequest))
      return false;
    return true;
  }
  bool operator != (const CastleService_updateTopic_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CastleService_updateTopic_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CastleService_updateTopic_pargs {
 public:


  virtual ~CastleService_updateTopic_pargs() throw() {}

  const TopicConfigRequest* topicConfigRequest;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CastleService_updateTopic_result__isset {
  _CastleService_updateTopic_result__isset() : success(false) {}
  bool success;
} _CastleService_updateTopic_result__isset;

class CastleService_updateTopic_result {
 public:

  CastleService_updateTopic_result() {
  }

  virtual ~CastleService_updateTopic_result() throw() {}

  TopicActionResponse success;

  _CastleService_updateTopic_result__isset __isset;

  void __set_success(const TopicActionResponse& val) {
    success = val;
  }

  bool operator == (const CastleService_updateTopic_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CastleService_updateTopic_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CastleService_updateTopic_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CastleService_updateTopic_presult__isset {
  _CastleService_updateTopic_presult__isset() : success(false) {}
  bool success;
} _CastleService_updateTopic_presult__isset;

class CastleService_updateTopic_presult {
 public:


  virtual ~CastleService_updateTopic_presult() throw() {}

  TopicActionResponse* success;

  _CastleService_updateTopic_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CastleService_deleteTopic_args__isset {
  _CastleService_deleteTopic_args__isset() : topicConfigRequest(false) {}
  bool topicConfigRequest;
} _CastleService_deleteTopic_args__isset;

class CastleService_deleteTopic_args {
 public:

  CastleService_deleteTopic_args() {
  }

  virtual ~CastleService_deleteTopic_args() throw() {}

  TopicConfigRequest topicConfigRequest;

  _CastleService_deleteTopic_args__isset __isset;

  void __set_topicConfigRequest(const TopicConfigRequest& val) {
    topicConfigRequest = val;
  }

  bool operator == (const CastleService_deleteTopic_args & rhs) const
  {
    if (!(topicConfigRequest == rhs.topicConfigRequest))
      return false;
    return true;
  }
  bool operator != (const CastleService_deleteTopic_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CastleService_deleteTopic_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CastleService_deleteTopic_pargs {
 public:


  virtual ~CastleService_deleteTopic_pargs() throw() {}

  const TopicConfigRequest* topicConfigRequest;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CastleService_deleteTopic_result__isset {
  _CastleService_deleteTopic_result__isset() : success(false) {}
  bool success;
} _CastleService_deleteTopic_result__isset;

class CastleService_deleteTopic_result {
 public:

  CastleService_deleteTopic_result() {
  }

  virtual ~CastleService_deleteTopic_result() throw() {}

  TopicActionResponse success;

  _CastleService_deleteTopic_result__isset __isset;

  void __set_success(const TopicActionResponse& val) {
    success = val;
  }

  bool operator == (const CastleService_deleteTopic_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CastleService_deleteTopic_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CastleService_deleteTopic_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CastleService_deleteTopic_presult__isset {
  _CastleService_deleteTopic_presult__isset() : success(false) {}
  bool success;
} _CastleService_deleteTopic_presult__isset;

class CastleService_deleteTopic_presult {
 public:


  virtual ~CastleService_deleteTopic_presult() throw() {}

  TopicActionResponse* success;

  _CastleService_deleteTopic_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CastleService_getTopicInfo_args__isset {
  _CastleService_getTopicInfo_args__isset() : topicConfigRequest(false) {}
  bool topicConfigRequest;
} _CastleService_getTopicInfo_args__isset;

class CastleService_getTopicInfo_args {
 public:

  CastleService_getTopicInfo_args() {
  }

  virtual ~CastleService_getTopicInfo_args() throw() {}

  TopicConfigRequest topicConfigRequest;

  _CastleService_getTopicInfo_args__isset __isset;

  void __set_topicConfigRequest(const TopicConfigRequest& val) {
    topicConfigRequest = val;
  }

  bool operator == (const CastleService_getTopicInfo_args & rhs) const
  {
    if (!(topicConfigRequest == rhs.topicConfigRequest))
      return false;
    return true;
  }
  bool operator != (const CastleService_getTopicInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CastleService_getTopicInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CastleService_getTopicInfo_pargs {
 public:


  virtual ~CastleService_getTopicInfo_pargs() throw() {}

  const TopicConfigRequest* topicConfigRequest;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CastleService_getTopicInfo_result__isset {
  _CastleService_getTopicInfo_result__isset() : success(false) {}
  bool success;
} _CastleService_getTopicInfo_result__isset;

class CastleService_getTopicInfo_result {
 public:

  CastleService_getTopicInfo_result() {
  }

  virtual ~CastleService_getTopicInfo_result() throw() {}

  TopicInfoResponse success;

  _CastleService_getTopicInfo_result__isset __isset;

  void __set_success(const TopicInfoResponse& val) {
    success = val;
  }

  bool operator == (const CastleService_getTopicInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CastleService_getTopicInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CastleService_getTopicInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CastleService_getTopicInfo_presult__isset {
  _CastleService_getTopicInfo_presult__isset() : success(false) {}
  bool success;
} _CastleService_getTopicInfo_presult__isset;

class CastleService_getTopicInfo_presult {
 public:


  virtual ~CastleService_getTopicInfo_presult() throw() {}

  TopicInfoResponse* success;

  _CastleService_getTopicInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CastleService_createConsumerGroup_args__isset {
  _CastleService_createConsumerGroup_args__isset() : consumerGroupConfigRequest(false) {}
  bool consumerGroupConfigRequest;
} _CastleService_createConsumerGroup_args__isset;

class CastleService_createConsumerGroup_args {
 public:

  CastleService_createConsumerGroup_args() {
  }

  virtual ~CastleService_createConsumerGroup_args() throw() {}

  ConsumerGroupConfigRequest consumerGroupConfigRequest;

  _CastleService_createConsumerGroup_args__isset __isset;

  void __set_consumerGroupConfigRequest(const ConsumerGroupConfigRequest& val) {
    consumerGroupConfigRequest = val;
  }

  bool operator == (const CastleService_createConsumerGroup_args & rhs) const
  {
    if (!(consumerGroupConfigRequest == rhs.consumerGroupConfigRequest))
      return false;
    return true;
  }
  bool operator != (const CastleService_createConsumerGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CastleService_createConsumerGroup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CastleService_createConsumerGroup_pargs {
 public:


  virtual ~CastleService_createConsumerGroup_pargs() throw() {}

  const ConsumerGroupConfigRequest* consumerGroupConfigRequest;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CastleService_createConsumerGroup_result__isset {
  _CastleService_createConsumerGroup_result__isset() : success(false) {}
  bool success;
} _CastleService_createConsumerGroup_result__isset;

class CastleService_createConsumerGroup_result {
 public:

  CastleService_createConsumerGroup_result() {
  }

  virtual ~CastleService_createConsumerGroup_result() throw() {}

  ConsumerGroupInfoResponse success;

  _CastleService_createConsumerGroup_result__isset __isset;

  void __set_success(const ConsumerGroupInfoResponse& val) {
    success = val;
  }

  bool operator == (const CastleService_createConsumerGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CastleService_createConsumerGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CastleService_createConsumerGroup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CastleService_createConsumerGroup_presult__isset {
  _CastleService_createConsumerGroup_presult__isset() : success(false) {}
  bool success;
} _CastleService_createConsumerGroup_presult__isset;

class CastleService_createConsumerGroup_presult {
 public:


  virtual ~CastleService_createConsumerGroup_presult() throw() {}

  ConsumerGroupInfoResponse* success;

  _CastleService_createConsumerGroup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CastleService_updateConsumerGroup_args__isset {
  _CastleService_updateConsumerGroup_args__isset() : consumerGroupConfigRequest(false) {}
  bool consumerGroupConfigRequest;
} _CastleService_updateConsumerGroup_args__isset;

class CastleService_updateConsumerGroup_args {
 public:

  CastleService_updateConsumerGroup_args() {
  }

  virtual ~CastleService_updateConsumerGroup_args() throw() {}

  ConsumerGroupConfigRequest consumerGroupConfigRequest;

  _CastleService_updateConsumerGroup_args__isset __isset;

  void __set_consumerGroupConfigRequest(const ConsumerGroupConfigRequest& val) {
    consumerGroupConfigRequest = val;
  }

  bool operator == (const CastleService_updateConsumerGroup_args & rhs) const
  {
    if (!(consumerGroupConfigRequest == rhs.consumerGroupConfigRequest))
      return false;
    return true;
  }
  bool operator != (const CastleService_updateConsumerGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CastleService_updateConsumerGroup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CastleService_updateConsumerGroup_pargs {
 public:


  virtual ~CastleService_updateConsumerGroup_pargs() throw() {}

  const ConsumerGroupConfigRequest* consumerGroupConfigRequest;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CastleService_updateConsumerGroup_result__isset {
  _CastleService_updateConsumerGroup_result__isset() : success(false) {}
  bool success;
} _CastleService_updateConsumerGroup_result__isset;

class CastleService_updateConsumerGroup_result {
 public:

  CastleService_updateConsumerGroup_result() {
  }

  virtual ~CastleService_updateConsumerGroup_result() throw() {}

  ConsumerGroupInfoResponse success;

  _CastleService_updateConsumerGroup_result__isset __isset;

  void __set_success(const ConsumerGroupInfoResponse& val) {
    success = val;
  }

  bool operator == (const CastleService_updateConsumerGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CastleService_updateConsumerGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CastleService_updateConsumerGroup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CastleService_updateConsumerGroup_presult__isset {
  _CastleService_updateConsumerGroup_presult__isset() : success(false) {}
  bool success;
} _CastleService_updateConsumerGroup_presult__isset;

class CastleService_updateConsumerGroup_presult {
 public:


  virtual ~CastleService_updateConsumerGroup_presult() throw() {}

  ConsumerGroupInfoResponse* success;

  _CastleService_updateConsumerGroup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CastleService_deleteConsumerGroup_args__isset {
  _CastleService_deleteConsumerGroup_args__isset() : consumerGroupConfigRequest(false) {}
  bool consumerGroupConfigRequest;
} _CastleService_deleteConsumerGroup_args__isset;

class CastleService_deleteConsumerGroup_args {
 public:

  CastleService_deleteConsumerGroup_args() {
  }

  virtual ~CastleService_deleteConsumerGroup_args() throw() {}

  ConsumerGroupConfigRequest consumerGroupConfigRequest;

  _CastleService_deleteConsumerGroup_args__isset __isset;

  void __set_consumerGroupConfigRequest(const ConsumerGroupConfigRequest& val) {
    consumerGroupConfigRequest = val;
  }

  bool operator == (const CastleService_deleteConsumerGroup_args & rhs) const
  {
    if (!(consumerGroupConfigRequest == rhs.consumerGroupConfigRequest))
      return false;
    return true;
  }
  bool operator != (const CastleService_deleteConsumerGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CastleService_deleteConsumerGroup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CastleService_deleteConsumerGroup_pargs {
 public:


  virtual ~CastleService_deleteConsumerGroup_pargs() throw() {}

  const ConsumerGroupConfigRequest* consumerGroupConfigRequest;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CastleService_deleteConsumerGroup_result__isset {
  _CastleService_deleteConsumerGroup_result__isset() : success(false) {}
  bool success;
} _CastleService_deleteConsumerGroup_result__isset;

class CastleService_deleteConsumerGroup_result {
 public:

  CastleService_deleteConsumerGroup_result() {
  }

  virtual ~CastleService_deleteConsumerGroup_result() throw() {}

  ConsumerGroupInfoResponse success;

  _CastleService_deleteConsumerGroup_result__isset __isset;

  void __set_success(const ConsumerGroupInfoResponse& val) {
    success = val;
  }

  bool operator == (const CastleService_deleteConsumerGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CastleService_deleteConsumerGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CastleService_deleteConsumerGroup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CastleService_deleteConsumerGroup_presult__isset {
  _CastleService_deleteConsumerGroup_presult__isset() : success(false) {}
  bool success;
} _CastleService_deleteConsumerGroup_presult__isset;

class CastleService_deleteConsumerGroup_presult {
 public:


  virtual ~CastleService_deleteConsumerGroup_presult() throw() {}

  ConsumerGroupInfoResponse* success;

  _CastleService_deleteConsumerGroup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CastleService_getConsumerGroupInfo_args__isset {
  _CastleService_getConsumerGroupInfo_args__isset() : consumerGroupConfigRequest(false) {}
  bool consumerGroupConfigRequest;
} _CastleService_getConsumerGroupInfo_args__isset;

class CastleService_getConsumerGroupInfo_args {
 public:

  CastleService_getConsumerGroupInfo_args() {
  }

  virtual ~CastleService_getConsumerGroupInfo_args() throw() {}

  ConsumerGroupConfigRequest consumerGroupConfigRequest;

  _CastleService_getConsumerGroupInfo_args__isset __isset;

  void __set_consumerGroupConfigRequest(const ConsumerGroupConfigRequest& val) {
    consumerGroupConfigRequest = val;
  }

  bool operator == (const CastleService_getConsumerGroupInfo_args & rhs) const
  {
    if (!(consumerGroupConfigRequest == rhs.consumerGroupConfigRequest))
      return false;
    return true;
  }
  bool operator != (const CastleService_getConsumerGroupInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CastleService_getConsumerGroupInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CastleService_getConsumerGroupInfo_pargs {
 public:


  virtual ~CastleService_getConsumerGroupInfo_pargs() throw() {}

  const ConsumerGroupConfigRequest* consumerGroupConfigRequest;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CastleService_getConsumerGroupInfo_result__isset {
  _CastleService_getConsumerGroupInfo_result__isset() : success(false) {}
  bool success;
} _CastleService_getConsumerGroupInfo_result__isset;

class CastleService_getConsumerGroupInfo_result {
 public:

  CastleService_getConsumerGroupInfo_result() {
  }

  virtual ~CastleService_getConsumerGroupInfo_result() throw() {}

  ConsumerGroupInfoResponse success;

  _CastleService_getConsumerGroupInfo_result__isset __isset;

  void __set_success(const ConsumerGroupInfoResponse& val) {
    success = val;
  }

  bool operator == (const CastleService_getConsumerGroupInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CastleService_getConsumerGroupInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CastleService_getConsumerGroupInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CastleService_getConsumerGroupInfo_presult__isset {
  _CastleService_getConsumerGroupInfo_presult__isset() : success(false) {}
  bool success;
} _CastleService_getConsumerGroupInfo_presult__isset;

class CastleService_getConsumerGroupInfo_presult {
 public:


  virtual ~CastleService_getConsumerGroupInfo_presult() throw() {}

  ConsumerGroupInfoResponse* success;

  _CastleService_getConsumerGroupInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CastleService_getClusterTopicAllInfo_args__isset {
  _CastleService_getClusterTopicAllInfo_args__isset() : clusterNameRequest(false) {}
  bool clusterNameRequest;
} _CastleService_getClusterTopicAllInfo_args__isset;

class CastleService_getClusterTopicAllInfo_args {
 public:

  CastleService_getClusterTopicAllInfo_args() {
  }

  virtual ~CastleService_getClusterTopicAllInfo_args() throw() {}

  ClusterNameRequest clusterNameRequest;

  _CastleService_getClusterTopicAllInfo_args__isset __isset;

  void __set_clusterNameRequest(const ClusterNameRequest& val) {
    clusterNameRequest = val;
  }

  bool operator == (const CastleService_getClusterTopicAllInfo_args & rhs) const
  {
    if (!(clusterNameRequest == rhs.clusterNameRequest))
      return false;
    return true;
  }
  bool operator != (const CastleService_getClusterTopicAllInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CastleService_getClusterTopicAllInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CastleService_getClusterTopicAllInfo_pargs {
 public:


  virtual ~CastleService_getClusterTopicAllInfo_pargs() throw() {}

  const ClusterNameRequest* clusterNameRequest;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CastleService_getClusterTopicAllInfo_result__isset {
  _CastleService_getClusterTopicAllInfo_result__isset() : success(false) {}
  bool success;
} _CastleService_getClusterTopicAllInfo_result__isset;

class CastleService_getClusterTopicAllInfo_result {
 public:

  CastleService_getClusterTopicAllInfo_result() {
  }

  virtual ~CastleService_getClusterTopicAllInfo_result() throw() {}

  TopicInfoListResponse success;

  _CastleService_getClusterTopicAllInfo_result__isset __isset;

  void __set_success(const TopicInfoListResponse& val) {
    success = val;
  }

  bool operator == (const CastleService_getClusterTopicAllInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CastleService_getClusterTopicAllInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CastleService_getClusterTopicAllInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CastleService_getClusterTopicAllInfo_presult__isset {
  _CastleService_getClusterTopicAllInfo_presult__isset() : success(false) {}
  bool success;
} _CastleService_getClusterTopicAllInfo_presult__isset;

class CastleService_getClusterTopicAllInfo_presult {
 public:


  virtual ~CastleService_getClusterTopicAllInfo_presult() throw() {}

  TopicInfoListResponse* success;

  _CastleService_getClusterTopicAllInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CastleService_getClusterGroupAllInfo_args__isset {
  _CastleService_getClusterGroupAllInfo_args__isset() : clusterNameRequest(false) {}
  bool clusterNameRequest;
} _CastleService_getClusterGroupAllInfo_args__isset;

class CastleService_getClusterGroupAllInfo_args {
 public:

  CastleService_getClusterGroupAllInfo_args() {
  }

  virtual ~CastleService_getClusterGroupAllInfo_args() throw() {}

  ClusterNameRequest clusterNameRequest;

  _CastleService_getClusterGroupAllInfo_args__isset __isset;

  void __set_clusterNameRequest(const ClusterNameRequest& val) {
    clusterNameRequest = val;
  }

  bool operator == (const CastleService_getClusterGroupAllInfo_args & rhs) const
  {
    if (!(clusterNameRequest == rhs.clusterNameRequest))
      return false;
    return true;
  }
  bool operator != (const CastleService_getClusterGroupAllInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CastleService_getClusterGroupAllInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CastleService_getClusterGroupAllInfo_pargs {
 public:


  virtual ~CastleService_getClusterGroupAllInfo_pargs() throw() {}

  const ClusterNameRequest* clusterNameRequest;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CastleService_getClusterGroupAllInfo_result__isset {
  _CastleService_getClusterGroupAllInfo_result__isset() : success(false) {}
  bool success;
} _CastleService_getClusterGroupAllInfo_result__isset;

class CastleService_getClusterGroupAllInfo_result {
 public:

  CastleService_getClusterGroupAllInfo_result() {
  }

  virtual ~CastleService_getClusterGroupAllInfo_result() throw() {}

  ConsumerGroupListResponse success;

  _CastleService_getClusterGroupAllInfo_result__isset __isset;

  void __set_success(const ConsumerGroupListResponse& val) {
    success = val;
  }

  bool operator == (const CastleService_getClusterGroupAllInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CastleService_getClusterGroupAllInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CastleService_getClusterGroupAllInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CastleService_getClusterGroupAllInfo_presult__isset {
  _CastleService_getClusterGroupAllInfo_presult__isset() : success(false) {}
  bool success;
} _CastleService_getClusterGroupAllInfo_presult__isset;

class CastleService_getClusterGroupAllInfo_presult {
 public:


  virtual ~CastleService_getClusterGroupAllInfo_presult() throw() {}

  ConsumerGroupListResponse* success;

  _CastleService_getClusterGroupAllInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CastleServiceClient : virtual public CastleServiceIf {
 public:
  CastleServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  CastleServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getHeartBeat(HeartBeatResponse& _return, const HeartBeatRequest& heartBeatRequest);
  void send_getHeartBeat(const HeartBeatRequest& heartBeatRequest);
  void recv_getHeartBeat(HeartBeatResponse& _return);
  void getClientInfo(ClientInfoResponse& _return, const ClientInfoRequest& clientInfoRequest);
  void send_getClientInfo(const ClientInfoRequest& clientInfoRequest);
  void recv_getClientInfo(ClientInfoResponse& _return);
  void createTopic(TopicActionResponse& _return, const TopicConfigRequest& topicConfigRequest);
  void send_createTopic(const TopicConfigRequest& topicConfigRequest);
  void recv_createTopic(TopicActionResponse& _return);
  void updateTopic(TopicActionResponse& _return, const TopicConfigRequest& topicConfigRequest);
  void send_updateTopic(const TopicConfigRequest& topicConfigRequest);
  void recv_updateTopic(TopicActionResponse& _return);
  void deleteTopic(TopicActionResponse& _return, const TopicConfigRequest& topicConfigRequest);
  void send_deleteTopic(const TopicConfigRequest& topicConfigRequest);
  void recv_deleteTopic(TopicActionResponse& _return);
  void getTopicInfo(TopicInfoResponse& _return, const TopicConfigRequest& topicConfigRequest);
  void send_getTopicInfo(const TopicConfigRequest& topicConfigRequest);
  void recv_getTopicInfo(TopicInfoResponse& _return);
  void createConsumerGroup(ConsumerGroupInfoResponse& _return, const ConsumerGroupConfigRequest& consumerGroupConfigRequest);
  void send_createConsumerGroup(const ConsumerGroupConfigRequest& consumerGroupConfigRequest);
  void recv_createConsumerGroup(ConsumerGroupInfoResponse& _return);
  void updateConsumerGroup(ConsumerGroupInfoResponse& _return, const ConsumerGroupConfigRequest& consumerGroupConfigRequest);
  void send_updateConsumerGroup(const ConsumerGroupConfigRequest& consumerGroupConfigRequest);
  void recv_updateConsumerGroup(ConsumerGroupInfoResponse& _return);
  void deleteConsumerGroup(ConsumerGroupInfoResponse& _return, const ConsumerGroupConfigRequest& consumerGroupConfigRequest);
  void send_deleteConsumerGroup(const ConsumerGroupConfigRequest& consumerGroupConfigRequest);
  void recv_deleteConsumerGroup(ConsumerGroupInfoResponse& _return);
  void getConsumerGroupInfo(ConsumerGroupInfoResponse& _return, const ConsumerGroupConfigRequest& consumerGroupConfigRequest);
  void send_getConsumerGroupInfo(const ConsumerGroupConfigRequest& consumerGroupConfigRequest);
  void recv_getConsumerGroupInfo(ConsumerGroupInfoResponse& _return);
  void getClusterTopicAllInfo(TopicInfoListResponse& _return, const ClusterNameRequest& clusterNameRequest);
  void send_getClusterTopicAllInfo(const ClusterNameRequest& clusterNameRequest);
  void recv_getClusterTopicAllInfo(TopicInfoListResponse& _return);
  void getClusterGroupAllInfo(ConsumerGroupListResponse& _return, const ClusterNameRequest& clusterNameRequest);
  void send_getClusterGroupAllInfo(const ClusterNameRequest& clusterNameRequest);
  void recv_getClusterGroupAllInfo(ConsumerGroupListResponse& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CastleServiceProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<CastleServiceIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (CastleServiceProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_getHeartBeat(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getClientInfo(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createTopic(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateTopic(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteTopic(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTopicInfo(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createConsumerGroup(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateConsumerGroup(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteConsumerGroup(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getConsumerGroupInfo(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getClusterTopicAllInfo(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getClusterGroupAllInfo(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CastleServiceProcessor(boost::shared_ptr<CastleServiceIf> iface) :
    iface_(iface) {
    processMap_["getHeartBeat"] = &CastleServiceProcessor::process_getHeartBeat;
    processMap_["getClientInfo"] = &CastleServiceProcessor::process_getClientInfo;
    processMap_["createTopic"] = &CastleServiceProcessor::process_createTopic;
    processMap_["updateTopic"] = &CastleServiceProcessor::process_updateTopic;
    processMap_["deleteTopic"] = &CastleServiceProcessor::process_deleteTopic;
    processMap_["getTopicInfo"] = &CastleServiceProcessor::process_getTopicInfo;
    processMap_["createConsumerGroup"] = &CastleServiceProcessor::process_createConsumerGroup;
    processMap_["updateConsumerGroup"] = &CastleServiceProcessor::process_updateConsumerGroup;
    processMap_["deleteConsumerGroup"] = &CastleServiceProcessor::process_deleteConsumerGroup;
    processMap_["getConsumerGroupInfo"] = &CastleServiceProcessor::process_getConsumerGroupInfo;
    processMap_["getClusterTopicAllInfo"] = &CastleServiceProcessor::process_getClusterTopicAllInfo;
    processMap_["getClusterGroupAllInfo"] = &CastleServiceProcessor::process_getClusterGroupAllInfo;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~CastleServiceProcessor() {}
};

class CastleServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CastleServiceProcessorFactory(const ::boost::shared_ptr< CastleServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CastleServiceIfFactory > handlerFactory_;
};

class CastleServiceMultiface : virtual public CastleServiceIf {
 public:
  CastleServiceMultiface(std::vector<boost::shared_ptr<CastleServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CastleServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CastleServiceIf> > ifaces_;
  CastleServiceMultiface() {}
  void add(boost::shared_ptr<CastleServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getHeartBeat(HeartBeatResponse& _return, const HeartBeatRequest& heartBeatRequest) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getHeartBeat(_return, heartBeatRequest);
        return;
      } else {
        ifaces_[i]->getHeartBeat(_return, heartBeatRequest);
      }
    }
  }

  void getClientInfo(ClientInfoResponse& _return, const ClientInfoRequest& clientInfoRequest) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getClientInfo(_return, clientInfoRequest);
        return;
      } else {
        ifaces_[i]->getClientInfo(_return, clientInfoRequest);
      }
    }
  }

  void createTopic(TopicActionResponse& _return, const TopicConfigRequest& topicConfigRequest) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->createTopic(_return, topicConfigRequest);
        return;
      } else {
        ifaces_[i]->createTopic(_return, topicConfigRequest);
      }
    }
  }

  void updateTopic(TopicActionResponse& _return, const TopicConfigRequest& topicConfigRequest) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->updateTopic(_return, topicConfigRequest);
        return;
      } else {
        ifaces_[i]->updateTopic(_return, topicConfigRequest);
      }
    }
  }

  void deleteTopic(TopicActionResponse& _return, const TopicConfigRequest& topicConfigRequest) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->deleteTopic(_return, topicConfigRequest);
        return;
      } else {
        ifaces_[i]->deleteTopic(_return, topicConfigRequest);
      }
    }
  }

  void getTopicInfo(TopicInfoResponse& _return, const TopicConfigRequest& topicConfigRequest) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getTopicInfo(_return, topicConfigRequest);
        return;
      } else {
        ifaces_[i]->getTopicInfo(_return, topicConfigRequest);
      }
    }
  }

  void createConsumerGroup(ConsumerGroupInfoResponse& _return, const ConsumerGroupConfigRequest& consumerGroupConfigRequest) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->createConsumerGroup(_return, consumerGroupConfigRequest);
        return;
      } else {
        ifaces_[i]->createConsumerGroup(_return, consumerGroupConfigRequest);
      }
    }
  }

  void updateConsumerGroup(ConsumerGroupInfoResponse& _return, const ConsumerGroupConfigRequest& consumerGroupConfigRequest) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->updateConsumerGroup(_return, consumerGroupConfigRequest);
        return;
      } else {
        ifaces_[i]->updateConsumerGroup(_return, consumerGroupConfigRequest);
      }
    }
  }

  void deleteConsumerGroup(ConsumerGroupInfoResponse& _return, const ConsumerGroupConfigRequest& consumerGroupConfigRequest) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->deleteConsumerGroup(_return, consumerGroupConfigRequest);
        return;
      } else {
        ifaces_[i]->deleteConsumerGroup(_return, consumerGroupConfigRequest);
      }
    }
  }

  void getConsumerGroupInfo(ConsumerGroupInfoResponse& _return, const ConsumerGroupConfigRequest& consumerGroupConfigRequest) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getConsumerGroupInfo(_return, consumerGroupConfigRequest);
        return;
      } else {
        ifaces_[i]->getConsumerGroupInfo(_return, consumerGroupConfigRequest);
      }
    }
  }

  void getClusterTopicAllInfo(TopicInfoListResponse& _return, const ClusterNameRequest& clusterNameRequest) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getClusterTopicAllInfo(_return, clusterNameRequest);
        return;
      } else {
        ifaces_[i]->getClusterTopicAllInfo(_return, clusterNameRequest);
      }
    }
  }

  void getClusterGroupAllInfo(ConsumerGroupListResponse& _return, const ClusterNameRequest& clusterNameRequest) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getClusterGroupAllInfo(_return, clusterNameRequest);
        return;
      } else {
        ifaces_[i]->getClusterGroupAllInfo(_return, clusterNameRequest);
      }
    }
  }

};



#endif
