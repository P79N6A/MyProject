cmake_minimum_required(VERSION 2.6)

project(cthrift C CXX)

IF(ENABLE_COVERAGE)
SET(CMAKE_CXX_FLAGS "-g -Wall -O0 -fPIC -DMUDUO_STD_STRING -DHAVE_NETINET_IN_H")
ELSE()
SET(CMAKE_CXX_FLAGS "-g -Wall -O2 -fPIC -DMUDUO_STD_STRING -DHAVE_NETINET_IN_H")
ENDIF()
#SET(CMAKE_CXX_FLAGS "-g -Wall -O0 -fPIC -fprofile-arcs -ftest-coverage -DMUDUO_STD_STRING -DHAVE_NETINET_IN_H")
#set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS}  -fprofile-arcs -ftest-coverage-lgcov")

MESSAGE(STATUS "CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS}")

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake")
MESSAGE(STATUS "CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH}")

IF(ENABLE_COVERAGE)
    include(CodeCoverage)
	APPEND_COVERAGE_COMPILER_FLAGS()
ENDIF()

SET(MEITUAN_THRID_INCLUDE_PATH /opt/meituan/)
SET(KMS_LIB_INCLUDE_PATH /opt/meituan/kms/include)
SET(KMS_LIB_PATH /opt/meituan/kms/lib)

SET(CTHRIFT_SRC_PATH ${CMAKE_SOURCE_DIR}/src)
MESSAGE(STATUS "CTHRIFT_SRC_PATH ${CTHRIFT_SRC_PATH}")

SET(COMMON_LIB_PATH ${CMAKE_SOURCE_DIR}/../../common/cpp/lib)
MESSAGE(STATUS "COMMON_LIB_PATH ${COMMON_LIB_PATH}")

SET(THIRD_MODULE_PATH ${CMAKE_SOURCE_DIR}/module)
MESSAGE(STATUS "THIRD_MODULE_PATH ${THIRD_MODULE_PATH}")

SET(OCTO_IDL_PATH ${CMAKE_SOURCE_DIR}/../../common/idl)
MESSAGE(STATUS "OCTO_IDL_PATH ${OCTO_IDL_PATH}")


SET(CMTRACE_SRC_PATH ${CMAKE_SOURCE_DIR}/../../mtrace/cmtrace)
MESSAGE(STATUS "CMTRACE_SRC_PATH ${CMTRACE_SRC_PATH}")

SET(CMTRACE_INCLUDE_PATH ${CMTRACE_SRC_PATH}/mtrace/include/)
MESSAGE(STATUS "CMTRACE_INCLUDE_PATH ${CMTRACE_INCLUDE_PATH}")

SET(CLOG_SRC_PATH ${CMAKE_SOURCE_DIR}/../../cmdlog/clog)
MESSAGE(STATUS "CLOG_SRC_PATH ${CLOG_SRC_PATH}")

SET(CLOG_INCLUDE_PATH ${CLOG_SRC_PATH}/include)
MESSAGE(STATUS "CLOG_INCLUDE_PATH ${CLOG_INCLUDE_PATH}")

SET(TEMP_THRID_PATH ${CMAKE_SOURCE_DIR}/temp/)
MESSAGE(STATUS "TEMP_THRID_PATH ${TEMP_THRID_PATH}")

SET(TEMP_THRID_CMTRACE_PATH ${CMAKE_SOURCE_DIR}/temp/cmtraceV2)
MESSAGE(STATUS "TEMP_THRID_CMTRACE_PATH ${TEMP_THRID_CMTRACE_PATH}")

SET(TEMP_THRID_CLOG_PATH ${CMAKE_SOURCE_DIR}/temp/clog)
MESSAGE(STATUS "TEMP_THRID_CLOG_PATH ${TEMP_THRID_CLOG_PATH}")

SET(OCTOIDL_SRC_PATH ${CMAKE_SOURCE_DIR}/thrid/octoidl)
MESSAGE(STATUS "OCTOIDL_SRC_PATH ${OCTOIDL_SRC_PATH}")

#for output
EXECUTE_PROCESS(COMMAND mkdir ${CMAKE_SOURCE_DIR}/build)
SET(CMAKE_INSTALL_PREFIX ${CMAKE_SOURCE_DIR}/build)
MESSAGE(STATUS "CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX}")

EXECUTE_PROCESS(COMMAND mkdir ${CMAKE_INSTALL_PREFIX}/include)
SET(INCLUDE_OUTPUT_PATH ${CMAKE_INSTALL_PREFIX}/include)
MESSAGE(STATUS "INCLUDE_OUTPUT_PATH ${INCLUDE_OUTPUT_PATH}")

EXECUTE_PROCESS(COMMAND mkdir ${CMAKE_INSTALL_PREFIX}/lib)
SET(LIBRARY_OUTPUT_PATH ${CMAKE_INSTALL_PREFIX}/lib)
MESSAGE(STATUS "LIBRARY_OUTPUT_PATH ${LIBRARY_OUTPUT_PATH}")

#default binary and lib path
SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_INSTALL_PREFIX}/bin)

EXECUTE_PROCESS(COMMAND mkdir ${CMAKE_INSTALL_PREFIX}/example)
SET(EXAMPLE_CTHRIFTf_OUTPUT_PATH ${CMAKE_INSTALL_PREFIX}/example)
MESSAGE(STATUS "EXAMPLE_CTHRIFT_OUTPUT_PATH ${EXAMPLE_CTHRIFT_OUTPUT_PATH}")

#will check exist when build example, so NO default mkdir
SET(INCLUDE_ECHO_OUTPUT_PATH ${INCLUDE_OUTPUT_PATH}/echo)
MESSAGE(STATUS "INCLUDE_ECHO_OUTPUT_PATH ${INCLUDE_ECHO_OUTPUT_PATH}")

EXECUTE_PROCESS(COMMAND rm -rf ${INCLUDE_OUTPUT_PATH}/cthrift/*)
EXECUTE_PROCESS(COMMAND mkdir ${INCLUDE_OUTPUT_PATH}/cthrift)
SET(INCLUDE_CTHRIFT_OUTPUT_PATH ${INCLUDE_OUTPUT_PATH}/cthrift)
MESSAGE(STATUS "INCLUDE_CTHRIFT_OUTPUT_PATH ${INCLUDE_CTHRIFT_OUTPUT_PATH}")

EXECUTE_PROCESS(COMMAND mkdir ${INCLUDE_OUTPUT_PATH}/cthrift/mns_sdk)
SET(INCLUDE_MNS_OUTPUT_PATH ${INCLUDE_OUTPUT_PATH}/cthrift/mns_sdk)
MESSAGE(STATUS "INCLUDE_MNS_OUTPUT_PATH ${INCLUDE_MNS_OUTPUT_PATH}")

EXECUTE_PROCESS(COMMAND mkdir ${INCLUDE_OUTPUT_PATH}/cthrift/uniform)
SET(INCLUDE_UNIFORM_OUTPUT_PATH ${INCLUDE_OUTPUT_PATH}/cthrift/uniform)
MESSAGE(STATUS "INCLUDE_UNIFORM_OUTPUT_PATH ${INCLUDE_UNIFORM_OUTPUT_PATH}")

EXECUTE_PROCESS(COMMAND mkdir ${INCLUDE_OUTPUT_PATH}/cthrift/mcc_sdk)
SET(INCLUDE_MCC_OUTPUT_PATH ${INCLUDE_OUTPUT_PATH}/cthrift/mcc_sdk)
MESSAGE(STATUS "INCLUDE_MCC_OUTPUT_PATH ${INCLUDE_MCC_OUTPUT_PATH}")

SET(INCLUDE_OCTOIDL_OUTPUT_PATH ${INCLUDE_OUTPUT_PATH}/octoidl)
MESSAGE(STATUS "INCLUDE_OCTOIDL_OUTPUT_PATH ${INCLUDE_OCTOIDL_OUTPUT_PATH}")
EXECUTE_PROCESS(COMMAND mkdir ${INCLUDE_OCTOIDL_OUTPUT_PATH})

EXECUTE_PROCESS(COMMAND thrift  --gen cpp ${OCTO_IDL_PATH}/idl-sgagent/src/main/thrift/sgagent_service.thrift WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

EXECUTE_PROCESS(COMMAND thrift  --gen cpp ${OCTO_IDL_PATH}/idl-sgagent/src/main/thrift/sgagent_worker_service.thrift WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

EXECUTE_PROCESS(COMMAND thrift  --gen cpp ${OCTO_IDL_PATH}/idl-common/src/main/thrift/sgagent_common.thrift WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

EXECUTE_PROCESS(COMMAND thrift  --gen cpp ${OCTO_IDL_PATH}/idl-common/src/main/thrift/config_common.thrift WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

EXECUTE_PROCESS(COMMAND thrift  --gen cpp ${OCTO_IDL_PATH}/idl-common/src/main/thrift/quota_common.thrift WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

EXECUTE_PROCESS(COMMAND thrift  --gen cpp ${OCTO_IDL_PATH}/idl-common/src/main/thrift/aggregator_common.thrift WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

EXECUTE_PROCESS(COMMAND thrift  --gen cpp ${OCTO_IDL_PATH}/idl-common/src/main/thrift/appkey.thrift WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})



MESSAGE("CMAKE_CURRENT_SOURCE_DIR = ${CMAKE_CURRENT_SOURCE_DIR}")

EXECUTE_PROCESS(COMMAND find ${CMAKE_SOURCE_DIR}/gen-cpp -name *.h -exec cp -t ${OCTOIDL_SRC_PATH} {} \;)
EXECUTE_PROCESS(COMMAND find ${CMAKE_SOURCE_DIR}/gen-cpp -name *.cpp -exec cp -t ${OCTOIDL_SRC_PATH} {} \;)

execute_process(COMMAND rm -rf  ${CMAKE_SOURCE_DIR}/gen-cpp)


# check exist TODO how to use find_package check?
FIND_PACKAGE(Boost REQUIRED)
MESSAGE(STATUS "Boost_INCLUDE_DIR ${Boost_INCLUDE_DIR}")
MESSAGE(STATUS "Boost_LIBRARIES ${Boost_LIBRARY_DIRS}")

#FIND_PACKAGE(Thrift REQUIRED)
#FIND_PACKAGE(Muduo REQUIRED)
#FIND_PACKAGE(Cthrift REQUIRED)

# find rapidjson libraries
FIND_PACKAGE(Rapidjson REQUIRED)
MESSAGE(STATUS "RAPIDJSON_INCLUDE_DIR ${RAPIDJSON_INCLUDE_DIR}")

# find gtest libraries
FIND_PACKAGE(Gtest REQUIRED)
MESSAGE(STATUS "GTEST_INCLUDE_DIR ${GTEST_INCLUDE_DIR}")
MESSAGE(STATUS "GTEST_LIBRARY ${GTEST_LIBRARY}")
MESSAGE(STATUS "GTEST_MOCK_LIBRARY ${GTEST_MOCK_LIBRARY}")

# find cmtrace libraries
#FIND_PACKAGE(Cmtrace REQUIRED)
#MESSAGE(STATUS "CMTRACE_INCLUDE_DIR ${CMTRACE_INCLUDE_DIR}")
#MESSAGE(STATUS "CMTRACE_LIBRARY ${CMTRACE_LIBRARY}")

# find cat libraries
#FIND_PACKAGE(Cat REQUIRED)
#MESSAGE(STATUS "CAT_INCLUDE_DIR ${CAT_INCLUDE_DIR}")
#MESSAGE(STATUS "CAT_LIBRARY ${CAT_LIBRARY}")
EXECUTE_PROCESS(COMMAND mkdir ${INCLUDE_OUTPUT_PATH}/cmtraceV2)
EXECUTE_PROCESS(COMMAND find ${CMTRACE_INCLUDE_PATH} -name *.h -exec cp -t ${INCLUDE_OUTPUT_PATH}/cmtraceV2/ {} \;)

EXECUTE_PROCESS(COMMAND mkdir ${INCLUDE_OUTPUT_PATH}/clog)
EXECUTE_PROCESS(COMMAND find ${CLOG_INCLUDE_PATH}/clog -name *.h -exec cp -t ${INCLUDE_OUTPUT_PATH}/clog/ {} \;)

EXECUTE_PROCESS(COMMAND mkdir ${INCLUDE_OUTPUT_PATH}/log4cplus)
EXECUTE_PROCESS(COMMAND find ${CLOG_INCLUDE_PATH}/log4cplus -name *.h -exec cp -t ${INCLUDE_OUTPUT_PATH}/log4cplus/ {} \;)

EXECUTE_PROCESS(COMMAND mkdir ${INCLUDE_OUTPUT_PATH}/octoidl)
EXECUTE_PROCESS(COMMAND find ${OCTOIDL_SRC_PATH} -name *.h -exec cp -t ${INCLUDE_OUTPUT_PATH}/octoidl/ {} \;)

MESSAGE(STATUS "TEMP_THRID_CLOG_PATH ${TEMP_THRID_CLOG_PATH}")

EXECUTE_PROCESS(COMMAND mkdir -p ${TEMP_THRID_CMTRACE_PATH})
EXECUTE_PROCESS(COMMAND mkdir -p  ${TEMP_THRID_CLOG_PATH})

INCLUDE_DIRECTORIES(system ${INCLUDE_OUTPUT_PATH})

ADD_SUBDIRECTORY(${CMTRACE_SRC_PATH} ${TEMP_THRID_CMTRACE_PATH})

ADD_SUBDIRECTORY(${CLOG_SRC_PATH} ${TEMP_THRID_CLOG_PATH})

ADD_SUBDIRECTORY(thrid/octoidl)
ADD_SUBDIRECTORY(src)

#header, cthrift header will be copied inside
EXECUTE_PROCESS(COMMAND mkdir ${INCLUDE_OUTPUT_PATH}/rapidjson)
EXECUTE_PROCESS(COMMAND cp -rf ${RAPIDJSON_INCLUDE_DIR}/rapidjson ${INCLUDE_OUTPUT_PATH}/rapidjson/)

#EXECUTE_PROCESS(COMMAND cp -rf ${CAT_INCLUDE_DIR}/cat #${INCLUDE_OUTPUT_PATH})
#EXECUTE_PROCESS(COMMAND cp -rf ${CAT_LIBRARY} #${LIBRARY_OUTPUT_PATH})

EXECUTE_PROCESS(COMMAND cp -rf /usr/include/thrift ${INCLUDE_OUTPUT_PATH})
EXECUTE_PROCESS(COMMAND cp -rf /usr/include/boost ${INCLUDE_OUTPUT_PATH})
EXECUTE_PROCESS(COMMAND cp -rf /usr/include/muduo ${INCLUDE_OUTPUT_PATH})
#EXECUTE_PROCESS(COMMAND cp -rf /usr/include/octoidl ${INCLUDE_OUTPUT_PATH})

EXECUTE_PROCESS(COMMAND mkdir ${INCLUDE_OUTPUT_PATH}/zlib)
EXECUTE_PROCESS(COMMAND cp -rf /usr/include/zlib.h ${INCLUDE_OUTPUT_PATH}/zlib)
EXECUTE_PROCESS(COMMAND cp -rf /usr/include/zconf.h ${INCLUDE_OUTPUT_PATH}/zlib)

#lib, libcthrift.a will be coped inside
#EXECUTE_PROCESS(COMMAND cp -rf ${GTEST_LIBRARY} ${LIBRARY_OUTPUT_PATH})
#EXECUTE_PROCESS(COMMAND cp -rf ${CMTRACE_LIBRARY} ${LIBRARY_OUTPUT_PATH})

#EXECUTE_PROCESS(COMMAND cp -rf ${CAT_LIBRARY} ${LIBRARY_OUTPUT_PATH})

EXECUTE_PROCESS(COMMAND cp -rf ${COMMON_LIB_PATH}/thrift-0.8.0_build/lib/libthrift.a ${LIBRARY_OUTPUT_PATH})
EXECUTE_PROCESS(COMMAND cp -rf ${COMMON_LIB_PATH}/thrift-0.8.0_build/lib/libthriftnb.a ${LIBRARY_OUTPUT_PATH})
EXECUTE_PROCESS(COMMAND cp -rf /usr/lib64/libmuduo_net.a ${LIBRARY_OUTPUT_PATH})
EXECUTE_PROCESS(COMMAND cp -rf /usr/lib64/libmuduo_base.a
        ${LIBRARY_OUTPUT_PATH})
EXECUTE_PROCESS(COMMAND cp -rf /usr/lib64/libmuduo_http.a
        ${LIBRARY_OUTPUT_PATH})
#EXECUTE_PROCESS(COMMAND cp -rf /usr/lib64/liboctoidl.a
#        ${LIBRARY_OUTPUT_PATH})

EXECUTE_PROCESS(COMMAND cp -rf ${CTHRIFT_SRC_PATH}/example ${CMAKE_INSTALL_PREFIX})


#if (NOT CMAKE_BUILD_NO_EXAMPLES)
#    ADD_SUBDIRECTORY(${EXAMPLE_CTHRIFT_OUTPUT_PATH})
#endif ()
