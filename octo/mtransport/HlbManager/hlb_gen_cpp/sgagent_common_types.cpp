/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "sgagent_common_types.h"



int _kfb_statusValues[] = {
  fb_status::DEAD,
  fb_status::STARTING,
  fb_status::ALIVE,
  fb_status::STOPPING,
  fb_status::STOPPED,
  fb_status::WARNING
};
const char* _kfb_statusNames[] = {
  "DEAD",
  "STARTING",
  "ALIVE",
  "STOPPING",
  "STOPPED",
  "WARNING"
};
const std::map<int, const char*> _fb_status_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kfb_statusValues, _kfb_statusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* SGService::ascii_fingerprint = "B7B6C49293039CC72AB3368B81451AD4";
const uint8_t SGService::binary_fingerprint[16] = {0xB7,0xB6,0xC4,0x92,0x93,0x03,0x9C,0xC7,0x2A,0xB3,0x36,0x8B,0x81,0x45,0x1A,0xD4};

uint32_t SGService::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->appkey);
          this->__isset.appkey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip);
          this->__isset.ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->port);
          this->__isset.port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->weight);
          this->__isset.weight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->role);
          this->__isset.role = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->envir);
          this->__isset.envir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lastUpdateTime);
          this->__isset.lastUpdateTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->extend);
          this->__isset.extend = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->fweight);
          this->__isset.fweight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->serverType);
          this->__isset.serverType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SGService::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SGService");
  xfer += oprot->writeFieldBegin("appkey", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->appkey);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->version);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("ip", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->ip);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("port", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->port);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("weight", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->weight);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->status);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("role", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->role);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("envir", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->envir);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("lastUpdateTime", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->lastUpdateTime);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("extend", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->extend);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("fweight", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->fweight);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("serverType", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->serverType);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Consumer::ascii_fingerprint = "AA819045335EAFAB5C2FE456B4B9CC1C";
const uint8_t Consumer::binary_fingerprint[16] = {0xAA,0x81,0x90,0x45,0x33,0x5E,0xAF,0xAB,0x5C,0x2F,0xE4,0x56,0xB4,0xB9,0xCC,0x1C};

uint32_t Consumer::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ips.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            iprot->readListBegin(_etype3, _size0);
            this->ips.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readString(this->ips[_i4]);
            }
            iprot->readListEnd();
          }
          this->__isset.ips = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->appkeys.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            iprot->readListBegin(_etype8, _size5);
            this->appkeys.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += iprot->readString(this->appkeys[_i9]);
            }
            iprot->readListEnd();
          }
          this->__isset.appkeys = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Consumer::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Consumer");
  xfer += oprot->writeFieldBegin("ips", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->ips.size()));
    std::vector<std::string> ::const_iterator _iter10;
    for (_iter10 = this->ips.begin(); _iter10 != this->ips.end(); ++_iter10)
    {
      xfer += oprot->writeString((*_iter10));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("appkeys", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->appkeys.size()));
    std::vector<std::string> ::const_iterator _iter11;
    for (_iter11 = this->appkeys.begin(); _iter11 != this->appkeys.end(); ++_iter11)
    {
      xfer += oprot->writeString((*_iter11));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* CRouteData::ascii_fingerprint = "BA097AEDC13A13D0EF25D33F4578FC59";
const uint8_t CRouteData::binary_fingerprint[16] = {0xBA,0x09,0x7A,0xED,0xC1,0x3A,0x13,0xD0,0xEF,0x25,0xD3,0x3F,0x45,0x78,0xFC,0x59};

uint32_t CRouteData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->appkey);
          this->__isset.appkey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->env);
          this->__isset.env = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->category);
          this->__isset.category = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->priority);
          this->__isset.priority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->consumer.read(iprot);
          this->__isset.consumer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->provider.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            iprot->readListBegin(_etype15, _size12);
            this->provider.resize(_size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              xfer += iprot->readString(this->provider[_i16]);
            }
            iprot->readListEnd();
          }
          this->__isset.provider = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->updateTime);
          this->__isset.updateTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->createTime);
          this->__isset.createTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->reserved);
          this->__isset.reserved = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CRouteData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CRouteData");
  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("appkey", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->appkey);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("env", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->env);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("category", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->category);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("priority", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->priority);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->status);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("consumer", ::apache::thrift::protocol::T_STRUCT, 8);
  xfer += this->consumer.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("provider", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->provider.size()));
    std::vector<std::string> ::const_iterator _iter17;
    for (_iter17 = this->provider.begin(); _iter17 != this->provider.end(); ++_iter17)
    {
      xfer += oprot->writeString((*_iter17));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("updateTime", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->updateTime);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("createTime", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->createTime);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("reserved", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->reserved);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* CProviderNode::ascii_fingerprint = "9118FDD77343DD231D97C424A53D2DCF";
const uint8_t CProviderNode::binary_fingerprint[16] = {0x91,0x18,0xFD,0xD7,0x73,0x43,0xDD,0x23,0x1D,0x97,0xC4,0x24,0xA5,0x3D,0x2D,0xCF};

uint32_t CProviderNode::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->appkey);
          this->__isset.appkey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastModifiedTime);
          this->__isset.lastModifiedTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->mtime);
          this->__isset.mtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cversion);
          this->__isset.cversion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CProviderNode::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CProviderNode");
  xfer += oprot->writeFieldBegin("appkey", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->appkey);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("lastModifiedTime", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->lastModifiedTime);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("mtime", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->mtime);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("cversion", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->cversion);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->version);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* CRouteNode::ascii_fingerprint = "9118FDD77343DD231D97C424A53D2DCF";
const uint8_t CRouteNode::binary_fingerprint[16] = {0x91,0x18,0xFD,0xD7,0x73,0x43,0xDD,0x23,0x1D,0x97,0xC4,0x24,0xA5,0x3D,0x2D,0xCF};

uint32_t CRouteNode::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->appkey);
          this->__isset.appkey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastModifiedTime);
          this->__isset.lastModifiedTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->mtime);
          this->__isset.mtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cversion);
          this->__isset.cversion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CRouteNode::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CRouteNode");
  xfer += oprot->writeFieldBegin("appkey", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->appkey);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("lastModifiedTime", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->lastModifiedTime);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("mtime", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->mtime);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("cversion", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->cversion);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->version);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* ParamMCC::ascii_fingerprint = "4C7065159F8A4E4B88CCEB0FC10B7731";
const uint8_t ParamMCC::binary_fingerprint[16] = {0x4C,0x70,0x65,0x15,0x9F,0x8A,0x4E,0x4B,0x88,0xCC,0xEB,0x0F,0xC1,0x0B,0x77,0x31};

uint32_t ParamMCC::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->appkey);
          this->__isset.appkey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->zkNode);
          this->__isset.zkNode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->md5);
          this->__isset.md5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fileName);
          this->__isset.fileName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->path);
          this->__isset.path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastUpdateTime);
          this->__isset.lastUpdateTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->needToLocal);
          this->__isset.needToLocal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createTime);
          this->__isset.createTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->privilege);
          this->__isset.privilege = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->reserved);
          this->__isset.reserved = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fileType);
          this->__isset.fileType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ParamMCC::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ParamMCC");
  xfer += oprot->writeFieldBegin("appkey", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->appkey);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("zkNode", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->zkNode);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("md5", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->md5);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("fileName", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->fileName);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("path", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->path);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("lastUpdateTime", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->lastUpdateTime);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("needToLocal", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->needToLocal);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("createTime", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->createTime);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("privilege", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->privilege);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("reserved", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->reserved);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("fileType", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->fileType);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* proc_conf_param_t::ascii_fingerprint = "887706DDCCC1217C8FF1C3779E52C05E";
const uint8_t proc_conf_param_t::binary_fingerprint[16] = {0x88,0x77,0x06,0xDD,0xCC,0xC1,0x21,0x7C,0x8F,0xF1,0xC3,0x77,0x9E,0x52,0xC0,0x5E};

uint32_t proc_conf_param_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_appkey = false;
  bool isset_env = false;
  bool isset_path = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->appkey);
          isset_appkey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->env);
          isset_env = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->path);
          isset_path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->conf);
          this->__isset.conf = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cmd);
          this->__isset.cmd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->err);
          this->__isset.err = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->configNodeList.clear();
            uint32_t _size18;
            ::apache::thrift::protocol::TType _etype21;
            iprot->readListBegin(_etype21, _size18);
            this->configNodeList.resize(_size18);
            uint32_t _i22;
            for (_i22 = 0; _i22 < _size18; ++_i22)
            {
              xfer += this->configNodeList[_i22].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.configNodeList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_appkey)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_env)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_path)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t proc_conf_param_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("proc_conf_param_t");
  xfer += oprot->writeFieldBegin("appkey", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->appkey);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("env", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->env);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("path", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->path);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.version) {
    xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->version);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.conf) {
    xfer += oprot->writeFieldBegin("conf", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->conf);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cmd) {
    xfer += oprot->writeFieldBegin("cmd", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->cmd);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.err) {
    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->err);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.key) {
    xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->key);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.configNodeList) {
    xfer += oprot->writeFieldBegin("configNodeList", ::apache::thrift::protocol::T_LIST, 9);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->configNodeList.size()));
      std::vector<ConfigNode> ::const_iterator _iter23;
      for (_iter23 = this->configNodeList.begin(); _iter23 != this->configNodeList.end(); ++_iter23)
      {
        xfer += (*_iter23).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* ConfigUpdateRequest::ascii_fingerprint = "A41419382065BEEA5C9CC6941C97CDAF";
const uint8_t ConfigUpdateRequest::binary_fingerprint[16] = {0xA4,0x14,0x19,0x38,0x20,0x65,0xBE,0xEA,0x5C,0x9C,0xC6,0x94,0x1C,0x97,0xCD,0xAF};

uint32_t ConfigUpdateRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_nodes = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->nodes.clear();
            uint32_t _size24;
            ::apache::thrift::protocol::TType _etype27;
            iprot->readListBegin(_etype27, _size24);
            this->nodes.resize(_size24);
            uint32_t _i28;
            for (_i28 = 0; _i28 < _size24; ++_i28)
            {
              xfer += this->nodes[_i28].read(iprot);
            }
            iprot->readListEnd();
          }
          isset_nodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_nodes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ConfigUpdateRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ConfigUpdateRequest");
  xfer += oprot->writeFieldBegin("nodes", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->nodes.size()));
    std::vector<ConfigNode> ::const_iterator _iter29;
    for (_iter29 = this->nodes.begin(); _iter29 != this->nodes.end(); ++_iter29)
    {
      xfer += (*_iter29).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* ZabbixSelfCheck::ascii_fingerprint = "A8C1FA56E3F1E223901DB88CBF1288C9";
const uint8_t ZabbixSelfCheck::binary_fingerprint[16] = {0xA8,0xC1,0xFA,0x56,0xE3,0xF1,0xE2,0x23,0x90,0x1D,0xB8,0x8C,0xBF,0x12,0x88,0xC9};

uint32_t ZabbixSelfCheck::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->msgQueueBytes.clear();
            uint32_t _size30;
            ::apache::thrift::protocol::TType _ktype31;
            ::apache::thrift::protocol::TType _vtype32;
            iprot->readMapBegin(_ktype31, _vtype32, _size30);
            uint32_t _i34;
            for (_i34 = 0; _i34 < _size30; ++_i34)
            {
              int32_t _key35;
              xfer += iprot->readI32(_key35);
              int64_t& _val36 = this->msgQueueBytes[_key35];
              xfer += iprot->readI64(_val36);
            }
            iprot->readMapEnd();
          }
          this->__isset.msgQueueBytes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->agent_vmRss);
          this->__isset.agent_vmRss = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->worker_vmRss);
          this->__isset.worker_vmRss = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->agent_cpu);
          this->__isset.agent_cpu = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->worker_cpu);
          this->__isset.worker_cpu = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->zkConnections);
          this->__isset.zkConnections = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mtConfigConnections);
          this->__isset.mtConfigConnections = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->logCollectorConnections);
          this->__isset.logCollectorConnections = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->bufferKeyNum);
          this->__isset.bufferKeyNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->missBuffNum);
          this->__isset.missBuffNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->extend);
          this->__isset.extend = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ZabbixSelfCheck::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ZabbixSelfCheck");
  xfer += oprot->writeFieldBegin("msgQueueBytes", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->msgQueueBytes.size()));
    std::map<int32_t, int64_t> ::const_iterator _iter37;
    for (_iter37 = this->msgQueueBytes.begin(); _iter37 != this->msgQueueBytes.end(); ++_iter37)
    {
      xfer += oprot->writeI32(_iter37->first);
      xfer += oprot->writeI64(_iter37->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("agent_vmRss", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->agent_vmRss);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("worker_vmRss", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->worker_vmRss);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("agent_cpu", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->agent_cpu);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("worker_cpu", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->worker_cpu);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("zkConnections", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->zkConnections);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("mtConfigConnections", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->mtConfigConnections);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("logCollectorConnections", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->logCollectorConnections);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("bufferKeyNum", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->bufferKeyNum);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("missBuffNum", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->missBuffNum);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("extend", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->extend);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


