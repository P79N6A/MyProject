/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef quota_common_TYPES_H
#define quota_common_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>





struct DegradeStatus {
  enum type {
    ENABLE = 0,
    DISABLE = 1
  };
};

extern const std::map<int, const char*> _DegradeStatus_VALUES_TO_NAMES;

struct AlarmStatus {
  enum type {
    ENABLE = 0,
    DISABLE = 1
  };
};

extern const std::map<int, const char*> _AlarmStatus_VALUES_TO_NAMES;

struct DegradeStrategy {
  enum type {
    DROP = 0,
    CUSTOMIZE = 1
  };
};

extern const std::map<int, const char*> _DegradeStrategy_VALUES_TO_NAMES;

struct DegradeEnd {
  enum type {
    SERVER = 0,
    CLIENT = 1
  };
};

extern const std::map<int, const char*> _DegradeEnd_VALUES_TO_NAMES;

struct ProviderNumCountSwitch {
  enum type {
    APPKEY = 0,
    HOST = 1
  };
};

extern const std::map<int, const char*> _ProviderNumCountSwitch_VALUES_TO_NAMES;

typedef struct _ConsumerQuota__isset {
  _ConsumerQuota__isset() : degradeRedirect(false) {}
  bool degradeRedirect;
} _ConsumerQuota__isset;

class ConsumerQuota {
 public:

  static const char* ascii_fingerprint; // = "B0753E0550D2E0EEE8E4C566ABE1332D";
  static const uint8_t binary_fingerprint[16]; // = {0xB0,0x75,0x3E,0x05,0x50,0xD2,0xE0,0xEE,0xE8,0xE4,0xC5,0x66,0xAB,0xE1,0x33,0x2D};

  ConsumerQuota() : consumerAppkey(""), QPSRatio(0), degradeStrategy((DegradeStrategy::type)0), degradeRedirect("") {
  }

  virtual ~ConsumerQuota() throw() {}

  std::string consumerAppkey;
  double QPSRatio;
  DegradeStrategy::type degradeStrategy;
  std::string degradeRedirect;

  _ConsumerQuota__isset __isset;

  void __set_consumerAppkey(const std::string& val) {
    consumerAppkey = val;
  }

  void __set_QPSRatio(const double val) {
    QPSRatio = val;
  }

  void __set_degradeStrategy(const DegradeStrategy::type val) {
    degradeStrategy = val;
  }

  void __set_degradeRedirect(const std::string& val) {
    degradeRedirect = val;
    __isset.degradeRedirect = true;
  }

  bool operator == (const ConsumerQuota & rhs) const
  {
    if (!(consumerAppkey == rhs.consumerAppkey))
      return false;
    if (!(QPSRatio == rhs.QPSRatio))
      return false;
    if (!(degradeStrategy == rhs.degradeStrategy))
      return false;
    if (__isset.degradeRedirect != rhs.__isset.degradeRedirect)
      return false;
    else if (__isset.degradeRedirect && !(degradeRedirect == rhs.degradeRedirect))
      return false;
    return true;
  }
  bool operator != (const ConsumerQuota &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConsumerQuota & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProviderQuota__isset {
  _ProviderQuota__isset() : alarm(false), degradeEnd(false), proNumCntSwitch(false) {}
  bool alarm;
  bool degradeEnd;
  bool proNumCntSwitch;
} _ProviderQuota__isset;

class ProviderQuota {
 public:

  static const char* ascii_fingerprint; // = "22047358A9DAECE7C66355BEFBECCBFB";
  static const uint8_t binary_fingerprint[16]; // = {0x22,0x04,0x73,0x58,0xA9,0xDA,0xEC,0xE7,0xC6,0x63,0x55,0xBE,0xFB,0xEC,0xCB,0xFB};

  ProviderQuota() : id(""), name(""), providerAppkey(""), env(0), method(""), QPSCapacity(0), status((DegradeStatus::type)0), watchPeriodInSeconds(10), createTime(0), updateTime(0), alarm((AlarmStatus::type)0), degradeEnd((DegradeEnd::type)1), proNumCntSwitch((ProviderNumCountSwitch::type)0) {
    alarm = (AlarmStatus::type)0;

    degradeEnd = (DegradeEnd::type)1;

    proNumCntSwitch = (ProviderNumCountSwitch::type)0;

  }

  virtual ~ProviderQuota() throw() {}

  std::string id;
  std::string name;
  std::string providerAppkey;
  int32_t env;
  std::string method;
  int32_t QPSCapacity;
  std::vector<ConsumerQuota>  consumerList;
  DegradeStatus::type status;
  int32_t watchPeriodInSeconds;
  int64_t createTime;
  int64_t updateTime;
  AlarmStatus::type alarm;
  DegradeEnd::type degradeEnd;
  ProviderNumCountSwitch::type proNumCntSwitch;

  _ProviderQuota__isset __isset;

  void __set_id(const std::string& val) {
    id = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_providerAppkey(const std::string& val) {
    providerAppkey = val;
  }

  void __set_env(const int32_t val) {
    env = val;
  }

  void __set_method(const std::string& val) {
    method = val;
  }

  void __set_QPSCapacity(const int32_t val) {
    QPSCapacity = val;
  }

  void __set_consumerList(const std::vector<ConsumerQuota> & val) {
    consumerList = val;
  }

  void __set_status(const DegradeStatus::type val) {
    status = val;
  }

  void __set_watchPeriodInSeconds(const int32_t val) {
    watchPeriodInSeconds = val;
  }

  void __set_createTime(const int64_t val) {
    createTime = val;
  }

  void __set_updateTime(const int64_t val) {
    updateTime = val;
  }

  void __set_alarm(const AlarmStatus::type val) {
    alarm = val;
    __isset.alarm = true;
  }

  void __set_degradeEnd(const DegradeEnd::type val) {
    degradeEnd = val;
    __isset.degradeEnd = true;
  }

  void __set_proNumCntSwitch(const ProviderNumCountSwitch::type val) {
    proNumCntSwitch = val;
    __isset.proNumCntSwitch = true;
  }

  bool operator == (const ProviderQuota & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(providerAppkey == rhs.providerAppkey))
      return false;
    if (!(env == rhs.env))
      return false;
    if (!(method == rhs.method))
      return false;
    if (!(QPSCapacity == rhs.QPSCapacity))
      return false;
    if (!(consumerList == rhs.consumerList))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(watchPeriodInSeconds == rhs.watchPeriodInSeconds))
      return false;
    if (!(createTime == rhs.createTime))
      return false;
    if (!(updateTime == rhs.updateTime))
      return false;
    if (__isset.alarm != rhs.__isset.alarm)
      return false;
    else if (__isset.alarm && !(alarm == rhs.alarm))
      return false;
    if (__isset.degradeEnd != rhs.__isset.degradeEnd)
      return false;
    else if (__isset.degradeEnd && !(degradeEnd == rhs.degradeEnd))
      return false;
    if (__isset.proNumCntSwitch != rhs.__isset.proNumCntSwitch)
      return false;
    else if (__isset.proNumCntSwitch && !(proNumCntSwitch == rhs.proNumCntSwitch))
      return false;
    return true;
  }
  bool operator != (const ProviderQuota &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProviderQuota & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DegradeAction__isset {
  _DegradeAction__isset() : degradeRedirect(false), consumerQPS(false), degradeEnd(false), extend(false) {}
  bool degradeRedirect;
  bool consumerQPS;
  bool degradeEnd;
  bool extend;
} _DegradeAction__isset;

class DegradeAction {
 public:

  static const char* ascii_fingerprint; // = "47820E180379D7A8F8B8B34E190AF941";
  static const uint8_t binary_fingerprint[16]; // = {0x47,0x82,0x0E,0x18,0x03,0x79,0xD7,0xA8,0xF8,0xB8,0xB3,0x4E,0x19,0x0A,0xF9,0x41};

  DegradeAction() : id(""), env(0), providerAppkey(""), consumerAppkey(""), method(""), degradeRatio(0), degradeStrategy((DegradeStrategy::type)0), timestamp(0), degradeRedirect(""), consumerQPS(0), degradeEnd((DegradeEnd::type)1), extend("") {
    degradeEnd = (DegradeEnd::type)1;

  }

  virtual ~DegradeAction() throw() {}

  std::string id;
  int32_t env;
  std::string providerAppkey;
  std::string consumerAppkey;
  std::string method;
  double degradeRatio;
  DegradeStrategy::type degradeStrategy;
  int64_t timestamp;
  std::string degradeRedirect;
  int32_t consumerQPS;
  DegradeEnd::type degradeEnd;
  std::string extend;

  _DegradeAction__isset __isset;

  void __set_id(const std::string& val) {
    id = val;
  }

  void __set_env(const int32_t val) {
    env = val;
  }

  void __set_providerAppkey(const std::string& val) {
    providerAppkey = val;
  }

  void __set_consumerAppkey(const std::string& val) {
    consumerAppkey = val;
  }

  void __set_method(const std::string& val) {
    method = val;
  }

  void __set_degradeRatio(const double val) {
    degradeRatio = val;
  }

  void __set_degradeStrategy(const DegradeStrategy::type val) {
    degradeStrategy = val;
  }

  void __set_timestamp(const int64_t val) {
    timestamp = val;
  }

  void __set_degradeRedirect(const std::string& val) {
    degradeRedirect = val;
    __isset.degradeRedirect = true;
  }

  void __set_consumerQPS(const int32_t val) {
    consumerQPS = val;
    __isset.consumerQPS = true;
  }

  void __set_degradeEnd(const DegradeEnd::type val) {
    degradeEnd = val;
    __isset.degradeEnd = true;
  }

  void __set_extend(const std::string& val) {
    extend = val;
    __isset.extend = true;
  }

  bool operator == (const DegradeAction & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(env == rhs.env))
      return false;
    if (!(providerAppkey == rhs.providerAppkey))
      return false;
    if (!(consumerAppkey == rhs.consumerAppkey))
      return false;
    if (!(method == rhs.method))
      return false;
    if (!(degradeRatio == rhs.degradeRatio))
      return false;
    if (!(degradeStrategy == rhs.degradeStrategy))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    if (__isset.degradeRedirect != rhs.__isset.degradeRedirect)
      return false;
    else if (__isset.degradeRedirect && !(degradeRedirect == rhs.degradeRedirect))
      return false;
    if (__isset.consumerQPS != rhs.__isset.consumerQPS)
      return false;
    else if (__isset.consumerQPS && !(consumerQPS == rhs.consumerQPS))
      return false;
    if (__isset.degradeEnd != rhs.__isset.degradeEnd)
      return false;
    else if (__isset.degradeEnd && !(degradeEnd == rhs.degradeEnd))
      return false;
    if (__isset.extend != rhs.__isset.extend)
      return false;
    else if (__isset.extend && !(extend == rhs.extend))
      return false;
    return true;
  }
  bool operator != (const DegradeAction &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DegradeAction & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
