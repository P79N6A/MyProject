// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "SGAgent.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ;

class SGAgentHandler : virtual public SGAgentIf {
 public:
  SGAgentHandler() {
    // Your initialization goes here
  }

  void getServiceList(std::vector<SGService> & _return, const std::string& localAppkey, const std::string& remoteAppkey) {
    // Your implementation goes here
    printf("getServiceList\n");
  }

  void getHttpServiceList(std::vector<SGService> & _return, const std::string& localAppkey, const std::string& remoteAppkey) {
    // Your implementation goes here
    printf("getHttpServiceList\n");
  }

  void getAppKeyListByBusinessLine(std::vector<std::string> & _return, const int32_t businessLineCode) {
    // Your implementation goes here
    printf("getAppKeyListByBusinessLine\n");
  }

  void getService(SGService& _return, const std::string& localAppkey, const std::string& remoteAppkey, const int32_t strategy) {
    // Your implementation goes here
    printf("getService\n");
  }

  int32_t registService(const SGService& oService) {
    // Your implementation goes here
    printf("registService\n");
  }

  int32_t updateConfig(const ConfigUpdateRequest& request) {
    // Your implementation goes here
    printf("updateConfig\n");
  }

  void getConfig(std::string& _return, const proc_conf_param_t& node) {
    // Your implementation goes here
    printf("getConfig\n");
  }

  int32_t setConfig(const proc_conf_param_t& conf) {
    // Your implementation goes here
    printf("setConfig\n");
  }

  void getFileConfig(file_param_t& _return, const file_param_t& file) {
    // Your implementation goes here
    printf("getFileConfig\n");
  }

  int32_t notifyFileConfigIssued(const file_param_t& files) {
    // Your implementation goes here
    printf("notifyFileConfigIssued\n");
  }

  int32_t notifyFileConfigWork(const file_param_t& files) {
    // Your implementation goes here
    printf("notifyFileConfigWork\n");
  }

  void getLocalConfig(std::string& _return, const std::string& localAppkey, const std::string& ip) {
    // Your implementation goes here
    printf("getLocalConfig\n");
  }

  int32_t uploadLog(const SGLog& oLog) {
    // Your implementation goes here
    printf("uploadLog\n");
  }

  int32_t uploadCommonLog(const CommonLog& oCommonLog) {
    // Your implementation goes here
    printf("uploadCommonLog\n");
  }

  int32_t uploadModuleInvoke(const SGModuleInvokeInfo& oInfo) {
    // Your implementation goes here
    printf("uploadModuleInvoke\n");
  }

  void getDegradeActions(std::vector<DegradeAction> & _return, const std::string& localAppkey, const std::string& remoteAppkey) {
    // Your implementation goes here
    printf("getDegradeActions\n");
  }

  void getZabbixInfo(ZabbixSelfCheck& _return) {
    // Your implementation goes here
    printf("getZabbixInfo\n");
  }

  void getAuthorizedConsumers(std::string& _return, const std::string& targetAppkey) {
    // Your implementation goes here
    printf("getAuthorizedConsumers\n");
  }

  void getAuthorizedProviders(std::string& _return, const std::string& targetAppkey) {
    // Your implementation goes here
    printf("getAuthorizedProviders\n");
  }

  void getHttpPropertiesByBusinessLine(std::map<std::string, HttpProperties> & _return, const int32_t bizCode) {
    // Your implementation goes here
    printf("getHttpPropertiesByBusinessLine\n");
  }

  void getHttpPropertiesByAppkey(std::map<std::string, HttpProperties> & _return, const std::string& appkey) {
    // Your implementation goes here
    printf("getHttpPropertiesByAppkey\n");
  }

  bool switchEnv(const std::string& env, const std::string& verifyCode) {
    // Your implementation goes here
    printf("switchEnv\n");
  }

  void getName(std::string& _return) {
    // Your implementation goes here
    printf("getName\n");
  }

  void getVersion(std::string& _return) {
    // Your implementation goes here
    printf("getVersion\n");
  }

  int32_t getEnv() {
    // Your implementation goes here
    printf("getEnv\n");
  }

  sg_fb_status getStatus() {
    // Your implementation goes here
    printf("getStatus\n");
  }

  void getStatusDetails(std::string& _return) {
    // Your implementation goes here
    printf("getStatusDetails\n");
  }

  void getCounters(std::map<std::string, int64_t> & _return) {
    // Your implementation goes here
    printf("getCounters\n");
  }

  int64_t getCounter(const std::string& key) {
    // Your implementation goes here
    printf("getCounter\n");
  }

  void setOption(const std::string& key, const std::string& value) {
    // Your implementation goes here
    printf("setOption\n");
  }

  void getOption(std::string& _return, const std::string& key) {
    // Your implementation goes here
    printf("getOption\n");
  }

  void getOptions(std::map<std::string, std::string> & _return) {
    // Your implementation goes here
    printf("getOptions\n");
  }

  void getCpuProfile(std::string& _return, const int32_t profileDurationInSec) {
    // Your implementation goes here
    printf("getCpuProfile\n");
  }

  int64_t aliveSince() {
    // Your implementation goes here
    printf("aliveSince\n");
  }

  void reinitialize() {
    // Your implementation goes here
    printf("reinitialize\n");
  }

  void shutdown() {
    // Your implementation goes here
    printf("shutdown\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<SGAgentHandler> handler(new SGAgentHandler());
  shared_ptr<TProcessor> processor(new SGAgentProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

