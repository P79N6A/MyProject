// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "MNSCacheService.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ;

class MNSCacheServiceHandler : virtual public MNSCacheServiceIf {
 public:
  MNSCacheServiceHandler() {
    // Your initialization goes here
  }

  void getMNSCache(MNSResponse& _return, const std::string& appkey, const std::string& version, const std::string& env) {
    // Your implementation goes here
    printf("getMNSCache\n");
  }

  void getMNSCache4HLB(MNSResponse& _return, const std::string& appkey, const std::string& version, const std::string& env) {
    // Your implementation goes here
    printf("getMNSCache4HLB\n");
  }

  void getAppKeyListByBusinessLine(AppKeyListResponse& _return, const int32_t bizCode, const std::string& env) {
    // Your implementation goes here
    printf("getAppKeyListByBusinessLine\n");
  }

  void getHttpPropertiesByBusinessLine(HttpPropertiesResponse& _return, const int32_t bizCode, const std::string& env) {
    // Your implementation goes here
    printf("getHttpPropertiesByBusinessLine\n");
  }

  void getHttpPropertiesByAppkey(HttpPropertiesResponse& _return, const std::string& appkey, const std::string& env) {
    // Your implementation goes here
    printf("getHttpPropertiesByAppkey\n");
  }

  void getHlbUpstream(UpstreamResponse& _return, const std::string& nginx_type, const std::string& idc_type, const std::string& env) {
    // Your implementation goes here
    printf("getHlbUpstream\n");
  }

  void getSandbox(SandboxResponse& _return, const std::string& appkey, const std::string& env) {
    // Your implementation goes here
    printf("getSandbox\n");
  }

  bool saveSandbox(const std::string& id, const std::string& env, const std::string& data) {
    // Your implementation goes here
    printf("saveSandbox\n");
  }

  bool deleteSandbox(const std::string& id, const std::string& env) {
    // Your implementation goes here
    printf("deleteSandbox\n");
  }

  void getSandboxConfig(std::vector<SandboxConfig> & _return, const std::vector<std::string> & appkeys, const std::string& env) {
    // Your implementation goes here
    printf("getSandboxConfig\n");
  }

  void getProvidersByIP(MNSResponse& _return, const std::string& ip) {
    // Your implementation goes here
    printf("getProvidersByIP\n");
  }

  bool delProvider(const std::string& appkey, const int32_t env, const int32_t serverType, const std::string& ip, const int32_t port) {
    // Your implementation goes here
    printf("delProvider\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<MNSCacheServiceHandler> handler(new MNSCacheServiceHandler());
  shared_ptr<TProcessor> processor(new MNSCacheServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

