/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.meituan.service.mobile.mtthrift.server;

import com.meituan.service.mobile.mtthrift.mtrace.MtraceServerTBinaryProtocol;
import org.apache.thrift.protocol.TMessageType;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;
@Deprecated
public class MtService {

    public interface Iface extends com.facebook.fb303.FacebookService.Iface {

        /**
         * 此方法禁止上层应用调用，用于框架层的请求拦截
         * @param message
         * @param code
         * @throws MtthriftException
         * @throws org.apache.thrift.TException
         * @deprecated 此方法禁止上层应用调用
         */
        public void _mtthriftReject(String message, int code) throws MtthriftException, org.apache.thrift.TException;

    }

    public interface AsyncIface extends com.facebook.fb303.FacebookService .AsyncIface {

        /**
         * 此方法禁止上层应用调用，用于框架层的请求拦截
         * @param message
         * @param code
         * @param resultHandler
         * @throws org.apache.thrift.TException
         * @deprecated 此方法禁止上层应用调用
         */
        public void _mtthriftReject(String message, int code, org.apache.thrift.async.AsyncMethodCallback<AsyncClient._mtthriftReject_call> resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends com.facebook.fb303.FacebookService.Client implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {}
            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }
            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot)
        {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public void _mtthriftReject(String message, int code) throws MtthriftException, org.apache.thrift.TException
        {
            send__mtthriftReject(message, code);
            recv__mtthriftReject();
        }

        public void send__mtthriftReject(String message, int code) throws org.apache.thrift.TException
        {
            _mtthriftReject_args args = new _mtthriftReject_args();
            args.setMessage(message);
            args.setCode(code);
            sendBase("_mtthriftReject", args);
        }

        public void recv__mtthriftReject() throws MtthriftException, org.apache.thrift.TException
        {
            _mtthriftReject_result result = new _mtthriftReject_result();
            receiveBase(result, "_mtthriftReject");
            if (result.mtthriftException != null) {
                throw result.mtthriftException;
            }
            return;
        }

    }
    public static class AsyncClient extends com.facebook.fb303.FacebookService.AsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }
            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void _mtthriftReject(String message, int code, org.apache.thrift.async.AsyncMethodCallback<_mtthriftReject_call> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            _mtthriftReject_call method_call = new _mtthriftReject_call(message, code, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class _mtthriftReject_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String message;
            private int code;
            public _mtthriftReject_call(String message, int code, org.apache.thrift.async.AsyncMethodCallback<_mtthriftReject_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.message = message;
                this.code = code;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("_mtthriftReject", org.apache.thrift.protocol.TMessageType.CALL, 0));
                _mtthriftReject_args args = new _mtthriftReject_args();
                args.setMessage(message);
                args.setCode(code);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws MtthriftException, org.apache.thrift.TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv__mtthriftReject();
            }
        }

    }

    public static class Processor<I extends Iface> extends com.facebook.fb303.FacebookService.Processor implements org.apache.thrift.TProcessor {
        private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
        public Processor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
            processMap.put("_mtthriftReject", new _mtthriftReject());
            return processMap;
        }

//    @Override
//    public boolean process(TProtocol in, TProtocol out) throws TException{
//        try{
//            return super.process(in,out);
//        } catch (Throwable e) {
//            if(e instanceof TTransportException || e instanceof TProtocolException || (e instanceof TBase && e instanceof TException)) {
//                throw (TException) e;
//            } else {
//                //捕获服务端抛出的未知异常，避免客户端释放连接
//                String eMessage = null;
//                if(in instanceof MtraceServerTBinaryProtocol &&  (eMessage=getExceptionMessage(e))!=null) {
//                    TMessage msg = ((MtraceServerTBinaryProtocol) in).reReadMessageBegin();
//                    if(msg!=null) {
//                        //将服务端异常描述写入响应
//                        TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, eMessage);
//                        out.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
//                        x.write(out);
//                        out.writeMessageEnd();
//                        out.getTransport().flush();
//                        e.printStackTrace();
//                        return false;
//                    }
//                }
//                throw new TException("server exception:"+e.getMessage(),e);
//            }
//        }
//    }
//      private String getExceptionMessage(Throwable e) {
//          StackTraceElement stackTraceElement = e.getStackTrace()[0];
//          return e.getClass().getName()+":"+e.getMessage()+"("+stackTraceElement.getFileName()+","+stackTraceElement.getMethodName()+"() line "+stackTraceElement.getLineNumber()+")";
//      }

        private static class _mtthriftReject<I extends Iface> extends org.apache.thrift.ProcessFunction<I, _mtthriftReject_args> {
            public _mtthriftReject() {
                super("_mtthriftReject");
            }

            protected _mtthriftReject_args getEmptyArgsInstance() {
                return new _mtthriftReject_args();
            }

            protected _mtthriftReject_result getResult(I iface, _mtthriftReject_args args) throws org.apache.thrift.TException {
                _mtthriftReject_result result = new _mtthriftReject_result();
                try {
                    iface._mtthriftReject(args.message, args.code);
                } catch (MtthriftException mtthriftException) {
                    result.mtthriftException = mtthriftException;
                }
                return result;
            }
        }

    }

    public static class _mtthriftReject_args implements org.apache.thrift.TBase<_mtthriftReject_args, _mtthriftReject_args._Fields>, java.io.Serializable, Cloneable   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("_mtthriftReject_args");

        private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)1);
        private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.I32, (short)2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new _mtthriftReject_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new _mtthriftReject_argsTupleSchemeFactory());
        }

        public String message; // required
        public int code; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            MESSAGE((short)1, "message"),
            CODE((short)2, "code");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // MESSAGE
                        return MESSAGE;
                    case 2: // CODE
                        return CODE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __CODE_ISSET_ID = 0;
        private BitSet __isset_bit_vector = new BitSet(1);
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(_mtthriftReject_args.class, metaDataMap);
        }

        public _mtthriftReject_args() {
        }

        public _mtthriftReject_args(
                String message,
                int code)
        {
            this();
            this.message = message;
            this.code = code;
            setCodeIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public _mtthriftReject_args(_mtthriftReject_args other) {
            __isset_bit_vector.clear();
            __isset_bit_vector.or(other.__isset_bit_vector);
            if (other.isSetMessage()) {
                this.message = other.message;
            }
            this.code = other.code;
        }

        public _mtthriftReject_args deepCopy() {
            return new _mtthriftReject_args(this);
        }

        @Override
        public void clear() {
            this.message = null;
            setCodeIsSet(false);
            this.code = 0;
        }

        public String getMessage() {
            return this.message;
        }

        public _mtthriftReject_args setMessage(String message) {
            this.message = message;
            return this;
        }

        public void unsetMessage() {
            this.message = null;
        }

        /** Returns true if field message is set (has been assigned a value) and false otherwise */
        public boolean isSetMessage() {
            return this.message != null;
        }

        public void setMessageIsSet(boolean value) {
            if (!value) {
                this.message = null;
            }
        }

        public int getCode() {
            return this.code;
        }

        public _mtthriftReject_args setCode(int code) {
            this.code = code;
            setCodeIsSet(true);
            return this;
        }

        public void unsetCode() {
            __isset_bit_vector.clear(__CODE_ISSET_ID);
        }

        /** Returns true if field code is set (has been assigned a value) and false otherwise */
        public boolean isSetCode() {
            return __isset_bit_vector.get(__CODE_ISSET_ID);
        }

        public void setCodeIsSet(boolean value) {
            __isset_bit_vector.set(__CODE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case MESSAGE:
                    if (value == null) {
                        unsetMessage();
                    } else {
                        setMessage((String)value);
                    }
                    break;

                case CODE:
                    if (value == null) {
                        unsetCode();
                    } else {
                        setCode((Integer)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case MESSAGE:
                    return getMessage();

                case CODE:
                    return Integer.valueOf(getCode());

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case MESSAGE:
                    return isSetMessage();
                case CODE:
                    return isSetCode();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof _mtthriftReject_args)
                return this.equalArgs((_mtthriftReject_args) that);
            return false;
        }

        public boolean equalArgs(_mtthriftReject_args that) {
            if (that == null)
                return false;

            boolean this_present_message = true && this.isSetMessage();
            boolean that_present_message = true && that.isSetMessage();
            if (this_present_message || that_present_message) {
                if (!(this_present_message && that_present_message))
                    return false;
                if (!this.message.equals(that.message))
                    return false;
            }

            boolean this_present_code = true;
            boolean that_present_code = true;
            if (this_present_code || that_present_code) {
                if (!(this_present_code && that_present_code))
                    return false;
                if (this.code != that.code)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(_mtthriftReject_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            _mtthriftReject_args typedOther = (_mtthriftReject_args)other;

            lastComparison = Boolean.valueOf(isSetMessage()).compareTo(typedOther.isSetMessage());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMessage()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, typedOther.message);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetCode()).compareTo(typedOther.isSetCode());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCode()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, typedOther.code);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("_mtthriftReject_args(");
            boolean first = true;

            sb.append("message:");
            if (this.message == null) {
                sb.append("null");
            } else {
                sb.append(this.message);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("code:");
            sb.append(this.code);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bit_vector = new BitSet(1);
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class _mtthriftReject_argsStandardSchemeFactory implements SchemeFactory {
            public _mtthriftReject_argsStandardScheme getScheme() {
                return new _mtthriftReject_argsStandardScheme();
            }
        }

        private static class _mtthriftReject_argsStandardScheme extends StandardScheme<_mtthriftReject_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, _mtthriftReject_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // MESSAGE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.message = iprot.readString();
                                struct.setMessageIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // CODE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.code = iprot.readI32();
                                struct.setCodeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, _mtthriftReject_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.message != null) {
                    oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
                    oprot.writeString(struct.message);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(CODE_FIELD_DESC);
                oprot.writeI32(struct.code);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class _mtthriftReject_argsTupleSchemeFactory implements SchemeFactory {
            public _mtthriftReject_argsTupleScheme getScheme() {
                return new _mtthriftReject_argsTupleScheme();
            }
        }

        private static class _mtthriftReject_argsTupleScheme extends TupleScheme<_mtthriftReject_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, _mtthriftReject_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetMessage()) {
                    optionals.set(0);
                }
                if (struct.isSetCode()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetMessage()) {
                    oprot.writeString(struct.message);
                }
                if (struct.isSetCode()) {
                    oprot.writeI32(struct.code);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, _mtthriftReject_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.message = iprot.readString();
                    struct.setMessageIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.code = iprot.readI32();
                    struct.setCodeIsSet(true);
                }
            }
        }

    }

    public static class _mtthriftReject_result implements org.apache.thrift.TBase<_mtthriftReject_result, _mtthriftReject_result._Fields>, java.io.Serializable, Cloneable   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("_mtthriftReject_result");

        private static final org.apache.thrift.protocol.TField MTTHRIFT_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("mtthriftException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new _mtthriftReject_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new _mtthriftReject_resultTupleSchemeFactory());
        }

        public MtthriftException mtthriftException; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            MTTHRIFT_EXCEPTION((short)1, "mtthriftException");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // MTTHRIFT_EXCEPTION
                        return MTTHRIFT_EXCEPTION;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.MTTHRIFT_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("mtthriftException", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(_mtthriftReject_result.class, metaDataMap);
        }

        public _mtthriftReject_result() {
        }

        public _mtthriftReject_result(
                MtthriftException mtthriftException)
        {
            this();
            this.mtthriftException = mtthriftException;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public _mtthriftReject_result(_mtthriftReject_result other) {
            if (other.isSetMtthriftException()) {
                this.mtthriftException = new MtthriftException(other.mtthriftException);
            }
        }

        public _mtthriftReject_result deepCopy() {
            return new _mtthriftReject_result(this);
        }

        @Override
        public void clear() {
            this.mtthriftException = null;
        }

        public MtthriftException getMtthriftException() {
            return this.mtthriftException;
        }

        public _mtthriftReject_result setMtthriftException(MtthriftException mtthriftException) {
            this.mtthriftException = mtthriftException;
            return this;
        }

        public void unsetMtthriftException() {
            this.mtthriftException = null;
        }

        /** Returns true if field mtthriftException is set (has been assigned a value) and false otherwise */
        public boolean isSetMtthriftException() {
            return this.mtthriftException != null;
        }

        public void setMtthriftExceptionIsSet(boolean value) {
            if (!value) {
                this.mtthriftException = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case MTTHRIFT_EXCEPTION:
                    if (value == null) {
                        unsetMtthriftException();
                    } else {
                        setMtthriftException((MtthriftException)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case MTTHRIFT_EXCEPTION:
                    return getMtthriftException();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case MTTHRIFT_EXCEPTION:
                    return isSetMtthriftException();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof _mtthriftReject_result)
                return this.equalResult((_mtthriftReject_result) that);
            return false;
        }

        public boolean equalResult(_mtthriftReject_result that) {
            if (that == null)
                return false;

            boolean this_present_mtthriftException = true && this.isSetMtthriftException();
            boolean that_present_mtthriftException = true && that.isSetMtthriftException();
            if (this_present_mtthriftException || that_present_mtthriftException) {
                if (!(this_present_mtthriftException && that_present_mtthriftException))
                    return false;
                if (!this.mtthriftException.equalException(that.mtthriftException))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(_mtthriftReject_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            _mtthriftReject_result typedOther = (_mtthriftReject_result)other;

            lastComparison = Boolean.valueOf(isSetMtthriftException()).compareTo(typedOther.isSetMtthriftException());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMtthriftException()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mtthriftException, typedOther.mtthriftException);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("_mtthriftReject_result(");
            boolean first = true;

            sb.append("mtthriftException:");
            if (this.mtthriftException == null) {
                sb.append("null");
            } else {
                sb.append(this.mtthriftException);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class _mtthriftReject_resultStandardSchemeFactory implements SchemeFactory {
            public _mtthriftReject_resultStandardScheme getScheme() {
                return new _mtthriftReject_resultStandardScheme();
            }
        }

        private static class _mtthriftReject_resultStandardScheme extends StandardScheme<_mtthriftReject_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, _mtthriftReject_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // MTTHRIFT_EXCEPTION
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.mtthriftException = new MtthriftException();
                                struct.mtthriftException.read(iprot);
                                struct.setMtthriftExceptionIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, _mtthriftReject_result struct) throws org.apache.thrift.TException {
                struct.validate();

//        oprot.writeStructBegin(STRUCT_DESC);//注释以欺骗框架把结果解析成TApplicationException(杨学华)
                if (struct.mtthriftException != null) {
//          oprot.writeFieldBegin(MTTHRIFT_EXCEPTION_FIELD_DESC);//注释以欺骗框架把结果解析成TApplicationException(杨学华)
                    if(oprot instanceof MtraceServerTBinaryProtocol) {//重写消息头(杨学华)
                        String[] items = struct.mtthriftException.getMessage().split(":");
                        ((MtraceServerTBinaryProtocol)oprot).rewriteMessageBegin(items[0], TMessageType.EXCEPTION, struct.mtthriftException.getCode());
                        struct.mtthriftException.setMessage(items[1]);
                        struct.mtthriftException.setCode(10001);//此处的10001与MTThriftMethodInterceptor的10001相对应
                    }
                    struct.mtthriftException.write(oprot);
//          oprot.writeFieldEnd();//注释以欺骗框架把结果解析成TApplicationException(杨学华)
                }
//        oprot.writeFieldStop();//注释以欺骗框架把结果解析成TApplicationException(杨学华)
//        oprot.writeStructEnd();//注释以欺骗框架把结果解析成TApplicationException(杨学华)
            }

        }

        private static class _mtthriftReject_resultTupleSchemeFactory implements SchemeFactory {
            public _mtthriftReject_resultTupleScheme getScheme() {
                return new _mtthriftReject_resultTupleScheme();
            }
        }

        private static class _mtthriftReject_resultTupleScheme extends TupleScheme<_mtthriftReject_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, _mtthriftReject_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetMtthriftException()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetMtthriftException()) {
                    struct.mtthriftException.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, _mtthriftReject_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.mtthriftException = new MtthriftException();
                    struct.mtthriftException.read(iprot);
                    struct.setMtthriftExceptionIsSet(true);
                }
            }
        }

    }

}