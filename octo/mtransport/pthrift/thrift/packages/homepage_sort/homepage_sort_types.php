<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'].'/packages/fb303/fb303_types.php';

class PageSort_Info {
  static $_TSPEC;

  public $cityid = null;
  public $req = null;
  public $userid = -1;
  public $uuid = "";
  public $session = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cityid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'req',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        3 => array(
          'var' => 'userid',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'uuid',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'session',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['cityid'])) {
        $this->cityid = $vals['cityid'];
      }
      if (isset($vals['req'])) {
        $this->req = $vals['req'];
      }
      if (isset($vals['userid'])) {
        $this->userid = $vals['userid'];
      }
      if (isset($vals['uuid'])) {
        $this->uuid = $vals['uuid'];
      }
      if (isset($vals['session'])) {
        $this->session = $vals['session'];
      }
    }
  }

  public function getName() {
    return 'PageSort_Info';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cityid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->req = array();
            $_size0 = 0;
            $_ktype1 = 0;
            $_vtype2 = 0;
            $xfer += $input->readMapBegin($_ktype1, $_vtype2, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $key5 = 0;
              $val6 = 0;
              $xfer += $input->readI32($key5);
              $xfer += $input->readI32($val6);
              $this->req[$key5] = $val6;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uuid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->session = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $xfer += $input->readString($elem12);
              $this->session []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PageSort_Info');
    if ($this->cityid !== null) {
      $xfer += $output->writeFieldBegin('cityid', TType::I32, 1);
      $xfer += $output->writeI32($this->cityid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->req !== null) {
      if (!is_array($this->req)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('req', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::I32, TType::I32, count($this->req));
        {
          foreach ($this->req as $kiter13 => $viter14)
          {
            $xfer += $output->writeI32($kiter13);
            $xfer += $output->writeI32($viter14);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userid !== null) {
      $xfer += $output->writeFieldBegin('userid', TType::I32, 3);
      $xfer += $output->writeI32($this->userid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uuid !== null) {
      $xfer += $output->writeFieldBegin('uuid', TType::STRING, 4);
      $xfer += $output->writeString($this->uuid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->session !== null) {
      if (!is_array($this->session)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('session', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRING, count($this->session));
        {
          foreach ($this->session as $iter15)
          {
            $xfer += $output->writeString($iter15);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PageSort_Rst {
  static $_TSPEC;

  public $deal_map = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'deal_map',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::LST,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::LST,
            'etype' => TType::I32,
            'elem' => array(
              'type' => TType::I32,
              ),
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['deal_map'])) {
        $this->deal_map = $vals['deal_map'];
      }
    }
  }

  public function getName() {
    return 'PageSort_Rst';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->deal_map = array();
            $_size16 = 0;
            $_ktype17 = 0;
            $_vtype18 = 0;
            $xfer += $input->readMapBegin($_ktype17, $_vtype18, $_size16);
            for ($_i20 = 0; $_i20 < $_size16; ++$_i20)
            {
              $key21 = 0;
              $val22 = array();
              $xfer += $input->readI32($key21);
              $val22 = array();
              $_size23 = 0;
              $_etype26 = 0;
              $xfer += $input->readListBegin($_etype26, $_size23);
              for ($_i27 = 0; $_i27 < $_size23; ++$_i27)
              {
                $elem28 = null;
                $xfer += $input->readI32($elem28);
                $val22 []= $elem28;
              }
              $xfer += $input->readListEnd();
              $this->deal_map[$key21] = $val22;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PageSort_Rst');
    if ($this->deal_map !== null) {
      if (!is_array($this->deal_map)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('deal_map', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::I32, TType::LST, count($this->deal_map));
        {
          foreach ($this->deal_map as $kiter29 => $viter30)
          {
            $xfer += $output->writeI32($kiter29);
            {
              $output->writeListBegin(TType::I32, count($viter30));
              {
                foreach ($viter30 as $iter31)
                {
                  $xfer += $output->writeI32($iter31);
                }
              }
              $output->writeListEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
