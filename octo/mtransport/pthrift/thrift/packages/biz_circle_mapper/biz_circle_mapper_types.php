<?php
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


class Circle {
  static $_TSPEC;

  public $name = null;
  public $id = null;
  public $longitude = null;
  public $latitude = null;
  public $city = null;
  public $city_id = null;
  public $distance = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'longitude',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'latitude',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'city',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'city_id',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'distance',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['longitude'])) {
        $this->longitude = $vals['longitude'];
      }
      if (isset($vals['latitude'])) {
        $this->latitude = $vals['latitude'];
      }
      if (isset($vals['city'])) {
        $this->city = $vals['city'];
      }
      if (isset($vals['city_id'])) {
        $this->city_id = $vals['city_id'];
      }
      if (isset($vals['distance'])) {
        $this->distance = $vals['distance'];
      }
    }
  }

  public function getName() {
    return 'Circle';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->longitude);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->latitude);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->city);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->city_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->distance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Circle');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 2);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->longitude !== null) {
      $xfer += $output->writeFieldBegin('longitude', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->longitude);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->latitude !== null) {
      $xfer += $output->writeFieldBegin('latitude', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->latitude);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->city !== null) {
      $xfer += $output->writeFieldBegin('city', TType::STRING, 5);
      $xfer += $output->writeString($this->city);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->city_id !== null) {
      $xfer += $output->writeFieldBegin('city_id', TType::I32, 6);
      $xfer += $output->writeI32($this->city_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->distance !== null) {
      $xfer += $output->writeFieldBegin('distance', TType::I32, 7);
      $xfer += $output->writeI32($this->distance);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Point {
  static $_TSPEC;

  public $lat = null;
  public $lng = null;
  public $city_id = null;
  public $method = "centroid";
  public $circle_num = 1;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'lat',
          'type' => TType::DOUBLE,
          ),
        2 => array(
          'var' => 'lng',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'city_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'method',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'circle_num',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['lat'])) {
        $this->lat = $vals['lat'];
      }
      if (isset($vals['lng'])) {
        $this->lng = $vals['lng'];
      }
      if (isset($vals['city_id'])) {
        $this->city_id = $vals['city_id'];
      }
      if (isset($vals['method'])) {
        $this->method = $vals['method'];
      }
      if (isset($vals['circle_num'])) {
        $this->circle_num = $vals['circle_num'];
      }
    }
  }

  public function getName() {
    return 'Point';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->lat);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->lng);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->city_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->method);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->circle_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Point');
    if ($this->lat !== null) {
      $xfer += $output->writeFieldBegin('lat', TType::DOUBLE, 1);
      $xfer += $output->writeDouble($this->lat);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lng !== null) {
      $xfer += $output->writeFieldBegin('lng', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->lng);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->method !== null) {
      $xfer += $output->writeFieldBegin('method', TType::STRING, 3);
      $xfer += $output->writeString($this->method);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->city_id !== null) {
      $xfer += $output->writeFieldBegin('city_id', TType::I32, 4);
      $xfer += $output->writeI32($this->city_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->circle_num !== null) {
      $xfer += $output->writeFieldBegin('circle_num', TType::I32, 5);
      $xfer += $output->writeI32($this->circle_num);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CirclePair {
  static $_TSPEC;

  public $circle_left = null;
  public $circle_right = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'circle_left',
          'type' => TType::STRUCT,
          'class' => 'Circle',
          ),
        2 => array(
          'var' => 'circle_right',
          'type' => TType::STRUCT,
          'class' => 'Circle',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['circle_left'])) {
        $this->circle_left = $vals['circle_left'];
      }
      if (isset($vals['circle_right'])) {
        $this->circle_right = $vals['circle_right'];
      }
    }
  }

  public function getName() {
    return 'CirclePair';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->circle_left = new Circle();
            $xfer += $this->circle_left->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->circle_right = new Circle();
            $xfer += $this->circle_right->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CirclePair');
    if ($this->circle_left !== null) {
      if (!is_object($this->circle_left)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('circle_left', TType::STRUCT, 1);
      $xfer += $this->circle_left->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->circle_right !== null) {
      if (!is_object($this->circle_right)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('circle_right', TType::STRUCT, 2);
      $xfer += $this->circle_right->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
