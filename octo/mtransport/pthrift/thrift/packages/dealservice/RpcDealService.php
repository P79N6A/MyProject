<?php
namespace com\meituan\service\deal\thrift;
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'].'/packages/dealservice/dealservice_types.php';

interface RpcDealServiceIf {
  public function getDeal($appKey, $dealId, $loadSpec);
  public function update($deal);
  public function getServerStat();
}

class RpcDealServiceClient implements \com\meituan\service\deal\thrift\RpcDealServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function getDeal($appKey, $dealId, $loadSpec)
  {
    $this->send_getDeal($appKey, $dealId, $loadSpec);
    return $this->recv_getDeal();
  }

  public function send_getDeal($appKey, $dealId, $loadSpec)
  {
    $args = new \com\meituan\service\deal\thrift\RpcDealService_getDeal_args();
    $args->appKey = $appKey;
    $args->dealId = $dealId;
    $args->loadSpec = $loadSpec;
    $bin_accel = ($this->output_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getDeal', \TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getDeal', \TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getDeal()
  {
    $bin_accel = ($this->input_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\meituan\service\deal\thrift\RpcDealService_getDeal_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == \TMessageType::EXCEPTION) {
        $x = new \TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\meituan\service\deal\thrift\RpcDealService_getDeal_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getDeal failed: unknown result");
  }

  public function update($deal)
  {
    $this->send_update($deal);
    $this->recv_update();
  }

  public function send_update($deal)
  {
    $args = new \com\meituan\service\deal\thrift\RpcDealService_update_args();
    $args->deal = $deal;
    $bin_accel = ($this->output_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'update', \TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('update', \TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_update()
  {
    $bin_accel = ($this->input_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\meituan\service\deal\thrift\RpcDealService_update_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == \TMessageType::EXCEPTION) {
        $x = new \TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\meituan\service\deal\thrift\RpcDealService_update_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->iae !== null) {
      throw $result->iae;
    }
    if ($result->iee !== null) {
      throw $result->iee;
    }
    return;
  }

  public function getServerStat()
  {
    $this->send_getServerStat();
    return $this->recv_getServerStat();
  }

  public function send_getServerStat()
  {
    $args = new \com\meituan\service\deal\thrift\RpcDealService_getServerStat_args();
    $bin_accel = ($this->output_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getServerStat', \TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getServerStat', \TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getServerStat()
  {
    $bin_accel = ($this->input_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\meituan\service\deal\thrift\RpcDealService_getServerStat_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == \TMessageType::EXCEPTION) {
        $x = new \TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\meituan\service\deal\thrift\RpcDealService_getServerStat_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getServerStat failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class RpcDealService_getDeal_args {
  static $_TSPEC;

  public $appKey = null;
  public $dealId = null;
  public $loadSpec = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'appKey',
          'type' => \TType::STRING,
          ),
        2 => array(
          'var' => 'dealId',
          'type' => \TType::I32,
          ),
        3 => array(
          'var' => 'loadSpec',
          'type' => \TType::STRUCT,
          'class' => '\com\meituan\service\deal\thrift\DealLoadSpec',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['appKey'])) {
        $this->appKey = $vals['appKey'];
      }
      if (isset($vals['dealId'])) {
        $this->dealId = $vals['dealId'];
      }
      if (isset($vals['loadSpec'])) {
        $this->loadSpec = $vals['loadSpec'];
      }
    }
  }

  public function getName() {
    return 'RpcDealService_getDeal_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->appKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->dealId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == \TType::STRUCT) {
            $this->loadSpec = new \com\meituan\service\deal\thrift\DealLoadSpec();
            $xfer += $this->loadSpec->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RpcDealService_getDeal_args');
    if ($this->appKey !== null) {
      $xfer += $output->writeFieldBegin('appKey', \TType::STRING, 1);
      $xfer += $output->writeString($this->appKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dealId !== null) {
      $xfer += $output->writeFieldBegin('dealId', \TType::I32, 2);
      $xfer += $output->writeI32($this->dealId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->loadSpec !== null) {
      if (!is_object($this->loadSpec)) {
        throw new \TProtocolException('Bad type in structure.', \TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('loadSpec', \TType::STRUCT, 3);
      $xfer += $this->loadSpec->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RpcDealService_getDeal_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => \TType::STRUCT,
          'class' => '\com\meituan\service\deal\thrift\Deal',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'RpcDealService_getDeal_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == \TType::STRUCT) {
            $this->success = new \com\meituan\service\deal\thrift\Deal();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RpcDealService_getDeal_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new \TProtocolException('Bad type in structure.', \TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', \TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RpcDealService_update_args {
  static $_TSPEC;

  public $deal = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'deal',
          'type' => \TType::STRUCT,
          'class' => '\com\meituan\service\deal\thrift\Deal',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['deal'])) {
        $this->deal = $vals['deal'];
      }
    }
  }

  public function getName() {
    return 'RpcDealService_update_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::STRUCT) {
            $this->deal = new \com\meituan\service\deal\thrift\Deal();
            $xfer += $this->deal->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RpcDealService_update_args');
    if ($this->deal !== null) {
      if (!is_object($this->deal)) {
        throw new \TProtocolException('Bad type in structure.', \TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('deal', \TType::STRUCT, 1);
      $xfer += $this->deal->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RpcDealService_update_result {
  static $_TSPEC;

  public $iae = null;
  public $iee = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'iae',
          'type' => \TType::STRUCT,
          'class' => '\com\meituan\service\deal\thrift\InvalidArgumentException',
          ),
        2 => array(
          'var' => 'iee',
          'type' => \TType::STRUCT,
          'class' => '\com\meituan\service\deal\thrift\InternalErrorException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['iae'])) {
        $this->iae = $vals['iae'];
      }
      if (isset($vals['iee'])) {
        $this->iee = $vals['iee'];
      }
    }
  }

  public function getName() {
    return 'RpcDealService_update_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::STRUCT) {
            $this->iae = new \com\meituan\service\deal\thrift\InvalidArgumentException();
            $xfer += $this->iae->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == \TType::STRUCT) {
            $this->iee = new \com\meituan\service\deal\thrift\InternalErrorException();
            $xfer += $this->iee->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RpcDealService_update_result');
    if ($this->iae !== null) {
      $xfer += $output->writeFieldBegin('iae', \TType::STRUCT, 1);
      $xfer += $this->iae->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iee !== null) {
      $xfer += $output->writeFieldBegin('iee', \TType::STRUCT, 2);
      $xfer += $this->iee->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RpcDealService_getServerStat_args {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'RpcDealService_getServerStat_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RpcDealService_getServerStat_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RpcDealService_getServerStat_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => \TType::MAP,
          'ktype' => \TType::STRING,
          'vtype' => \TType::I64,
          'key' => array(
            'type' => \TType::STRING,
          ),
          'val' => array(
            'type' => \TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'RpcDealService_getServerStat_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == \TType::MAP) {
            $this->success = array();
            $_size73 = 0;
            $_ktype74 = 0;
            $_vtype75 = 0;
            $xfer += $input->readMapBegin($_ktype74, $_vtype75, $_size73);
            for ($_i77 = 0; $_i77 < $_size73; ++$_i77)
            {
              $key78 = '';
              $val79 = 0;
              $xfer += $input->readString($key78);
              $xfer += $input->readI64($val79);
              $this->success[$key78] = $val79;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RpcDealService_getServerStat_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new \TProtocolException('Bad type in structure.', \TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', \TType::MAP, 0);
      {
        $output->writeMapBegin(\TType::STRING, \TType::I64, count($this->success));
        {
          foreach ($this->success as $kiter80 => $viter81)
          {
            $xfer += $output->writeString($kiter80);
            $xfer += $output->writeI64($viter81);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
