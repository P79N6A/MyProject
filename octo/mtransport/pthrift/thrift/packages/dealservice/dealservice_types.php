<?php
namespace com\meituan\service\deal\thrift;
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


class DealBuyLimit {
  static $_TSPEC;

  public $minNumber = null;
  public $maxNumber = null;
  public $minNumberPerUser = null;
  public $maxNumberPerUser = null;
  public $maxNumberPerOrder = null;
  public $maxNumberPerMobile = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        10 => array(
          'var' => 'minNumber',
          'type' => \TType::I32,
          ),
        20 => array(
          'var' => 'maxNumber',
          'type' => \TType::I32,
          ),
        30 => array(
          'var' => 'minNumberPerUser',
          'type' => \TType::I32,
          ),
        40 => array(
          'var' => 'maxNumberPerUser',
          'type' => \TType::I32,
          ),
        50 => array(
          'var' => 'maxNumberPerOrder',
          'type' => \TType::I32,
          ),
        60 => array(
          'var' => 'maxNumberPerMobile',
          'type' => \TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['minNumber'])) {
        $this->minNumber = $vals['minNumber'];
      }
      if (isset($vals['maxNumber'])) {
        $this->maxNumber = $vals['maxNumber'];
      }
      if (isset($vals['minNumberPerUser'])) {
        $this->minNumberPerUser = $vals['minNumberPerUser'];
      }
      if (isset($vals['maxNumberPerUser'])) {
        $this->maxNumberPerUser = $vals['maxNumberPerUser'];
      }
      if (isset($vals['maxNumberPerOrder'])) {
        $this->maxNumberPerOrder = $vals['maxNumberPerOrder'];
      }
      if (isset($vals['maxNumberPerMobile'])) {
        $this->maxNumberPerMobile = $vals['maxNumberPerMobile'];
      }
    }
  }

  public function getName() {
    return 'DealBuyLimit';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 10:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->minNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->maxNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->minNumberPerUser);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 40:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->maxNumberPerUser);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 50:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->maxNumberPerOrder);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 60:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->maxNumberPerMobile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DealBuyLimit');
    if ($this->minNumber !== null) {
      $xfer += $output->writeFieldBegin('minNumber', \TType::I32, 10);
      $xfer += $output->writeI32($this->minNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxNumber !== null) {
      $xfer += $output->writeFieldBegin('maxNumber', \TType::I32, 20);
      $xfer += $output->writeI32($this->maxNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->minNumberPerUser !== null) {
      $xfer += $output->writeFieldBegin('minNumberPerUser', \TType::I32, 30);
      $xfer += $output->writeI32($this->minNumberPerUser);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxNumberPerUser !== null) {
      $xfer += $output->writeFieldBegin('maxNumberPerUser', \TType::I32, 40);
      $xfer += $output->writeI32($this->maxNumberPerUser);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxNumberPerOrder !== null) {
      $xfer += $output->writeFieldBegin('maxNumberPerOrder', \TType::I32, 50);
      $xfer += $output->writeI32($this->maxNumberPerOrder);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxNumberPerMobile !== null) {
      $xfer += $output->writeFieldBegin('maxNumberPerMobile', \TType::I32, 60);
      $xfer += $output->writeI32($this->maxNumberPerMobile);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DealDeliveryInfo {
  static $_TSPEC;

  public $deliveryFee = null;
  public $freeMoney = null;
  public $freeNeedNum = null;
  public $deliverTime = null;
  public $deliverRate = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        10 => array(
          'var' => 'deliveryFee',
          'type' => \TType::DOUBLE,
          ),
        30 => array(
          'var' => 'freeMoney',
          'type' => \TType::DOUBLE,
          ),
        40 => array(
          'var' => 'freeNeedNum',
          'type' => \TType::I32,
          ),
        50 => array(
          'var' => 'deliverTime',
          'type' => \TType::I32,
          ),
        60 => array(
          'var' => 'deliverRate',
          'type' => \TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['deliveryFee'])) {
        $this->deliveryFee = $vals['deliveryFee'];
      }
      if (isset($vals['freeMoney'])) {
        $this->freeMoney = $vals['freeMoney'];
      }
      if (isset($vals['freeNeedNum'])) {
        $this->freeNeedNum = $vals['freeNeedNum'];
      }
      if (isset($vals['deliverTime'])) {
        $this->deliverTime = $vals['deliverTime'];
      }
      if (isset($vals['deliverRate'])) {
        $this->deliverRate = $vals['deliverRate'];
      }
    }
  }

  public function getName() {
    return 'DealDeliveryInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 10:
          if ($ftype == \TType::DOUBLE) {
            $xfer += $input->readDouble($this->deliveryFee);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == \TType::DOUBLE) {
            $xfer += $input->readDouble($this->freeMoney);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 40:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->freeNeedNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 50:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->deliverTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 60:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->deliverRate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DealDeliveryInfo');
    if ($this->deliveryFee !== null) {
      $xfer += $output->writeFieldBegin('deliveryFee', \TType::DOUBLE, 10);
      $xfer += $output->writeDouble($this->deliveryFee);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->freeMoney !== null) {
      $xfer += $output->writeFieldBegin('freeMoney', \TType::DOUBLE, 30);
      $xfer += $output->writeDouble($this->freeMoney);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->freeNeedNum !== null) {
      $xfer += $output->writeFieldBegin('freeNeedNum', \TType::I32, 40);
      $xfer += $output->writeI32($this->freeNeedNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deliverTime !== null) {
      $xfer += $output->writeFieldBegin('deliverTime', \TType::I32, 50);
      $xfer += $output->writeI32($this->deliverTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deliverRate !== null) {
      $xfer += $output->writeFieldBegin('deliverRate', \TType::I32, 60);
      $xfer += $output->writeI32($this->deliverRate);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DealBizInfo {
  static $_TSPEC;

  public $poiIds = null;
  public $rangeName = null;
  public $brandName = null;
  public $qq = null;
  public $QQs = null;
  public $zoom = null;
  public $latitude = null;
  public $longitude = null;
  public $bizAcctId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        10 => array(
          'var' => 'poiIds',
          'type' => \TType::LST,
          'etype' => \TType::I32,
          'elem' => array(
            'type' => \TType::I32,
            ),
          ),
        20 => array(
          'var' => 'rangeName',
          'type' => \TType::STRING,
          ),
        30 => array(
          'var' => 'brandName',
          'type' => \TType::STRING,
          ),
        40 => array(
          'var' => 'qq',
          'type' => \TType::I64,
          ),
        41 => array(
          'var' => 'QQs',
          'type' => \TType::STRING,
          ),
        50 => array(
          'var' => 'zoom',
          'type' => \TType::I32,
          ),
        60 => array(
          'var' => 'latitude',
          'type' => \TType::DOUBLE,
          ),
        70 => array(
          'var' => 'longitude',
          'type' => \TType::DOUBLE,
          ),
        80 => array(
          'var' => 'bizAcctId',
          'type' => \TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['poiIds'])) {
        $this->poiIds = $vals['poiIds'];
      }
      if (isset($vals['rangeName'])) {
        $this->rangeName = $vals['rangeName'];
      }
      if (isset($vals['brandName'])) {
        $this->brandName = $vals['brandName'];
      }
      if (isset($vals['qq'])) {
        $this->qq = $vals['qq'];
      }
      if (isset($vals['QQs'])) {
        $this->QQs = $vals['QQs'];
      }
      if (isset($vals['zoom'])) {
        $this->zoom = $vals['zoom'];
      }
      if (isset($vals['latitude'])) {
        $this->latitude = $vals['latitude'];
      }
      if (isset($vals['longitude'])) {
        $this->longitude = $vals['longitude'];
      }
      if (isset($vals['bizAcctId'])) {
        $this->bizAcctId = $vals['bizAcctId'];
      }
    }
  }

  public function getName() {
    return 'DealBizInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 10:
          if ($ftype == \TType::LST) {
            $this->poiIds = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readI32($elem5);
              $this->poiIds []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->rangeName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->brandName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 40:
          if ($ftype == \TType::I64) {
            $xfer += $input->readI64($this->qq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 41:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->QQs);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 50:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->zoom);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 60:
          if ($ftype == \TType::DOUBLE) {
            $xfer += $input->readDouble($this->latitude);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 70:
          if ($ftype == \TType::DOUBLE) {
            $xfer += $input->readDouble($this->longitude);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 80:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->bizAcctId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DealBizInfo');
    if ($this->poiIds !== null) {
      if (!is_array($this->poiIds)) {
        throw new \TProtocolException('Bad type in structure.', \TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('poiIds', \TType::LST, 10);
      {
        $output->writeListBegin(\TType::I32, count($this->poiIds));
        {
          foreach ($this->poiIds as $iter6)
          {
            $xfer += $output->writeI32($iter6);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rangeName !== null) {
      $xfer += $output->writeFieldBegin('rangeName', \TType::STRING, 20);
      $xfer += $output->writeString($this->rangeName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->brandName !== null) {
      $xfer += $output->writeFieldBegin('brandName', \TType::STRING, 30);
      $xfer += $output->writeString($this->brandName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->qq !== null) {
      $xfer += $output->writeFieldBegin('qq', \TType::I64, 40);
      $xfer += $output->writeI64($this->qq);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->QQs !== null) {
      $xfer += $output->writeFieldBegin('QQs', \TType::STRING, 41);
      $xfer += $output->writeString($this->QQs);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->zoom !== null) {
      $xfer += $output->writeFieldBegin('zoom', \TType::I32, 50);
      $xfer += $output->writeI32($this->zoom);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->latitude !== null) {
      $xfer += $output->writeFieldBegin('latitude', \TType::DOUBLE, 60);
      $xfer += $output->writeDouble($this->latitude);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->longitude !== null) {
      $xfer += $output->writeFieldBegin('longitude', \TType::DOUBLE, 70);
      $xfer += $output->writeDouble($this->longitude);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bizAcctId !== null) {
      $xfer += $output->writeFieldBegin('bizAcctId', \TType::I32, 80);
      $xfer += $output->writeI32($this->bizAcctId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ImageInfo {
  static $_TSPEC;

  public $desc = null;
  public $src = null;
  public $type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'desc',
          'type' => \TType::STRING,
          ),
        2 => array(
          'var' => 'src',
          'type' => \TType::STRING,
          ),
        3 => array(
          'var' => 'type',
          'type' => \TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
      if (isset($vals['src'])) {
        $this->src = $vals['src'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
    }
  }

  public function getName() {
    return 'ImageInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->src);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ImageInfo');
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', \TType::STRING, 1);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->src !== null) {
      $xfer += $output->writeFieldBegin('src', \TType::STRING, 2);
      $xfer += $output->writeString($this->src);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', \TType::I32, 3);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DealImages {
  static $_TSPEC;

  public $mobCoverImage = null;
  public $wwwCoverImages = null;
  public $imagesInfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobCoverImage',
          'type' => \TType::STRING,
          ),
        2 => array(
          'var' => 'wwwCoverImages',
          'type' => \TType::LST,
          'etype' => \TType::STRING,
          'elem' => array(
            'type' => \TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'imagesInfo',
          'type' => \TType::LST,
          'etype' => \TType::STRUCT,
          'elem' => array(
            'type' => \TType::STRUCT,
            'class' => '\com\meituan\service\deal\thrift\ImageInfo',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mobCoverImage'])) {
        $this->mobCoverImage = $vals['mobCoverImage'];
      }
      if (isset($vals['wwwCoverImages'])) {
        $this->wwwCoverImages = $vals['wwwCoverImages'];
      }
      if (isset($vals['imagesInfo'])) {
        $this->imagesInfo = $vals['imagesInfo'];
      }
    }
  }

  public function getName() {
    return 'DealImages';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->mobCoverImage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == \TType::LST) {
            $this->wwwCoverImages = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $xfer += $input->readString($elem12);
              $this->wwwCoverImages []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == \TType::LST) {
            $this->imagesInfo = array();
            $_size13 = 0;
            $_etype16 = 0;
            $xfer += $input->readListBegin($_etype16, $_size13);
            for ($_i17 = 0; $_i17 < $_size13; ++$_i17)
            {
              $elem18 = null;
              $elem18 = new \com\meituan\service\deal\thrift\ImageInfo();
              $xfer += $elem18->read($input);
              $this->imagesInfo []= $elem18;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DealImages');
    if ($this->mobCoverImage !== null) {
      $xfer += $output->writeFieldBegin('mobCoverImage', \TType::STRING, 1);
      $xfer += $output->writeString($this->mobCoverImage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wwwCoverImages !== null) {
      if (!is_array($this->wwwCoverImages)) {
        throw new \TProtocolException('Bad type in structure.', \TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('wwwCoverImages', \TType::LST, 2);
      {
        $output->writeListBegin(\TType::STRING, count($this->wwwCoverImages));
        {
          foreach ($this->wwwCoverImages as $iter19)
          {
            $xfer += $output->writeString($iter19);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->imagesInfo !== null) {
      if (!is_array($this->imagesInfo)) {
        throw new \TProtocolException('Bad type in structure.', \TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('imagesInfo', \TType::LST, 3);
      {
        $output->writeListBegin(\TType::STRUCT, count($this->imagesInfo));
        {
          foreach ($this->imagesInfo as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DealDetail {
  static $_TSPEC;

  public $menuIds = null;
  public $menuHeader = null;
  public $ktvSpecialMenu = null;
  public $term = null;
  public $voice = null;
  public $detail = null;
  public $description = null;
  public $dealDesc = null;
  public $bizDesc = null;
  public $_addTime = null;
  public $_modTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        10 => array(
          'var' => 'menuIds',
          'type' => \TType::LST,
          'etype' => \TType::I32,
          'elem' => array(
            'type' => \TType::I32,
            ),
          ),
        20 => array(
          'var' => 'menuHeader',
          'type' => \TType::STRING,
          ),
        21 => array(
          'var' => 'ktvSpecialMenu',
          'type' => \TType::STRING,
          ),
        25 => array(
          'var' => 'term',
          'type' => \TType::STRING,
          ),
        26 => array(
          'var' => 'voice',
          'type' => \TType::STRING,
          ),
        30 => array(
          'var' => 'detail',
          'type' => \TType::STRING,
          ),
        35 => array(
          'var' => 'description',
          'type' => \TType::STRING,
          ),
        42 => array(
          'var' => 'dealDesc',
          'type' => \TType::STRING,
          ),
        50 => array(
          'var' => 'bizDesc',
          'type' => \TType::STRING,
          ),
        90 => array(
          'var' => '_addTime',
          'type' => \TType::I32,
          ),
        91 => array(
          'var' => '_modTime',
          'type' => \TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['menuIds'])) {
        $this->menuIds = $vals['menuIds'];
      }
      if (isset($vals['menuHeader'])) {
        $this->menuHeader = $vals['menuHeader'];
      }
      if (isset($vals['ktvSpecialMenu'])) {
        $this->ktvSpecialMenu = $vals['ktvSpecialMenu'];
      }
      if (isset($vals['term'])) {
        $this->term = $vals['term'];
      }
      if (isset($vals['voice'])) {
        $this->voice = $vals['voice'];
      }
      if (isset($vals['detail'])) {
        $this->detail = $vals['detail'];
      }
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
      if (isset($vals['dealDesc'])) {
        $this->dealDesc = $vals['dealDesc'];
      }
      if (isset($vals['bizDesc'])) {
        $this->bizDesc = $vals['bizDesc'];
      }
      if (isset($vals['_addTime'])) {
        $this->_addTime = $vals['_addTime'];
      }
      if (isset($vals['_modTime'])) {
        $this->_modTime = $vals['_modTime'];
      }
    }
  }

  public function getName() {
    return 'DealDetail';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 10:
          if ($ftype == \TType::LST) {
            $this->menuIds = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $xfer += $input->readI32($elem26);
              $this->menuIds []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->menuHeader);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->ktvSpecialMenu);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->term);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->voice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->detail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 35:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 42:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->dealDesc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 50:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->bizDesc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 90:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->_addTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 91:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->_modTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DealDetail');
    if ($this->menuIds !== null) {
      if (!is_array($this->menuIds)) {
        throw new \TProtocolException('Bad type in structure.', \TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('menuIds', \TType::LST, 10);
      {
        $output->writeListBegin(\TType::I32, count($this->menuIds));
        {
          foreach ($this->menuIds as $iter27)
          {
            $xfer += $output->writeI32($iter27);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->menuHeader !== null) {
      $xfer += $output->writeFieldBegin('menuHeader', \TType::STRING, 20);
      $xfer += $output->writeString($this->menuHeader);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ktvSpecialMenu !== null) {
      $xfer += $output->writeFieldBegin('ktvSpecialMenu', \TType::STRING, 21);
      $xfer += $output->writeString($this->ktvSpecialMenu);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->term !== null) {
      $xfer += $output->writeFieldBegin('term', \TType::STRING, 25);
      $xfer += $output->writeString($this->term);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->voice !== null) {
      $xfer += $output->writeFieldBegin('voice', \TType::STRING, 26);
      $xfer += $output->writeString($this->voice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->detail !== null) {
      $xfer += $output->writeFieldBegin('detail', \TType::STRING, 30);
      $xfer += $output->writeString($this->detail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', \TType::STRING, 35);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dealDesc !== null) {
      $xfer += $output->writeFieldBegin('dealDesc', \TType::STRING, 42);
      $xfer += $output->writeString($this->dealDesc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bizDesc !== null) {
      $xfer += $output->writeFieldBegin('bizDesc', \TType::STRING, 50);
      $xfer += $output->writeString($this->bizDesc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->_addTime !== null) {
      $xfer += $output->writeFieldBegin('_addTime', \TType::I32, 90);
      $xfer += $output->writeI32($this->_addTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->_modTime !== null) {
      $xfer += $output->writeFieldBegin('_modTime', \TType::I32, 91);
      $xfer += $output->writeI32($this->_modTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DealPriceCalendar {
  static $_TSPEC;

  public $id = null;
  public $type = null;
  public $price = null;
  public $buyPrice = null;
  public $saleBeginTime = null;
  public $saleEndTime = null;
  public $useBeginTime = null;
  public $useEndTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        10 => array(
          'var' => 'id',
          'type' => \TType::I32,
          ),
        20 => array(
          'var' => 'type',
          'type' => \TType::I16,
          ),
        30 => array(
          'var' => 'price',
          'type' => \TType::DOUBLE,
          ),
        40 => array(
          'var' => 'buyPrice',
          'type' => \TType::DOUBLE,
          ),
        50 => array(
          'var' => 'saleBeginTime',
          'type' => \TType::I32,
          ),
        60 => array(
          'var' => 'saleEndTime',
          'type' => \TType::I32,
          ),
        70 => array(
          'var' => 'useBeginTime',
          'type' => \TType::I32,
          ),
        80 => array(
          'var' => 'useEndTime',
          'type' => \TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['buyPrice'])) {
        $this->buyPrice = $vals['buyPrice'];
      }
      if (isset($vals['saleBeginTime'])) {
        $this->saleBeginTime = $vals['saleBeginTime'];
      }
      if (isset($vals['saleEndTime'])) {
        $this->saleEndTime = $vals['saleEndTime'];
      }
      if (isset($vals['useBeginTime'])) {
        $this->useBeginTime = $vals['useBeginTime'];
      }
      if (isset($vals['useEndTime'])) {
        $this->useEndTime = $vals['useEndTime'];
      }
    }
  }

  public function getName() {
    return 'DealPriceCalendar';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 10:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == \TType::I16) {
            $xfer += $input->readI16($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == \TType::DOUBLE) {
            $xfer += $input->readDouble($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 40:
          if ($ftype == \TType::DOUBLE) {
            $xfer += $input->readDouble($this->buyPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 50:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->saleBeginTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 60:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->saleEndTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 70:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->useBeginTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 80:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->useEndTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DealPriceCalendar');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', \TType::I32, 10);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', \TType::I16, 20);
      $xfer += $output->writeI16($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', \TType::DOUBLE, 30);
      $xfer += $output->writeDouble($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->buyPrice !== null) {
      $xfer += $output->writeFieldBegin('buyPrice', \TType::DOUBLE, 40);
      $xfer += $output->writeDouble($this->buyPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->saleBeginTime !== null) {
      $xfer += $output->writeFieldBegin('saleBeginTime', \TType::I32, 50);
      $xfer += $output->writeI32($this->saleBeginTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->saleEndTime !== null) {
      $xfer += $output->writeFieldBegin('saleEndTime', \TType::I32, 60);
      $xfer += $output->writeI32($this->saleEndTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->useBeginTime !== null) {
      $xfer += $output->writeFieldBegin('useBeginTime', \TType::I32, 70);
      $xfer += $output->writeI32($this->useBeginTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->useEndTime !== null) {
      $xfer += $output->writeFieldBegin('useEndTime', \TType::I32, 80);
      $xfer += $output->writeI32($this->useEndTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DealGoods {
  static $_TSPEC;

  public $id = null;
  public $curNumber = null;
  public $maxNumber = null;
  public $couponBeginTime = null;
  public $couponEndTime = null;
  public $name = null;
  public $desc = null;
  public $fromCtId = null;
  public $status = null;
  public $poiId = null;
  public $bizloginId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        10 => array(
          'var' => 'id',
          'type' => \TType::I32,
          ),
        20 => array(
          'var' => 'curNumber',
          'type' => \TType::I32,
          ),
        30 => array(
          'var' => 'maxNumber',
          'type' => \TType::I32,
          ),
        40 => array(
          'var' => 'couponBeginTime',
          'type' => \TType::I32,
          ),
        50 => array(
          'var' => 'couponEndTime',
          'type' => \TType::I32,
          ),
        60 => array(
          'var' => 'name',
          'type' => \TType::STRING,
          ),
        70 => array(
          'var' => 'desc',
          'type' => \TType::STRING,
          ),
        80 => array(
          'var' => 'fromCtId',
          'type' => \TType::I32,
          ),
        90 => array(
          'var' => 'status',
          'type' => \TType::I16,
          ),
        100 => array(
          'var' => 'poiId',
          'type' => \TType::I32,
          ),
        110 => array(
          'var' => 'bizloginId',
          'type' => \TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['curNumber'])) {
        $this->curNumber = $vals['curNumber'];
      }
      if (isset($vals['maxNumber'])) {
        $this->maxNumber = $vals['maxNumber'];
      }
      if (isset($vals['couponBeginTime'])) {
        $this->couponBeginTime = $vals['couponBeginTime'];
      }
      if (isset($vals['couponEndTime'])) {
        $this->couponEndTime = $vals['couponEndTime'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
      if (isset($vals['fromCtId'])) {
        $this->fromCtId = $vals['fromCtId'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['poiId'])) {
        $this->poiId = $vals['poiId'];
      }
      if (isset($vals['bizloginId'])) {
        $this->bizloginId = $vals['bizloginId'];
      }
    }
  }

  public function getName() {
    return 'DealGoods';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 10:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->curNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->maxNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 40:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->couponBeginTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 50:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->couponEndTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 60:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 70:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 80:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->fromCtId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 90:
          if ($ftype == \TType::I16) {
            $xfer += $input->readI16($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 100:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->poiId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 110:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->bizloginId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DealGoods');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', \TType::I32, 10);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->curNumber !== null) {
      $xfer += $output->writeFieldBegin('curNumber', \TType::I32, 20);
      $xfer += $output->writeI32($this->curNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxNumber !== null) {
      $xfer += $output->writeFieldBegin('maxNumber', \TType::I32, 30);
      $xfer += $output->writeI32($this->maxNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->couponBeginTime !== null) {
      $xfer += $output->writeFieldBegin('couponBeginTime', \TType::I32, 40);
      $xfer += $output->writeI32($this->couponBeginTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->couponEndTime !== null) {
      $xfer += $output->writeFieldBegin('couponEndTime', \TType::I32, 50);
      $xfer += $output->writeI32($this->couponEndTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', \TType::STRING, 60);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', \TType::STRING, 70);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fromCtId !== null) {
      $xfer += $output->writeFieldBegin('fromCtId', \TType::I32, 80);
      $xfer += $output->writeI32($this->fromCtId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', \TType::I16, 90);
      $xfer += $output->writeI16($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->poiId !== null) {
      $xfer += $output->writeFieldBegin('poiId', \TType::I32, 100);
      $xfer += $output->writeI32($this->poiId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bizloginId !== null) {
      $xfer += $output->writeFieldBegin('bizloginId', \TType::I32, 110);
      $xfer += $output->writeI32($this->bizloginId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MenuTable {
  static $_TSPEC;

  public $id = null;
  public $submitterId = null;
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        10 => array(
          'var' => 'id',
          'type' => \TType::I32,
          ),
        20 => array(
          'var' => 'submitterId',
          'type' => \TType::STRING,
          ),
        30 => array(
          'var' => 'data',
          'type' => \TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['submitterId'])) {
        $this->submitterId = $vals['submitterId'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'MenuTable';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 10:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->submitterId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->data);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MenuTable');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', \TType::I32, 10);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->submitterId !== null) {
      $xfer += $output->writeFieldBegin('submitterId', \TType::STRING, 20);
      $xfer += $output->writeString($this->submitterId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      $xfer += $output->writeFieldBegin('data', \TType::STRING, 30);
      $xfer += $output->writeString($this->data);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Deal {
  static $_TSPEC;

  public $id = null;
  public $slug = null;
  public $price = null;
  public $value = null;
  public $curNumber = null;
  public $cityIds = null;
  public $status = null;
  public $attributes = null;
  public $couponType = null;
  public $dealTypeId = null;
  public $title = null;
  public $shortTitle = null;
  public $couponTitle = null;
  public $smsTitle = null;
  public $beginTime = null;
  public $endTime = null;
  public $couponBeginTime = null;
  public $couponEndTime = null;
  public $dealTime = null;
  public $soldoutTime = null;
  public $updateTime = null;
  public $imageUrl = null;
  public $usage = null;
  public $finePrint = null;
  public $finePrintSms = null;
  public $images = null;
  public $detailText = null;
  public $menus = null;
  public $buyLimit = null;
  public $deliveryInfo = null;
  public $xattrs = null;
  public $bizInfo = null;
  public $goods = null;
  public $priceCalendars = null;
  public $destinations = null;
  public $mealNumber = null;
  public $partner = null;
  public $signUnitId = null;
  public $createType = null;
  public $contractNumber = null;
  public $predealId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        100 => array(
          'var' => 'id',
          'type' => \TType::I32,
          ),
        110 => array(
          'var' => 'slug',
          'type' => \TType::STRING,
          ),
        200 => array(
          'var' => 'price',
          'type' => \TType::DOUBLE,
          ),
        210 => array(
          'var' => 'value',
          'type' => \TType::DOUBLE,
          ),
        220 => array(
          'var' => 'curNumber',
          'type' => \TType::I32,
          ),
        230 => array(
          'var' => 'cityIds',
          'type' => \TType::LST,
          'etype' => \TType::I16,
          'elem' => array(
            'type' => \TType::I16,
            ),
          ),
        300 => array(
          'var' => 'status',
          'type' => \TType::I32,
          ),
        310 => array(
          'var' => 'attributes',
          'type' => \TType::I64,
          ),
        400 => array(
          'var' => 'couponType',
          'type' => \TType::I32,
          ),
        410 => array(
          'var' => 'dealTypeId',
          'type' => \TType::I32,
          ),
        510 => array(
          'var' => 'title',
          'type' => \TType::STRING,
          ),
        520 => array(
          'var' => 'shortTitle',
          'type' => \TType::STRING,
          ),
        530 => array(
          'var' => 'couponTitle',
          'type' => \TType::STRING,
          ),
        540 => array(
          'var' => 'smsTitle',
          'type' => \TType::STRING,
          ),
        600 => array(
          'var' => 'beginTime',
          'type' => \TType::I32,
          ),
        610 => array(
          'var' => 'endTime',
          'type' => \TType::I32,
          ),
        620 => array(
          'var' => 'couponBeginTime',
          'type' => \TType::I32,
          ),
        630 => array(
          'var' => 'couponEndTime',
          'type' => \TType::I32,
          ),
        640 => array(
          'var' => 'dealTime',
          'type' => \TType::I32,
          ),
        650 => array(
          'var' => 'soldoutTime',
          'type' => \TType::I32,
          ),
        660 => array(
          'var' => 'updateTime',
          'type' => \TType::I32,
          ),
        700 => array(
          'var' => 'imageUrl',
          'type' => \TType::STRING,
          ),
        720 => array(
          'var' => 'usage',
          'type' => \TType::STRING,
          ),
        730 => array(
          'var' => 'finePrint',
          'type' => \TType::STRING,
          ),
        740 => array(
          'var' => 'finePrintSms',
          'type' => \TType::STRING,
          ),
        750 => array(
          'var' => 'images',
          'type' => \TType::STRUCT,
          'class' => '\com\meituan\service\deal\thrift\DealImages',
          ),
        760 => array(
          'var' => 'detailText',
          'type' => \TType::STRUCT,
          'class' => '\com\meituan\service\deal\thrift\DealDetail',
          ),
        770 => array(
          'var' => 'menus',
          'type' => \TType::LST,
          'etype' => \TType::STRUCT,
          'elem' => array(
            'type' => \TType::STRUCT,
            'class' => '\com\meituan\service\deal\thrift\MenuTable',
            ),
          ),
        800 => array(
          'var' => 'buyLimit',
          'type' => \TType::STRUCT,
          'class' => '\com\meituan\service\deal\thrift\DealBuyLimit',
          ),
        810 => array(
          'var' => 'deliveryInfo',
          'type' => \TType::STRUCT,
          'class' => '\com\meituan\service\deal\thrift\DealDeliveryInfo',
          ),
        820 => array(
          'var' => 'xattrs',
          'type' => \TType::STRING,
          ),
        830 => array(
          'var' => 'bizInfo',
          'type' => \TType::STRUCT,
          'class' => '\com\meituan\service\deal\thrift\DealBizInfo',
          ),
        840 => array(
          'var' => 'goods',
          'type' => \TType::LST,
          'etype' => \TType::STRUCT,
          'elem' => array(
            'type' => \TType::STRUCT,
            'class' => '\com\meituan\service\deal\thrift\DealGoods',
            ),
          ),
        850 => array(
          'var' => 'priceCalendars',
          'type' => \TType::LST,
          'etype' => \TType::STRUCT,
          'elem' => array(
            'type' => \TType::STRUCT,
            'class' => '\com\meituan\service\deal\thrift\DealPriceCalendar',
            ),
          ),
        860 => array(
          'var' => 'destinations',
          'type' => \TType::MAP,
          'ktype' => \TType::I32,
          'vtype' => \TType::STRING,
          'key' => array(
            'type' => \TType::I32,
          ),
          'val' => array(
            'type' => \TType::STRING,
            ),
          ),
        870 => array(
          'var' => 'mealNumber',
          'type' => \TType::SET,
          'etype' => \TType::I16,
          'elem' => array(
            'type' => \TType::I16,
            ),
          ),
        900 => array(
          'var' => 'partner',
          'type' => \TType::I32,
          ),
        910 => array(
          'var' => 'signUnitId',
          'type' => \TType::I32,
          ),
        920 => array(
          'var' => 'createType',
          'type' => \TType::I32,
          ),
        930 => array(
          'var' => 'contractNumber',
          'type' => \TType::STRING,
          ),
        940 => array(
          'var' => 'predealId',
          'type' => \TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['slug'])) {
        $this->slug = $vals['slug'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['curNumber'])) {
        $this->curNumber = $vals['curNumber'];
      }
      if (isset($vals['cityIds'])) {
        $this->cityIds = $vals['cityIds'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
      if (isset($vals['couponType'])) {
        $this->couponType = $vals['couponType'];
      }
      if (isset($vals['dealTypeId'])) {
        $this->dealTypeId = $vals['dealTypeId'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['shortTitle'])) {
        $this->shortTitle = $vals['shortTitle'];
      }
      if (isset($vals['couponTitle'])) {
        $this->couponTitle = $vals['couponTitle'];
      }
      if (isset($vals['smsTitle'])) {
        $this->smsTitle = $vals['smsTitle'];
      }
      if (isset($vals['beginTime'])) {
        $this->beginTime = $vals['beginTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['couponBeginTime'])) {
        $this->couponBeginTime = $vals['couponBeginTime'];
      }
      if (isset($vals['couponEndTime'])) {
        $this->couponEndTime = $vals['couponEndTime'];
      }
      if (isset($vals['dealTime'])) {
        $this->dealTime = $vals['dealTime'];
      }
      if (isset($vals['soldoutTime'])) {
        $this->soldoutTime = $vals['soldoutTime'];
      }
      if (isset($vals['updateTime'])) {
        $this->updateTime = $vals['updateTime'];
      }
      if (isset($vals['imageUrl'])) {
        $this->imageUrl = $vals['imageUrl'];
      }
      if (isset($vals['usage'])) {
        $this->usage = $vals['usage'];
      }
      if (isset($vals['finePrint'])) {
        $this->finePrint = $vals['finePrint'];
      }
      if (isset($vals['finePrintSms'])) {
        $this->finePrintSms = $vals['finePrintSms'];
      }
      if (isset($vals['images'])) {
        $this->images = $vals['images'];
      }
      if (isset($vals['detailText'])) {
        $this->detailText = $vals['detailText'];
      }
      if (isset($vals['menus'])) {
        $this->menus = $vals['menus'];
      }
      if (isset($vals['buyLimit'])) {
        $this->buyLimit = $vals['buyLimit'];
      }
      if (isset($vals['deliveryInfo'])) {
        $this->deliveryInfo = $vals['deliveryInfo'];
      }
      if (isset($vals['xattrs'])) {
        $this->xattrs = $vals['xattrs'];
      }
      if (isset($vals['bizInfo'])) {
        $this->bizInfo = $vals['bizInfo'];
      }
      if (isset($vals['goods'])) {
        $this->goods = $vals['goods'];
      }
      if (isset($vals['priceCalendars'])) {
        $this->priceCalendars = $vals['priceCalendars'];
      }
      if (isset($vals['destinations'])) {
        $this->destinations = $vals['destinations'];
      }
      if (isset($vals['mealNumber'])) {
        $this->mealNumber = $vals['mealNumber'];
      }
      if (isset($vals['partner'])) {
        $this->partner = $vals['partner'];
      }
      if (isset($vals['signUnitId'])) {
        $this->signUnitId = $vals['signUnitId'];
      }
      if (isset($vals['createType'])) {
        $this->createType = $vals['createType'];
      }
      if (isset($vals['contractNumber'])) {
        $this->contractNumber = $vals['contractNumber'];
      }
      if (isset($vals['predealId'])) {
        $this->predealId = $vals['predealId'];
      }
    }
  }

  public function getName() {
    return 'Deal';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 100:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 110:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->slug);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 200:
          if ($ftype == \TType::DOUBLE) {
            $xfer += $input->readDouble($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 210:
          if ($ftype == \TType::DOUBLE) {
            $xfer += $input->readDouble($this->value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 220:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->curNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 230:
          if ($ftype == \TType::LST) {
            $this->cityIds = array();
            $_size28 = 0;
            $_etype31 = 0;
            $xfer += $input->readListBegin($_etype31, $_size28);
            for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
            {
              $elem33 = null;
              $xfer += $input->readI16($elem33);
              $this->cityIds []= $elem33;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 300:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 310:
          if ($ftype == \TType::I64) {
            $xfer += $input->readI64($this->attributes);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 400:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->couponType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 410:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->dealTypeId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 510:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 520:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->shortTitle);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 530:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->couponTitle);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 540:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->smsTitle);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 600:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->beginTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 610:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 620:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->couponBeginTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 630:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->couponEndTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 640:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->dealTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 650:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->soldoutTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 660:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->updateTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 700:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->imageUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 720:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->usage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 730:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->finePrint);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 740:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->finePrintSms);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 750:
          if ($ftype == \TType::STRUCT) {
            $this->images = new \com\meituan\service\deal\thrift\DealImages();
            $xfer += $this->images->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 760:
          if ($ftype == \TType::STRUCT) {
            $this->detailText = new \com\meituan\service\deal\thrift\DealDetail();
            $xfer += $this->detailText->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 770:
          if ($ftype == \TType::LST) {
            $this->menus = array();
            $_size34 = 0;
            $_etype37 = 0;
            $xfer += $input->readListBegin($_etype37, $_size34);
            for ($_i38 = 0; $_i38 < $_size34; ++$_i38)
            {
              $elem39 = null;
              $elem39 = new \com\meituan\service\deal\thrift\MenuTable();
              $xfer += $elem39->read($input);
              $this->menus []= $elem39;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 800:
          if ($ftype == \TType::STRUCT) {
            $this->buyLimit = new \com\meituan\service\deal\thrift\DealBuyLimit();
            $xfer += $this->buyLimit->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 810:
          if ($ftype == \TType::STRUCT) {
            $this->deliveryInfo = new \com\meituan\service\deal\thrift\DealDeliveryInfo();
            $xfer += $this->deliveryInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 820:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->xattrs);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 830:
          if ($ftype == \TType::STRUCT) {
            $this->bizInfo = new \com\meituan\service\deal\thrift\DealBizInfo();
            $xfer += $this->bizInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 840:
          if ($ftype == \TType::LST) {
            $this->goods = array();
            $_size40 = 0;
            $_etype43 = 0;
            $xfer += $input->readListBegin($_etype43, $_size40);
            for ($_i44 = 0; $_i44 < $_size40; ++$_i44)
            {
              $elem45 = null;
              $elem45 = new \com\meituan\service\deal\thrift\DealGoods();
              $xfer += $elem45->read($input);
              $this->goods []= $elem45;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 850:
          if ($ftype == \TType::LST) {
            $this->priceCalendars = array();
            $_size46 = 0;
            $_etype49 = 0;
            $xfer += $input->readListBegin($_etype49, $_size46);
            for ($_i50 = 0; $_i50 < $_size46; ++$_i50)
            {
              $elem51 = null;
              $elem51 = new \com\meituan\service\deal\thrift\DealPriceCalendar();
              $xfer += $elem51->read($input);
              $this->priceCalendars []= $elem51;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 860:
          if ($ftype == \TType::MAP) {
            $this->destinations = array();
            $_size52 = 0;
            $_ktype53 = 0;
            $_vtype54 = 0;
            $xfer += $input->readMapBegin($_ktype53, $_vtype54, $_size52);
            for ($_i56 = 0; $_i56 < $_size52; ++$_i56)
            {
              $key57 = 0;
              $val58 = '';
              $xfer += $input->readI32($key57);
              $xfer += $input->readString($val58);
              $this->destinations[$key57] = $val58;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 870:
          if ($ftype == \TType::SET) {
            $this->mealNumber = array();
            $_size59 = 0;
            $_etype62 = 0;
            $xfer += $input->readSetBegin($_etype62, $_size59);
            for ($_i63 = 0; $_i63 < $_size59; ++$_i63)
            {
              $elem64 = null;
              $xfer += $input->readI16($elem64);
              if (is_scalar($elem64)) {
                $this->mealNumber[$elem64] = true;
              } else {
                $this->mealNumber []= $elem64;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 900:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->partner);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 910:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->signUnitId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 920:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->createType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 930:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->contractNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 940:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->predealId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Deal');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', \TType::I32, 100);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->slug !== null) {
      $xfer += $output->writeFieldBegin('slug', \TType::STRING, 110);
      $xfer += $output->writeString($this->slug);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', \TType::DOUBLE, 200);
      $xfer += $output->writeDouble($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      $xfer += $output->writeFieldBegin('value', \TType::DOUBLE, 210);
      $xfer += $output->writeDouble($this->value);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->curNumber !== null) {
      $xfer += $output->writeFieldBegin('curNumber', \TType::I32, 220);
      $xfer += $output->writeI32($this->curNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cityIds !== null) {
      if (!is_array($this->cityIds)) {
        throw new \TProtocolException('Bad type in structure.', \TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('cityIds', \TType::LST, 230);
      {
        $output->writeListBegin(\TType::I16, count($this->cityIds));
        {
          foreach ($this->cityIds as $iter65)
          {
            $xfer += $output->writeI16($iter65);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', \TType::I32, 300);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      $xfer += $output->writeFieldBegin('attributes', \TType::I64, 310);
      $xfer += $output->writeI64($this->attributes);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->couponType !== null) {
      $xfer += $output->writeFieldBegin('couponType', \TType::I32, 400);
      $xfer += $output->writeI32($this->couponType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dealTypeId !== null) {
      $xfer += $output->writeFieldBegin('dealTypeId', \TType::I32, 410);
      $xfer += $output->writeI32($this->dealTypeId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', \TType::STRING, 510);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shortTitle !== null) {
      $xfer += $output->writeFieldBegin('shortTitle', \TType::STRING, 520);
      $xfer += $output->writeString($this->shortTitle);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->couponTitle !== null) {
      $xfer += $output->writeFieldBegin('couponTitle', \TType::STRING, 530);
      $xfer += $output->writeString($this->couponTitle);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->smsTitle !== null) {
      $xfer += $output->writeFieldBegin('smsTitle', \TType::STRING, 540);
      $xfer += $output->writeString($this->smsTitle);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->beginTime !== null) {
      $xfer += $output->writeFieldBegin('beginTime', \TType::I32, 600);
      $xfer += $output->writeI32($this->beginTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', \TType::I32, 610);
      $xfer += $output->writeI32($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->couponBeginTime !== null) {
      $xfer += $output->writeFieldBegin('couponBeginTime', \TType::I32, 620);
      $xfer += $output->writeI32($this->couponBeginTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->couponEndTime !== null) {
      $xfer += $output->writeFieldBegin('couponEndTime', \TType::I32, 630);
      $xfer += $output->writeI32($this->couponEndTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dealTime !== null) {
      $xfer += $output->writeFieldBegin('dealTime', \TType::I32, 640);
      $xfer += $output->writeI32($this->dealTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->soldoutTime !== null) {
      $xfer += $output->writeFieldBegin('soldoutTime', \TType::I32, 650);
      $xfer += $output->writeI32($this->soldoutTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updateTime !== null) {
      $xfer += $output->writeFieldBegin('updateTime', \TType::I32, 660);
      $xfer += $output->writeI32($this->updateTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->imageUrl !== null) {
      $xfer += $output->writeFieldBegin('imageUrl', \TType::STRING, 700);
      $xfer += $output->writeString($this->imageUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usage !== null) {
      $xfer += $output->writeFieldBegin('usage', \TType::STRING, 720);
      $xfer += $output->writeString($this->usage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->finePrint !== null) {
      $xfer += $output->writeFieldBegin('finePrint', \TType::STRING, 730);
      $xfer += $output->writeString($this->finePrint);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->finePrintSms !== null) {
      $xfer += $output->writeFieldBegin('finePrintSms', \TType::STRING, 740);
      $xfer += $output->writeString($this->finePrintSms);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->images !== null) {
      if (!is_object($this->images)) {
        throw new \TProtocolException('Bad type in structure.', \TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('images', \TType::STRUCT, 750);
      $xfer += $this->images->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->detailText !== null) {
      if (!is_object($this->detailText)) {
        throw new \TProtocolException('Bad type in structure.', \TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('detailText', \TType::STRUCT, 760);
      $xfer += $this->detailText->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->menus !== null) {
      if (!is_array($this->menus)) {
        throw new \TProtocolException('Bad type in structure.', \TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('menus', \TType::LST, 770);
      {
        $output->writeListBegin(\TType::STRUCT, count($this->menus));
        {
          foreach ($this->menus as $iter66)
          {
            $xfer += $iter66->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->buyLimit !== null) {
      if (!is_object($this->buyLimit)) {
        throw new \TProtocolException('Bad type in structure.', \TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('buyLimit', \TType::STRUCT, 800);
      $xfer += $this->buyLimit->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deliveryInfo !== null) {
      if (!is_object($this->deliveryInfo)) {
        throw new \TProtocolException('Bad type in structure.', \TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('deliveryInfo', \TType::STRUCT, 810);
      $xfer += $this->deliveryInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->xattrs !== null) {
      $xfer += $output->writeFieldBegin('xattrs', \TType::STRING, 820);
      $xfer += $output->writeString($this->xattrs);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bizInfo !== null) {
      if (!is_object($this->bizInfo)) {
        throw new \TProtocolException('Bad type in structure.', \TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('bizInfo', \TType::STRUCT, 830);
      $xfer += $this->bizInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods !== null) {
      if (!is_array($this->goods)) {
        throw new \TProtocolException('Bad type in structure.', \TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('goods', \TType::LST, 840);
      {
        $output->writeListBegin(\TType::STRUCT, count($this->goods));
        {
          foreach ($this->goods as $iter67)
          {
            $xfer += $iter67->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priceCalendars !== null) {
      if (!is_array($this->priceCalendars)) {
        throw new \TProtocolException('Bad type in structure.', \TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('priceCalendars', \TType::LST, 850);
      {
        $output->writeListBegin(\TType::STRUCT, count($this->priceCalendars));
        {
          foreach ($this->priceCalendars as $iter68)
          {
            $xfer += $iter68->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->destinations !== null) {
      if (!is_array($this->destinations)) {
        throw new \TProtocolException('Bad type in structure.', \TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('destinations', \TType::MAP, 860);
      {
        $output->writeMapBegin(\TType::I32, \TType::STRING, count($this->destinations));
        {
          foreach ($this->destinations as $kiter69 => $viter70)
          {
            $xfer += $output->writeI32($kiter69);
            $xfer += $output->writeString($viter70);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mealNumber !== null) {
      if (!is_array($this->mealNumber)) {
        throw new \TProtocolException('Bad type in structure.', \TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('mealNumber', \TType::SET, 870);
      {
        $output->writeSetBegin(\TType::I16, count($this->mealNumber));
        {
          foreach ($this->mealNumber as $iter71 => $iter72)
          {
            if (is_scalar($iter72)) {
            $xfer += $output->writeI16($iter71);
            } else {
            $xfer += $output->writeI16($iter72);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->partner !== null) {
      $xfer += $output->writeFieldBegin('partner', \TType::I32, 900);
      $xfer += $output->writeI32($this->partner);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->signUnitId !== null) {
      $xfer += $output->writeFieldBegin('signUnitId', \TType::I32, 910);
      $xfer += $output->writeI32($this->signUnitId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createType !== null) {
      $xfer += $output->writeFieldBegin('createType', \TType::I32, 920);
      $xfer += $output->writeI32($this->createType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contractNumber !== null) {
      $xfer += $output->writeFieldBegin('contractNumber', \TType::STRING, 930);
      $xfer += $output->writeString($this->contractNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->predealId !== null) {
      $xfer += $output->writeFieldBegin('predealId', \TType::STRING, 940);
      $xfer += $output->writeString($this->predealId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DealLoadSpec {
  static $_TSPEC;

  public $basic = null;
  public $withDetail = null;
  public $withXAttrs = null;
  public $withBizInfo = null;
  public $withPriceCalendar = null;
  public $withDealGoods = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'basic',
          'type' => \TType::BOOL,
          ),
        2 => array(
          'var' => 'withDetail',
          'type' => \TType::BOOL,
          ),
        3 => array(
          'var' => 'withXAttrs',
          'type' => \TType::BOOL,
          ),
        4 => array(
          'var' => 'withBizInfo',
          'type' => \TType::BOOL,
          ),
        5 => array(
          'var' => 'withPriceCalendar',
          'type' => \TType::BOOL,
          ),
        6 => array(
          'var' => 'withDealGoods',
          'type' => \TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['basic'])) {
        $this->basic = $vals['basic'];
      }
      if (isset($vals['withDetail'])) {
        $this->withDetail = $vals['withDetail'];
      }
      if (isset($vals['withXAttrs'])) {
        $this->withXAttrs = $vals['withXAttrs'];
      }
      if (isset($vals['withBizInfo'])) {
        $this->withBizInfo = $vals['withBizInfo'];
      }
      if (isset($vals['withPriceCalendar'])) {
        $this->withPriceCalendar = $vals['withPriceCalendar'];
      }
      if (isset($vals['withDealGoods'])) {
        $this->withDealGoods = $vals['withDealGoods'];
      }
    }
  }

  public function getName() {
    return 'DealLoadSpec';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::BOOL) {
            $xfer += $input->readBool($this->basic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == \TType::BOOL) {
            $xfer += $input->readBool($this->withDetail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == \TType::BOOL) {
            $xfer += $input->readBool($this->withXAttrs);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == \TType::BOOL) {
            $xfer += $input->readBool($this->withBizInfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == \TType::BOOL) {
            $xfer += $input->readBool($this->withPriceCalendar);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == \TType::BOOL) {
            $xfer += $input->readBool($this->withDealGoods);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DealLoadSpec');
    if ($this->basic !== null) {
      $xfer += $output->writeFieldBegin('basic', \TType::BOOL, 1);
      $xfer += $output->writeBool($this->basic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->withDetail !== null) {
      $xfer += $output->writeFieldBegin('withDetail', \TType::BOOL, 2);
      $xfer += $output->writeBool($this->withDetail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->withXAttrs !== null) {
      $xfer += $output->writeFieldBegin('withXAttrs', \TType::BOOL, 3);
      $xfer += $output->writeBool($this->withXAttrs);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->withBizInfo !== null) {
      $xfer += $output->writeFieldBegin('withBizInfo', \TType::BOOL, 4);
      $xfer += $output->writeBool($this->withBizInfo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->withPriceCalendar !== null) {
      $xfer += $output->writeFieldBegin('withPriceCalendar', \TType::BOOL, 5);
      $xfer += $output->writeBool($this->withPriceCalendar);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->withDealGoods !== null) {
      $xfer += $output->writeFieldBegin('withDealGoods', \TType::BOOL, 6);
      $xfer += $output->writeBool($this->withDealGoods);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class InvalidArgumentException extends \TException {
  static $_TSPEC;

  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'message',
          'type' => \TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'InvalidArgumentException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InvalidArgumentException');
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', \TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class InternalErrorException extends \TException {
  static $_TSPEC;

  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'message',
          'type' => \TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'InternalErrorException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InternalErrorException');
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', \TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
