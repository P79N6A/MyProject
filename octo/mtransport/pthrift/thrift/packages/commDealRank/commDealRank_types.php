<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'].'/packages/fb303/fb303_types.php';

class Login_Info {
  static $_TSPEC;

  public $usrid = null;
  public $uuid = null;
  public $ip = null;
  public $cityid = null;
  public $dealids = null;
  public $source = null;
  public $buyids = null;
  public $dealid = null;
  public $typeid = null;
  public $debug = null;
  public $filter = null;
  public $offset = null;
  public $limit = null;
  public $rid = null;
  public $filterinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'usrid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'uuid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ip',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'cityid',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'dealids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        6 => array(
          'var' => 'source',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'buyids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        8 => array(
          'var' => 'dealid',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'typeid',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'debug',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'filter',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'rid',
          'type' => TType::I64,
          ),
        15 => array(
          'var' => 'filterinfo',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['usrid'])) {
        $this->usrid = $vals['usrid'];
      }
      if (isset($vals['uuid'])) {
        $this->uuid = $vals['uuid'];
      }
      if (isset($vals['ip'])) {
        $this->ip = $vals['ip'];
      }
      if (isset($vals['cityid'])) {
        $this->cityid = $vals['cityid'];
      }
      if (isset($vals['dealids'])) {
        $this->dealids = $vals['dealids'];
      }
      if (isset($vals['source'])) {
        $this->source = $vals['source'];
      }
      if (isset($vals['buyids'])) {
        $this->buyids = $vals['buyids'];
      }
      if (isset($vals['dealid'])) {
        $this->dealid = $vals['dealid'];
      }
      if (isset($vals['typeid'])) {
        $this->typeid = $vals['typeid'];
      }
      if (isset($vals['debug'])) {
        $this->debug = $vals['debug'];
      }
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['rid'])) {
        $this->rid = $vals['rid'];
      }
      if (isset($vals['filterinfo'])) {
        $this->filterinfo = $vals['filterinfo'];
      }
    }
  }

  public function getName() {
    return 'Login_Info';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->usrid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uuid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cityid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->dealids = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readI32($elem5);
              $this->dealids []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->source);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::LST) {
            $this->buyids = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readListBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $xfer += $input->readI32($elem11);
              $this->buyids []= $elem11;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->dealid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->typeid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->debug);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->filter);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->rid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::MAP) {
            $this->filterinfo = array();
            $_size12 = 0;
            $_ktype13 = 0;
            $_vtype14 = 0;
            $xfer += $input->readMapBegin($_ktype13, $_vtype14, $_size12);
            for ($_i16 = 0; $_i16 < $_size12; ++$_i16)
            {
              $key17 = '';
              $val18 = 0;
              $xfer += $input->readString($key17);
              $xfer += $input->readI32($val18);
              $this->filterinfo[$key17] = $val18;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Login_Info');
    if ($this->usrid !== null) {
      $xfer += $output->writeFieldBegin('usrid', TType::I32, 1);
      $xfer += $output->writeI32($this->usrid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uuid !== null) {
      $xfer += $output->writeFieldBegin('uuid', TType::STRING, 2);
      $xfer += $output->writeString($this->uuid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ip !== null) {
      $xfer += $output->writeFieldBegin('ip', TType::I32, 3);
      $xfer += $output->writeI32($this->ip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cityid !== null) {
      $xfer += $output->writeFieldBegin('cityid', TType::I32, 4);
      $xfer += $output->writeI32($this->cityid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dealids !== null) {
      if (!is_array($this->dealids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('dealids', TType::LST, 5);
      {
        $output->writeListBegin(TType::I32, count($this->dealids));
        {
          foreach ($this->dealids as $iter19)
          {
            $xfer += $output->writeI32($iter19);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source !== null) {
      $xfer += $output->writeFieldBegin('source', TType::STRING, 6);
      $xfer += $output->writeString($this->source);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->buyids !== null) {
      if (!is_array($this->buyids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('buyids', TType::LST, 7);
      {
        $output->writeListBegin(TType::I32, count($this->buyids));
        {
          foreach ($this->buyids as $iter20)
          {
            $xfer += $output->writeI32($iter20);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dealid !== null) {
      $xfer += $output->writeFieldBegin('dealid', TType::I32, 8);
      $xfer += $output->writeI32($this->dealid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->typeid !== null) {
      $xfer += $output->writeFieldBegin('typeid', TType::I32, 9);
      $xfer += $output->writeI32($this->typeid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->debug !== null) {
      $xfer += $output->writeFieldBegin('debug', TType::I32, 10);
      $xfer += $output->writeI32($this->debug);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter !== null) {
      $xfer += $output->writeFieldBegin('filter', TType::I32, 11);
      $xfer += $output->writeI32($this->filter);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I32, 12);
      $xfer += $output->writeI32($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 13);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rid !== null) {
      $xfer += $output->writeFieldBegin('rid', TType::I64, 14);
      $xfer += $output->writeI64($this->rid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filterinfo !== null) {
      if (!is_array($this->filterinfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('filterinfo', TType::MAP, 15);
      {
        $output->writeMapBegin(TType::STRING, TType::I32, count($this->filterinfo));
        {
          foreach ($this->filterinfo as $kiter21 => $viter22)
          {
            $xfer += $output->writeString($kiter21);
            $xfer += $output->writeI32($viter22);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RankDebug {
  static $_TSPEC;

  public $geoprefs = null;
  public $typeprefs = null;
  public $priceprefs = null;
  public $details = null;
  public $mesg = null;
  public $sessions = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'geoprefs',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::DOUBLE,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::DOUBLE,
            ),
          ),
        2 => array(
          'var' => 'typeprefs',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::DOUBLE,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::DOUBLE,
            ),
          ),
        3 => array(
          'var' => 'priceprefs',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::DOUBLE,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::DOUBLE,
            ),
          ),
        4 => array(
          'var' => 'details',
          'type' => TType::LST,
          'etype' => TType::MAP,
          'elem' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRING,
              ),
            ),
          ),
        5 => array(
          'var' => 'mesg',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'sessions',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['geoprefs'])) {
        $this->geoprefs = $vals['geoprefs'];
      }
      if (isset($vals['typeprefs'])) {
        $this->typeprefs = $vals['typeprefs'];
      }
      if (isset($vals['priceprefs'])) {
        $this->priceprefs = $vals['priceprefs'];
      }
      if (isset($vals['details'])) {
        $this->details = $vals['details'];
      }
      if (isset($vals['mesg'])) {
        $this->mesg = $vals['mesg'];
      }
      if (isset($vals['sessions'])) {
        $this->sessions = $vals['sessions'];
      }
    }
  }

  public function getName() {
    return 'RankDebug';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->geoprefs = array();
            $_size23 = 0;
            $_ktype24 = 0;
            $_vtype25 = 0;
            $xfer += $input->readMapBegin($_ktype24, $_vtype25, $_size23);
            for ($_i27 = 0; $_i27 < $_size23; ++$_i27)
            {
              $key28 = 0;
              $val29 = 0.0;
              $xfer += $input->readI32($key28);
              $xfer += $input->readDouble($val29);
              $this->geoprefs[$key28] = $val29;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->typeprefs = array();
            $_size30 = 0;
            $_ktype31 = 0;
            $_vtype32 = 0;
            $xfer += $input->readMapBegin($_ktype31, $_vtype32, $_size30);
            for ($_i34 = 0; $_i34 < $_size30; ++$_i34)
            {
              $key35 = 0;
              $val36 = 0.0;
              $xfer += $input->readI32($key35);
              $xfer += $input->readDouble($val36);
              $this->typeprefs[$key35] = $val36;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->priceprefs = array();
            $_size37 = 0;
            $_ktype38 = 0;
            $_vtype39 = 0;
            $xfer += $input->readMapBegin($_ktype38, $_vtype39, $_size37);
            for ($_i41 = 0; $_i41 < $_size37; ++$_i41)
            {
              $key42 = 0;
              $val43 = 0.0;
              $xfer += $input->readI32($key42);
              $xfer += $input->readDouble($val43);
              $this->priceprefs[$key42] = $val43;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->details = array();
            $_size44 = 0;
            $_etype47 = 0;
            $xfer += $input->readListBegin($_etype47, $_size44);
            for ($_i48 = 0; $_i48 < $_size44; ++$_i48)
            {
              $elem49 = null;
              $elem49 = array();
              $_size50 = 0;
              $_ktype51 = 0;
              $_vtype52 = 0;
              $xfer += $input->readMapBegin($_ktype51, $_vtype52, $_size50);
              for ($_i54 = 0; $_i54 < $_size50; ++$_i54)
              {
                $key55 = '';
                $val56 = '';
                $xfer += $input->readString($key55);
                $xfer += $input->readString($val56);
                $elem49[$key55] = $val56;
              }
              $xfer += $input->readMapEnd();
              $this->details []= $elem49;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mesg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->sessions = array();
            $_size57 = 0;
            $_etype60 = 0;
            $xfer += $input->readListBegin($_etype60, $_size57);
            for ($_i61 = 0; $_i61 < $_size57; ++$_i61)
            {
              $elem62 = null;
              $xfer += $input->readString($elem62);
              $this->sessions []= $elem62;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RankDebug');
    if ($this->geoprefs !== null) {
      if (!is_array($this->geoprefs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('geoprefs', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::I32, TType::DOUBLE, count($this->geoprefs));
        {
          foreach ($this->geoprefs as $kiter63 => $viter64)
          {
            $xfer += $output->writeI32($kiter63);
            $xfer += $output->writeDouble($viter64);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->typeprefs !== null) {
      if (!is_array($this->typeprefs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('typeprefs', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::I32, TType::DOUBLE, count($this->typeprefs));
        {
          foreach ($this->typeprefs as $kiter65 => $viter66)
          {
            $xfer += $output->writeI32($kiter65);
            $xfer += $output->writeDouble($viter66);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priceprefs !== null) {
      if (!is_array($this->priceprefs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('priceprefs', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::I32, TType::DOUBLE, count($this->priceprefs));
        {
          foreach ($this->priceprefs as $kiter67 => $viter68)
          {
            $xfer += $output->writeI32($kiter67);
            $xfer += $output->writeDouble($viter68);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->details !== null) {
      if (!is_array($this->details)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('details', TType::LST, 4);
      {
        $output->writeListBegin(TType::MAP, count($this->details));
        {
          foreach ($this->details as $iter69)
          {
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($iter69));
              {
                foreach ($iter69 as $kiter70 => $viter71)
                {
                  $xfer += $output->writeString($kiter70);
                  $xfer += $output->writeString($viter71);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mesg !== null) {
      $xfer += $output->writeFieldBegin('mesg', TType::STRING, 5);
      $xfer += $output->writeString($this->mesg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessions !== null) {
      if (!is_array($this->sessions)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('sessions', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRING, count($this->sessions));
        {
          foreach ($this->sessions as $iter72)
          {
            $xfer += $output->writeString($iter72);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Deal_List {
  static $_TSPEC;

  public $deal_list = null;
  public $rank_method = null;
  public $debuginfo = null;
  public $tag = null;
  public $deal_geotag = null;
  public $rdebug = null;
  public $acm = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'deal_list',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        2 => array(
          'var' => 'rank_method',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'debuginfo',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'tag',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'deal_geotag',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        6 => array(
          'var' => 'rdebug',
          'type' => TType::STRUCT,
          'class' => 'RankDebug',
          ),
        7 => array(
          'var' => 'acm',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['deal_list'])) {
        $this->deal_list = $vals['deal_list'];
      }
      if (isset($vals['rank_method'])) {
        $this->rank_method = $vals['rank_method'];
      }
      if (isset($vals['debuginfo'])) {
        $this->debuginfo = $vals['debuginfo'];
      }
      if (isset($vals['tag'])) {
        $this->tag = $vals['tag'];
      }
      if (isset($vals['deal_geotag'])) {
        $this->deal_geotag = $vals['deal_geotag'];
      }
      if (isset($vals['rdebug'])) {
        $this->rdebug = $vals['rdebug'];
      }
      if (isset($vals['acm'])) {
        $this->acm = $vals['acm'];
      }
    }
  }

  public function getName() {
    return 'Deal_List';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->deal_list = array();
            $_size73 = 0;
            $_etype76 = 0;
            $xfer += $input->readListBegin($_etype76, $_size73);
            for ($_i77 = 0; $_i77 < $_size73; ++$_i77)
            {
              $elem78 = null;
              $xfer += $input->readI32($elem78);
              $this->deal_list []= $elem78;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->rank_method);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->debuginfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::MAP) {
            $this->deal_geotag = array();
            $_size79 = 0;
            $_ktype80 = 0;
            $_vtype81 = 0;
            $xfer += $input->readMapBegin($_ktype80, $_vtype81, $_size79);
            for ($_i83 = 0; $_i83 < $_size79; ++$_i83)
            {
              $key84 = 0;
              $val85 = '';
              $xfer += $input->readI32($key84);
              $xfer += $input->readString($val85);
              $this->deal_geotag[$key84] = $val85;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->rdebug = new RankDebug();
            $xfer += $this->rdebug->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::LST) {
            $this->acm = array();
            $_size86 = 0;
            $_etype89 = 0;
            $xfer += $input->readListBegin($_etype89, $_size86);
            for ($_i90 = 0; $_i90 < $_size86; ++$_i90)
            {
              $elem91 = null;
              $xfer += $input->readString($elem91);
              $this->acm []= $elem91;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Deal_List');
    if ($this->deal_list !== null) {
      if (!is_array($this->deal_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('deal_list', TType::LST, 1);
      {
        $output->writeListBegin(TType::I32, count($this->deal_list));
        {
          foreach ($this->deal_list as $iter92)
          {
            $xfer += $output->writeI32($iter92);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rank_method !== null) {
      $xfer += $output->writeFieldBegin('rank_method', TType::I16, 2);
      $xfer += $output->writeI16($this->rank_method);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->debuginfo !== null) {
      $xfer += $output->writeFieldBegin('debuginfo', TType::STRING, 3);
      $xfer += $output->writeString($this->debuginfo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tag !== null) {
      $xfer += $output->writeFieldBegin('tag', TType::STRING, 4);
      $xfer += $output->writeString($this->tag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deal_geotag !== null) {
      if (!is_array($this->deal_geotag)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('deal_geotag', TType::MAP, 5);
      {
        $output->writeMapBegin(TType::I32, TType::STRING, count($this->deal_geotag));
        {
          foreach ($this->deal_geotag as $kiter93 => $viter94)
          {
            $xfer += $output->writeI32($kiter93);
            $xfer += $output->writeString($viter94);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rdebug !== null) {
      if (!is_object($this->rdebug)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('rdebug', TType::STRUCT, 6);
      $xfer += $this->rdebug->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->acm !== null) {
      if (!is_array($this->acm)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('acm', TType::LST, 7);
      {
        $output->writeListBegin(TType::STRING, count($this->acm));
        {
          foreach ($this->acm as $iter95)
          {
            $xfer += $output->writeString($iter95);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
