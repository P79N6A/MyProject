<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


class SuggestRes {
  static $_TSPEC;

  public $suggest_list = null;
  public $category_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'suggest_list',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'category_list',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['suggest_list'])) {
        $this->suggest_list = $vals['suggest_list'];
      }
      if (isset($vals['category_list'])) {
        $this->category_list = $vals['category_list'];
      }
    }
  }

  public function getName() {
    return 'SuggestRes';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->suggest_list = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readString($elem5);
              $this->suggest_list []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->category_list = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readListBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $xfer += $input->readString($elem11);
              $this->category_list []= $elem11;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SuggestRes');
    if ($this->suggest_list !== null) {
      if (!is_array($this->suggest_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('suggest_list', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->suggest_list));
        {
          foreach ($this->suggest_list as $iter12)
          {
            $xfer += $output->writeString($iter12);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->category_list !== null) {
      if (!is_array($this->category_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('category_list', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->category_list));
        {
          foreach ($this->category_list as $iter13)
          {
            $xfer += $output->writeString($iter13);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MovieShowInfo {
  static $_TSPEC;

  public $movie_id = null;
  public $theatre_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'movie_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'theatre_id',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['movie_id'])) {
        $this->movie_id = $vals['movie_id'];
      }
      if (isset($vals['theatre_id'])) {
        $this->theatre_id = $vals['theatre_id'];
      }
    }
  }

  public function getName() {
    return 'MovieShowInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->movie_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->theatre_id = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $xfer += $input->readI32($elem19);
              $this->theatre_id []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MovieShowInfo');
    if ($this->movie_id !== null) {
      $xfer += $output->writeFieldBegin('movie_id', TType::I32, 1);
      $xfer += $output->writeI32($this->movie_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->theatre_id !== null) {
      if (!is_array($this->theatre_id)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('theatre_id', TType::LST, 2);
      {
        $output->writeListBegin(TType::I32, count($this->theatre_id));
        {
          foreach ($this->theatre_id as $iter20)
          {
            $xfer += $output->writeI32($iter20);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SecSugItem {
  static $_TSPEC;

  public $word = null;
  public $gid = null;
  public $acm = null;
  public $movie_show_info = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'word',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'gid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'acm',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'movie_show_info',
          'type' => TType::STRUCT,
          'class' => 'MovieShowInfo',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['word'])) {
        $this->word = $vals['word'];
      }
      if (isset($vals['gid'])) {
        $this->gid = $vals['gid'];
      }
      if (isset($vals['acm'])) {
        $this->acm = $vals['acm'];
      }
      if (isset($vals['movie_show_info'])) {
        $this->movie_show_info = $vals['movie_show_info'];
      }
    }
  }

  public function getName() {
    return 'SecSugItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->word);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->gid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->acm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->movie_show_info = new MovieShowInfo();
            $xfer += $this->movie_show_info->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SecSugItem');
    if ($this->word !== null) {
      $xfer += $output->writeFieldBegin('word', TType::STRING, 1);
      $xfer += $output->writeString($this->word);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gid !== null) {
      $xfer += $output->writeFieldBegin('gid', TType::STRING, 2);
      $xfer += $output->writeString($this->gid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->acm !== null) {
      $xfer += $output->writeFieldBegin('acm', TType::STRING, 3);
      $xfer += $output->writeString($this->acm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->movie_show_info !== null) {
      if (!is_object($this->movie_show_info)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('movie_show_info', TType::STRUCT, 4);
      $xfer += $this->movie_show_info->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SuggestItem {
  static $_TSPEC;

  public $word = null;
  public $count = null;
  public $sec_rec = null;
  public $gid = null;
  public $acm = null;
  public $category_type = null;
  public $show_info_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'word',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'sec_rec',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'SecSugItem',
            ),
          ),
        4 => array(
          'var' => 'gid',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'acm',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'category_type',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'show_info_type',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['word'])) {
        $this->word = $vals['word'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
      if (isset($vals['sec_rec'])) {
        $this->sec_rec = $vals['sec_rec'];
      }
      if (isset($vals['gid'])) {
        $this->gid = $vals['gid'];
      }
      if (isset($vals['acm'])) {
        $this->acm = $vals['acm'];
      }
      if (isset($vals['category_type'])) {
        $this->category_type = $vals['category_type'];
      }
      if (isset($vals['show_info_type'])) {
        $this->show_info_type = $vals['show_info_type'];
      }
    }
  }

  public function getName() {
    return 'SuggestItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->word);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->sec_rec = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $elem26 = new SecSugItem();
              $xfer += $elem26->read($input);
              $this->sec_rec []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->gid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->acm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->category_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->show_info_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SuggestItem');
    if ($this->word !== null) {
      $xfer += $output->writeFieldBegin('word', TType::STRING, 1);
      $xfer += $output->writeString($this->word);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 2);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sec_rec !== null) {
      if (!is_array($this->sec_rec)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('sec_rec', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->sec_rec));
        {
          foreach ($this->sec_rec as $iter27)
          {
            $xfer += $iter27->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gid !== null) {
      $xfer += $output->writeFieldBegin('gid', TType::STRING, 4);
      $xfer += $output->writeString($this->gid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->acm !== null) {
      $xfer += $output->writeFieldBegin('acm', TType::STRING, 5);
      $xfer += $output->writeString($this->acm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->category_type !== null) {
      $xfer += $output->writeFieldBegin('category_type', TType::STRING, 6);
      $xfer += $output->writeString($this->category_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->show_info_type !== null) {
      $xfer += $output->writeFieldBegin('show_info_type', TType::I32, 7);
      $xfer += $output->writeI32($this->show_info_type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SuggestReq {
  static $_TSPEC;

  public $query = null;
  public $cityid = null;
  public $userid = null;
  public $uuid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cityid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'userid',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'uuid',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['query'])) {
        $this->query = $vals['query'];
      }
      if (isset($vals['cityid'])) {
        $this->cityid = $vals['cityid'];
      }
      if (isset($vals['userid'])) {
        $this->userid = $vals['userid'];
      }
      if (isset($vals['uuid'])) {
        $this->uuid = $vals['uuid'];
      }
    }
  }

  public function getName() {
    return 'SuggestReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->query);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cityid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uuid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SuggestReq');
    if ($this->query !== null) {
      $xfer += $output->writeFieldBegin('query', TType::STRING, 1);
      $xfer += $output->writeString($this->query);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cityid !== null) {
      $xfer += $output->writeFieldBegin('cityid', TType::I32, 2);
      $xfer += $output->writeI32($this->cityid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userid !== null) {
      $xfer += $output->writeFieldBegin('userid', TType::I32, 3);
      $xfer += $output->writeI32($this->userid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uuid !== null) {
      $xfer += $output->writeFieldBegin('uuid', TType::STRING, 4);
      $xfer += $output->writeString($this->uuid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
