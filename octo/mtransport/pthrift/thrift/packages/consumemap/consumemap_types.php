<?php
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


class Loc {
  static $_TSPEC;

  public $lat = null;
  public $lon = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'lat',
          'type' => TType::DOUBLE,
          ),
        2 => array(
          'var' => 'lon',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['lat'])) {
        $this->lat = $vals['lat'];
      }
      if (isset($vals['lon'])) {
        $this->lon = $vals['lon'];
      }
    }
  }

  public function getName() {
    return 'Loc';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->lat);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->lon);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Loc');
    if ($this->lat !== null) {
      $xfer += $output->writeFieldBegin('lat', TType::DOUBLE, 1);
      $xfer += $output->writeDouble($this->lat);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lon !== null) {
      $xfer += $output->writeFieldBegin('lon', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->lon);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SpaceRange {
  static $_TSPEC;

  public $leftUpper = null;
  public $rightLower = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'leftUpper',
          'type' => TType::STRUCT,
          'class' => 'Loc',
          ),
        2 => array(
          'var' => 'rightLower',
          'type' => TType::STRUCT,
          'class' => 'Loc',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['leftUpper'])) {
        $this->leftUpper = $vals['leftUpper'];
      }
      if (isset($vals['rightLower'])) {
        $this->rightLower = $vals['rightLower'];
      }
    }
  }

  public function getName() {
    return 'SpaceRange';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->leftUpper = new Loc();
            $xfer += $this->leftUpper->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->rightLower = new Loc();
            $xfer += $this->rightLower->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SpaceRange');
    if ($this->leftUpper !== null) {
      if (!is_object($this->leftUpper)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('leftUpper', TType::STRUCT, 1);
      $xfer += $this->leftUpper->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rightLower !== null) {
      if (!is_object($this->rightLower)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('rightLower', TType::STRUCT, 2);
      $xfer += $this->rightLower->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TimeInterval {
  static $_TSPEC;

  public $startTime = null;
  public $endTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'startTime',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'endTime',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
    }
  }

  public function getName() {
    return 'TimeInterval';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TimeInterval');
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::STRING, 1);
      $xfer += $output->writeString($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::STRING, 2);
      $xfer += $output->writeString($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Constraints {
  static $_TSPEC;

  public $userid = null;
  public $space = null;
  public $timespan = null;
  public $size = null;
  public $city = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'space',
          'type' => TType::STRUCT,
          'class' => 'SpaceRange',
          ),
        3 => array(
          'var' => 'timespan',
          'type' => TType::STRUCT,
          'class' => 'TimeInterval',
          ),
        4 => array(
          'var' => 'size',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'city',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userid'])) {
        $this->userid = $vals['userid'];
      }
      if (isset($vals['space'])) {
        $this->space = $vals['space'];
      }
      if (isset($vals['timespan'])) {
        $this->timespan = $vals['timespan'];
      }
      if (isset($vals['size'])) {
        $this->size = $vals['size'];
      }
      if (isset($vals['city'])) {
        $this->city = $vals['city'];
      }
    }
  }

  public function getName() {
    return 'Constraints';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->userid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->space = new SpaceRange();
            $xfer += $this->space->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->timespan = new TimeInterval();
            $xfer += $this->timespan->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->city);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Constraints');
    if ($this->userid !== null) {
      $xfer += $output->writeFieldBegin('userid', TType::I64, 1);
      $xfer += $output->writeI64($this->userid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->space !== null) {
      if (!is_object($this->space)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('space', TType::STRUCT, 2);
      $xfer += $this->space->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timespan !== null) {
      if (!is_object($this->timespan)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('timespan', TType::STRUCT, 3);
      $xfer += $this->timespan->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->size !== null) {
      $xfer += $output->writeFieldBegin('size', TType::I64, 4);
      $xfer += $output->writeI64($this->size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->city !== null) {
      $xfer += $output->writeFieldBegin('city', TType::I64, 5);
      $xfer += $output->writeI64($this->city);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LocCount {
  static $_TSPEC;

  public $dealName = null;
  public $lat = null;
  public $lon = null;
  public $cnt = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'dealName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'lat',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'lon',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'cnt',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['dealName'])) {
        $this->dealName = $vals['dealName'];
      }
      if (isset($vals['lat'])) {
        $this->lat = $vals['lat'];
      }
      if (isset($vals['lon'])) {
        $this->lon = $vals['lon'];
      }
      if (isset($vals['cnt'])) {
        $this->cnt = $vals['cnt'];
      }
    }
  }

  public function getName() {
    return 'LocCount';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dealName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->lat);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->lon);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->cnt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LocCount');
    if ($this->dealName !== null) {
      $xfer += $output->writeFieldBegin('dealName', TType::STRING, 1);
      $xfer += $output->writeString($this->dealName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lat !== null) {
      $xfer += $output->writeFieldBegin('lat', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->lat);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lon !== null) {
      $xfer += $output->writeFieldBegin('lon', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->lon);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cnt !== null) {
      $xfer += $output->writeFieldBegin('cnt', TType::I64, 4);
      $xfer += $output->writeI64($this->cnt);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LocCollection {
  static $_TSPEC;

  public $collection = null;
  public $size = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'collection',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'LocCount',
            ),
          ),
        2 => array(
          'var' => 'size',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['collection'])) {
        $this->collection = $vals['collection'];
      }
      if (isset($vals['size'])) {
        $this->size = $vals['size'];
      }
    }
  }

  public function getName() {
    return 'LocCollection';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->collection = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new LocCount();
              $xfer += $elem5->read($input);
              $this->collection []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LocCollection');
    if ($this->collection !== null) {
      if (!is_array($this->collection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('collection', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->collection));
        {
          foreach ($this->collection as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->size !== null) {
      $xfer += $output->writeFieldBegin('size', TType::I64, 2);
      $xfer += $output->writeI64($this->size);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
