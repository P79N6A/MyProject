<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'].'/packages/fb303/fb303_types.php';

class ThriftResponse {
  static $_TSPEC;

  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'ThriftResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThriftResponse');
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ThriftRequest {
  static $_TSPEC;

  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'ThriftRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThriftRequest');
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Order {
  static $_TSPEC;

  public $id = null;
  public $userid = null;
  public $dealid = null;
  public $appid = null;
  public $unionid = null;
  public $city = null;
  public $quantity = null;
  public $totalfee = null;
  public $amount = null;
  public $deliveryfee = null;
  public $rebate = null;
  public $giftcard = null;
  public $recharge = null;
  public $direct = null;
  public $magiccard = null;
  public $payed = null;
  public $credit = null;
  public $payedsum = null;
  public $mobile = null;
  public $cardcode = null;
  public $ordertime = null;
  public $orderip = null;
  public $paytime = null;
  public $payattr = null;
  public $status = null;
  public $refundstatus = null;
  public $modtime = null;
  public $orderattr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'userid',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'dealid',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'appid',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'unionid',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'city',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'quantity',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'totalfee',
          'type' => TType::DOUBLE,
          ),
        9 => array(
          'var' => 'amount',
          'type' => TType::DOUBLE,
          ),
        10 => array(
          'var' => 'deliveryfee',
          'type' => TType::DOUBLE,
          ),
        11 => array(
          'var' => 'rebate',
          'type' => TType::DOUBLE,
          ),
        12 => array(
          'var' => 'giftcard',
          'type' => TType::DOUBLE,
          ),
        13 => array(
          'var' => 'recharge',
          'type' => TType::DOUBLE,
          ),
        14 => array(
          'var' => 'direct',
          'type' => TType::DOUBLE,
          ),
        15 => array(
          'var' => 'magiccard',
          'type' => TType::DOUBLE,
          ),
        16 => array(
          'var' => 'payed',
          'type' => TType::DOUBLE,
          ),
        17 => array(
          'var' => 'credit',
          'type' => TType::DOUBLE,
          ),
        18 => array(
          'var' => 'payedsum',
          'type' => TType::DOUBLE,
          ),
        19 => array(
          'var' => 'mobile',
          'type' => TType::I64,
          ),
        20 => array(
          'var' => 'cardcode',
          'type' => TType::I64,
          ),
        21 => array(
          'var' => 'ordertime',
          'type' => TType::I64,
          ),
        22 => array(
          'var' => 'orderip',
          'type' => TType::I64,
          ),
        23 => array(
          'var' => 'paytime',
          'type' => TType::I64,
          ),
        24 => array(
          'var' => 'payattr',
          'type' => TType::I64,
          ),
        25 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        26 => array(
          'var' => 'refundstatus',
          'type' => TType::I32,
          ),
        27 => array(
          'var' => 'modtime',
          'type' => TType::I64,
          ),
        28 => array(
          'var' => 'orderattr',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['userid'])) {
        $this->userid = $vals['userid'];
      }
      if (isset($vals['dealid'])) {
        $this->dealid = $vals['dealid'];
      }
      if (isset($vals['appid'])) {
        $this->appid = $vals['appid'];
      }
      if (isset($vals['unionid'])) {
        $this->unionid = $vals['unionid'];
      }
      if (isset($vals['city'])) {
        $this->city = $vals['city'];
      }
      if (isset($vals['quantity'])) {
        $this->quantity = $vals['quantity'];
      }
      if (isset($vals['totalfee'])) {
        $this->totalfee = $vals['totalfee'];
      }
      if (isset($vals['amount'])) {
        $this->amount = $vals['amount'];
      }
      if (isset($vals['deliveryfee'])) {
        $this->deliveryfee = $vals['deliveryfee'];
      }
      if (isset($vals['rebate'])) {
        $this->rebate = $vals['rebate'];
      }
      if (isset($vals['giftcard'])) {
        $this->giftcard = $vals['giftcard'];
      }
      if (isset($vals['recharge'])) {
        $this->recharge = $vals['recharge'];
      }
      if (isset($vals['direct'])) {
        $this->direct = $vals['direct'];
      }
      if (isset($vals['magiccard'])) {
        $this->magiccard = $vals['magiccard'];
      }
      if (isset($vals['payed'])) {
        $this->payed = $vals['payed'];
      }
      if (isset($vals['credit'])) {
        $this->credit = $vals['credit'];
      }
      if (isset($vals['payedsum'])) {
        $this->payedsum = $vals['payedsum'];
      }
      if (isset($vals['mobile'])) {
        $this->mobile = $vals['mobile'];
      }
      if (isset($vals['cardcode'])) {
        $this->cardcode = $vals['cardcode'];
      }
      if (isset($vals['ordertime'])) {
        $this->ordertime = $vals['ordertime'];
      }
      if (isset($vals['orderip'])) {
        $this->orderip = $vals['orderip'];
      }
      if (isset($vals['paytime'])) {
        $this->paytime = $vals['paytime'];
      }
      if (isset($vals['payattr'])) {
        $this->payattr = $vals['payattr'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['refundstatus'])) {
        $this->refundstatus = $vals['refundstatus'];
      }
      if (isset($vals['modtime'])) {
        $this->modtime = $vals['modtime'];
      }
      if (isset($vals['orderattr'])) {
        $this->orderattr = $vals['orderattr'];
      }
    }
  }

  public function getName() {
    return 'Order';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->userid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dealid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->unionid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->city);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->quantity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->totalfee);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->amount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->deliveryfee);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->rebate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->giftcard);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->recharge);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->direct);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->magiccard);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->payed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->credit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->payedsum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->mobile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->cardcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ordertime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->orderip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->paytime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->payattr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->refundstatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->modtime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 28:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->orderattr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Order');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I64, 1);
      $xfer += $output->writeI64($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userid !== null) {
      $xfer += $output->writeFieldBegin('userid', TType::I64, 2);
      $xfer += $output->writeI64($this->userid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dealid !== null) {
      $xfer += $output->writeFieldBegin('dealid', TType::I64, 3);
      $xfer += $output->writeI64($this->dealid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appid !== null) {
      $xfer += $output->writeFieldBegin('appid', TType::I32, 4);
      $xfer += $output->writeI32($this->appid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->unionid !== null) {
      $xfer += $output->writeFieldBegin('unionid', TType::I32, 5);
      $xfer += $output->writeI32($this->unionid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->city !== null) {
      $xfer += $output->writeFieldBegin('city', TType::I32, 6);
      $xfer += $output->writeI32($this->city);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->quantity !== null) {
      $xfer += $output->writeFieldBegin('quantity', TType::I32, 7);
      $xfer += $output->writeI32($this->quantity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalfee !== null) {
      $xfer += $output->writeFieldBegin('totalfee', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->totalfee);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amount !== null) {
      $xfer += $output->writeFieldBegin('amount', TType::DOUBLE, 9);
      $xfer += $output->writeDouble($this->amount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deliveryfee !== null) {
      $xfer += $output->writeFieldBegin('deliveryfee', TType::DOUBLE, 10);
      $xfer += $output->writeDouble($this->deliveryfee);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rebate !== null) {
      $xfer += $output->writeFieldBegin('rebate', TType::DOUBLE, 11);
      $xfer += $output->writeDouble($this->rebate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->giftcard !== null) {
      $xfer += $output->writeFieldBegin('giftcard', TType::DOUBLE, 12);
      $xfer += $output->writeDouble($this->giftcard);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recharge !== null) {
      $xfer += $output->writeFieldBegin('recharge', TType::DOUBLE, 13);
      $xfer += $output->writeDouble($this->recharge);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->direct !== null) {
      $xfer += $output->writeFieldBegin('direct', TType::DOUBLE, 14);
      $xfer += $output->writeDouble($this->direct);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->magiccard !== null) {
      $xfer += $output->writeFieldBegin('magiccard', TType::DOUBLE, 15);
      $xfer += $output->writeDouble($this->magiccard);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payed !== null) {
      $xfer += $output->writeFieldBegin('payed', TType::DOUBLE, 16);
      $xfer += $output->writeDouble($this->payed);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->credit !== null) {
      $xfer += $output->writeFieldBegin('credit', TType::DOUBLE, 17);
      $xfer += $output->writeDouble($this->credit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payedsum !== null) {
      $xfer += $output->writeFieldBegin('payedsum', TType::DOUBLE, 18);
      $xfer += $output->writeDouble($this->payedsum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mobile !== null) {
      $xfer += $output->writeFieldBegin('mobile', TType::I64, 19);
      $xfer += $output->writeI64($this->mobile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardcode !== null) {
      $xfer += $output->writeFieldBegin('cardcode', TType::I64, 20);
      $xfer += $output->writeI64($this->cardcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ordertime !== null) {
      $xfer += $output->writeFieldBegin('ordertime', TType::I64, 21);
      $xfer += $output->writeI64($this->ordertime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderip !== null) {
      $xfer += $output->writeFieldBegin('orderip', TType::I64, 22);
      $xfer += $output->writeI64($this->orderip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->paytime !== null) {
      $xfer += $output->writeFieldBegin('paytime', TType::I64, 23);
      $xfer += $output->writeI64($this->paytime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payattr !== null) {
      $xfer += $output->writeFieldBegin('payattr', TType::I64, 24);
      $xfer += $output->writeI64($this->payattr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 25);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->refundstatus !== null) {
      $xfer += $output->writeFieldBegin('refundstatus', TType::I32, 26);
      $xfer += $output->writeI32($this->refundstatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->modtime !== null) {
      $xfer += $output->writeFieldBegin('modtime', TType::I64, 27);
      $xfer += $output->writeI64($this->modtime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderattr !== null) {
      $xfer += $output->writeFieldBegin('orderattr', TType::I64, 28);
      $xfer += $output->writeI64($this->orderattr);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
