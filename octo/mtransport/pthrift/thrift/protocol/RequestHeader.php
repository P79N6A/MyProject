<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


class RequestHeader {
  static $_TSPEC;

  public $traceId = null;
  public $spanId = null;
  public $clientAppkey = null;
  public $clientIp = null;
  public $spanName = null;
  public $serverIpPort = null;
  public $debug = null;
  public $sample = null;
  public $version = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        10001 => array(
          'var' => 'traceId',
          'type' => TType::STRING,
          ),
        10002 => array(
          'var' => 'spanId',
          'type' => TType::STRING,
          ),
        10003 => array(
          'var' => 'clientAppkey',
          'type' => TType::STRING,
          ),
        10004 => array(
          'var' => 'clientIp',
          'type' => TType::STRING,
          ),
        10005 => array(
          'var' => 'spanName',
          'type' => TType::STRING,
          ),
        10006 => array(
          'var' => 'serverIpPort',
          'type' => TType::STRING,
          ),
        10007 => array(
          'var' => 'debug',
          'type' => TType::BOOL,
          ),
        10008 => array(
          'var' => 'sample',
          'type' => TType::BOOL,
          ),
        10009 => array(
          'var' => 'version',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['traceId'])) {
        $this->traceId = $vals['traceId'];
      }
      if (isset($vals['spanId'])) {
        $this->spanId = $vals['spanId'];
      }
      if (isset($vals['clientAppkey'])) {
        $this->clientAppkey = $vals['clientAppkey'];
      }
      if (isset($vals['clientIp'])) {
        $this->clientIp = $vals['clientIp'];
      }
      if (isset($vals['spanName'])) {
        $this->spanName = $vals['spanName'];
      }
      if (isset($vals['serverIpPort'])) {
        $this->serverIpPort = $vals['serverIpPort'];
      }
      if (isset($vals['debug'])) {
        $this->debug = $vals['debug'];
      }
      if (isset($vals['sample'])) {
        $this->sample = $vals['sample'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
    }
  }

  public function getName() {
    return 'RequestHeader';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 10001:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->traceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10002:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->spanId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10003:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientAppkey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10004:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientIp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10005:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->spanName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10006:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->serverIpPort);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10007:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->debug);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10008:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->sample);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10009:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RequestHeader');
    if ($this->traceId !== null) {
      $xfer += $output->writeFieldBegin('traceId', TType::STRING, 10001);
      $xfer += $output->writeString($this->traceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spanId !== null) {
      $xfer += $output->writeFieldBegin('spanId', TType::STRING, 10002);
      $xfer += $output->writeString($this->spanId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientAppkey !== null) {
      $xfer += $output->writeFieldBegin('clientAppkey', TType::STRING, 10003);
      $xfer += $output->writeString($this->clientAppkey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientIp !== null) {
      $xfer += $output->writeFieldBegin('clientIp', TType::STRING, 10004);
      $xfer += $output->writeString($this->clientIp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spanName !== null) {
      $xfer += $output->writeFieldBegin('spanName', TType::STRING, 10005);
      $xfer += $output->writeString($this->spanName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverIpPort !== null) {
      $xfer += $output->writeFieldBegin('serverIpPort', TType::STRING, 10006);
      $xfer += $output->writeString($this->serverIpPort);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->debug !== null) {
      $xfer += $output->writeFieldBegin('debug', TType::BOOL, 10007);
      $xfer += $output->writeBool($this->debug);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sample !== null) {
      $xfer += $output->writeFieldBegin('sample', TType::BOOL, 10008);
      $xfer += $output->writeBool($this->sample);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::STRING, 10009);
      $xfer += $output->writeString($this->version);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
