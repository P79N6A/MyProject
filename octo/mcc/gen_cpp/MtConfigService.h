/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MtConfigService_H
#define MtConfigService_H

#include <TProcessor.h>
#include "config_service_types.h"



class MtConfigServiceIf {
 public:
  virtual ~MtConfigServiceIf() {}
  virtual void getMergeData(ConfigDataResponse& _return, const GetMergeDataRequest& request) = 0;
  virtual int32_t setData(const std::string& appkey, const std::string& env, const std::string& path, const int64_t version, const std::string& jsonData) = 0;
  virtual int32_t syncRelation(const std::vector<ConfigNode> & usedNodes, const std::string& requestIp) = 0;
  virtual void getDefaultConfig(DefaultConfigResponse& _return) = 0;
  virtual void setFileConfig(file_param_t& _return, const file_param_t& files) = 0;
  virtual void getFileConfig(file_param_t& _return, const file_param_t& files) = 0;
  virtual void getFileList(file_param_t& _return, const file_param_t& files) = 0;
  virtual void distributeConfigFile(ConfigFileResponse& _return, const ConfigFileRequest& request) = 0;
  virtual void enableConfigFile(ConfigFileResponse& _return, const ConfigFileRequest& request) = 0;
  virtual void getGroupInfo(ConfigGroupResponse& _return, const std::string& appkey, const std::string& env, const std::string& groupID) = 0;
  virtual void getGroups(ConfigGroupsResponse& _return, const std::string& appkey, const std::string& env) = 0;
  virtual void addGroup(ConfigGroupResponse& _return, const std::string& appkey, const std::string& env, const std::string& groupName, const std::vector<std::string> & ips) = 0;
  virtual void updateGroup(ConfigGroupResponse& _return, const std::string& appkey, const std::string& env, const std::string& groupId, const std::vector<std::string> & ips) = 0;
  virtual int32_t deleteGroup(const std::string& appkey, const std::string& env, const std::string& groupId) = 0;
  virtual void getGroupID(std::string& _return, const std::string& appkey, const std::string& env, const std::string& ip) = 0;
};

class MtConfigServiceIfFactory {
 public:
  typedef MtConfigServiceIf Handler;

  virtual ~MtConfigServiceIfFactory() {}

  virtual MtConfigServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MtConfigServiceIf* /* handler */) = 0;
};

class MtConfigServiceIfSingletonFactory : virtual public MtConfigServiceIfFactory {
 public:
  MtConfigServiceIfSingletonFactory(const boost::shared_ptr<MtConfigServiceIf>& iface) : iface_(iface) {}
  virtual ~MtConfigServiceIfSingletonFactory() {}

  virtual MtConfigServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MtConfigServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<MtConfigServiceIf> iface_;
};

class MtConfigServiceNull : virtual public MtConfigServiceIf {
 public:
  virtual ~MtConfigServiceNull() {}
  void getMergeData(ConfigDataResponse& /* _return */, const GetMergeDataRequest& /* request */) {
    return;
  }
  int32_t setData(const std::string& /* appkey */, const std::string& /* env */, const std::string& /* path */, const int64_t /* version */, const std::string& /* jsonData */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t syncRelation(const std::vector<ConfigNode> & /* usedNodes */, const std::string& /* requestIp */) {
    int32_t _return = 0;
    return _return;
  }
  void getDefaultConfig(DefaultConfigResponse& /* _return */) {
    return;
  }
  void setFileConfig(file_param_t& /* _return */, const file_param_t& /* files */) {
    return;
  }
  void getFileConfig(file_param_t& /* _return */, const file_param_t& /* files */) {
    return;
  }
  void getFileList(file_param_t& /* _return */, const file_param_t& /* files */) {
    return;
  }
  void distributeConfigFile(ConfigFileResponse& /* _return */, const ConfigFileRequest& /* request */) {
    return;
  }
  void enableConfigFile(ConfigFileResponse& /* _return */, const ConfigFileRequest& /* request */) {
    return;
  }
  void getGroupInfo(ConfigGroupResponse& /* _return */, const std::string& /* appkey */, const std::string& /* env */, const std::string& /* groupID */) {
    return;
  }
  void getGroups(ConfigGroupsResponse& /* _return */, const std::string& /* appkey */, const std::string& /* env */) {
    return;
  }
  void addGroup(ConfigGroupResponse& /* _return */, const std::string& /* appkey */, const std::string& /* env */, const std::string& /* groupName */, const std::vector<std::string> & /* ips */) {
    return;
  }
  void updateGroup(ConfigGroupResponse& /* _return */, const std::string& /* appkey */, const std::string& /* env */, const std::string& /* groupId */, const std::vector<std::string> & /* ips */) {
    return;
  }
  int32_t deleteGroup(const std::string& /* appkey */, const std::string& /* env */, const std::string& /* groupId */) {
    int32_t _return = 0;
    return _return;
  }
  void getGroupID(std::string& /* _return */, const std::string& /* appkey */, const std::string& /* env */, const std::string& /* ip */) {
    return;
  }
};

typedef struct _MtConfigService_getMergeData_args__isset {
  _MtConfigService_getMergeData_args__isset() : request(false) {}
  bool request;
} _MtConfigService_getMergeData_args__isset;

class MtConfigService_getMergeData_args {
 public:

  MtConfigService_getMergeData_args() {
  }

  virtual ~MtConfigService_getMergeData_args() throw() {}

  GetMergeDataRequest request;

  _MtConfigService_getMergeData_args__isset __isset;

  void __set_request(const GetMergeDataRequest& val) {
    request = val;
  }

  bool operator == (const MtConfigService_getMergeData_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const MtConfigService_getMergeData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MtConfigService_getMergeData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MtConfigService_getMergeData_pargs {
 public:


  virtual ~MtConfigService_getMergeData_pargs() throw() {}

  const GetMergeDataRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MtConfigService_getMergeData_result__isset {
  _MtConfigService_getMergeData_result__isset() : success(false) {}
  bool success;
} _MtConfigService_getMergeData_result__isset;

class MtConfigService_getMergeData_result {
 public:

  MtConfigService_getMergeData_result() {
  }

  virtual ~MtConfigService_getMergeData_result() throw() {}

  ConfigDataResponse success;

  _MtConfigService_getMergeData_result__isset __isset;

  void __set_success(const ConfigDataResponse& val) {
    success = val;
  }

  bool operator == (const MtConfigService_getMergeData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MtConfigService_getMergeData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MtConfigService_getMergeData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MtConfigService_getMergeData_presult__isset {
  _MtConfigService_getMergeData_presult__isset() : success(false) {}
  bool success;
} _MtConfigService_getMergeData_presult__isset;

class MtConfigService_getMergeData_presult {
 public:


  virtual ~MtConfigService_getMergeData_presult() throw() {}

  ConfigDataResponse* success;

  _MtConfigService_getMergeData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MtConfigService_setData_args__isset {
  _MtConfigService_setData_args__isset() : appkey(false), env(false), path(false), version(false), jsonData(false) {}
  bool appkey;
  bool env;
  bool path;
  bool version;
  bool jsonData;
} _MtConfigService_setData_args__isset;

class MtConfigService_setData_args {
 public:

  MtConfigService_setData_args() : appkey(""), env(""), path(""), version(0), jsonData("") {
  }

  virtual ~MtConfigService_setData_args() throw() {}

  std::string appkey;
  std::string env;
  std::string path;
  int64_t version;
  std::string jsonData;

  _MtConfigService_setData_args__isset __isset;

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_env(const std::string& val) {
    env = val;
  }

  void __set_path(const std::string& val) {
    path = val;
  }

  void __set_version(const int64_t val) {
    version = val;
  }

  void __set_jsonData(const std::string& val) {
    jsonData = val;
  }

  bool operator == (const MtConfigService_setData_args & rhs) const
  {
    if (!(appkey == rhs.appkey))
      return false;
    if (!(env == rhs.env))
      return false;
    if (!(path == rhs.path))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(jsonData == rhs.jsonData))
      return false;
    return true;
  }
  bool operator != (const MtConfigService_setData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MtConfigService_setData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MtConfigService_setData_pargs {
 public:


  virtual ~MtConfigService_setData_pargs() throw() {}

  const std::string* appkey;
  const std::string* env;
  const std::string* path;
  const int64_t* version;
  const std::string* jsonData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MtConfigService_setData_result__isset {
  _MtConfigService_setData_result__isset() : success(false) {}
  bool success;
} _MtConfigService_setData_result__isset;

class MtConfigService_setData_result {
 public:

  MtConfigService_setData_result() : success(0) {
  }

  virtual ~MtConfigService_setData_result() throw() {}

  int32_t success;

  _MtConfigService_setData_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const MtConfigService_setData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MtConfigService_setData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MtConfigService_setData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MtConfigService_setData_presult__isset {
  _MtConfigService_setData_presult__isset() : success(false) {}
  bool success;
} _MtConfigService_setData_presult__isset;

class MtConfigService_setData_presult {
 public:


  virtual ~MtConfigService_setData_presult() throw() {}

  int32_t* success;

  _MtConfigService_setData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MtConfigService_syncRelation_args__isset {
  _MtConfigService_syncRelation_args__isset() : usedNodes(false), requestIp(false) {}
  bool usedNodes;
  bool requestIp;
} _MtConfigService_syncRelation_args__isset;

class MtConfigService_syncRelation_args {
 public:

  MtConfigService_syncRelation_args() : requestIp("") {
  }

  virtual ~MtConfigService_syncRelation_args() throw() {}

  std::vector<ConfigNode>  usedNodes;
  std::string requestIp;

  _MtConfigService_syncRelation_args__isset __isset;

  void __set_usedNodes(const std::vector<ConfigNode> & val) {
    usedNodes = val;
  }

  void __set_requestIp(const std::string& val) {
    requestIp = val;
  }

  bool operator == (const MtConfigService_syncRelation_args & rhs) const
  {
    if (!(usedNodes == rhs.usedNodes))
      return false;
    if (!(requestIp == rhs.requestIp))
      return false;
    return true;
  }
  bool operator != (const MtConfigService_syncRelation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MtConfigService_syncRelation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MtConfigService_syncRelation_pargs {
 public:


  virtual ~MtConfigService_syncRelation_pargs() throw() {}

  const std::vector<ConfigNode> * usedNodes;
  const std::string* requestIp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MtConfigService_syncRelation_result__isset {
  _MtConfigService_syncRelation_result__isset() : success(false) {}
  bool success;
} _MtConfigService_syncRelation_result__isset;

class MtConfigService_syncRelation_result {
 public:

  MtConfigService_syncRelation_result() : success(0) {
  }

  virtual ~MtConfigService_syncRelation_result() throw() {}

  int32_t success;

  _MtConfigService_syncRelation_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const MtConfigService_syncRelation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MtConfigService_syncRelation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MtConfigService_syncRelation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MtConfigService_syncRelation_presult__isset {
  _MtConfigService_syncRelation_presult__isset() : success(false) {}
  bool success;
} _MtConfigService_syncRelation_presult__isset;

class MtConfigService_syncRelation_presult {
 public:


  virtual ~MtConfigService_syncRelation_presult() throw() {}

  int32_t* success;

  _MtConfigService_syncRelation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class MtConfigService_getDefaultConfig_args {
 public:

  MtConfigService_getDefaultConfig_args() {
  }

  virtual ~MtConfigService_getDefaultConfig_args() throw() {}


  bool operator == (const MtConfigService_getDefaultConfig_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MtConfigService_getDefaultConfig_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MtConfigService_getDefaultConfig_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MtConfigService_getDefaultConfig_pargs {
 public:


  virtual ~MtConfigService_getDefaultConfig_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MtConfigService_getDefaultConfig_result__isset {
  _MtConfigService_getDefaultConfig_result__isset() : success(false) {}
  bool success;
} _MtConfigService_getDefaultConfig_result__isset;

class MtConfigService_getDefaultConfig_result {
 public:

  MtConfigService_getDefaultConfig_result() {
  }

  virtual ~MtConfigService_getDefaultConfig_result() throw() {}

  DefaultConfigResponse success;

  _MtConfigService_getDefaultConfig_result__isset __isset;

  void __set_success(const DefaultConfigResponse& val) {
    success = val;
  }

  bool operator == (const MtConfigService_getDefaultConfig_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MtConfigService_getDefaultConfig_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MtConfigService_getDefaultConfig_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MtConfigService_getDefaultConfig_presult__isset {
  _MtConfigService_getDefaultConfig_presult__isset() : success(false) {}
  bool success;
} _MtConfigService_getDefaultConfig_presult__isset;

class MtConfigService_getDefaultConfig_presult {
 public:


  virtual ~MtConfigService_getDefaultConfig_presult() throw() {}

  DefaultConfigResponse* success;

  _MtConfigService_getDefaultConfig_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MtConfigService_setFileConfig_args__isset {
  _MtConfigService_setFileConfig_args__isset() : files(false) {}
  bool files;
} _MtConfigService_setFileConfig_args__isset;

class MtConfigService_setFileConfig_args {
 public:

  MtConfigService_setFileConfig_args() {
  }

  virtual ~MtConfigService_setFileConfig_args() throw() {}

  file_param_t files;

  _MtConfigService_setFileConfig_args__isset __isset;

  void __set_files(const file_param_t& val) {
    files = val;
  }

  bool operator == (const MtConfigService_setFileConfig_args & rhs) const
  {
    if (!(files == rhs.files))
      return false;
    return true;
  }
  bool operator != (const MtConfigService_setFileConfig_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MtConfigService_setFileConfig_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MtConfigService_setFileConfig_pargs {
 public:


  virtual ~MtConfigService_setFileConfig_pargs() throw() {}

  const file_param_t* files;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MtConfigService_setFileConfig_result__isset {
  _MtConfigService_setFileConfig_result__isset() : success(false) {}
  bool success;
} _MtConfigService_setFileConfig_result__isset;

class MtConfigService_setFileConfig_result {
 public:

  MtConfigService_setFileConfig_result() {
  }

  virtual ~MtConfigService_setFileConfig_result() throw() {}

  file_param_t success;

  _MtConfigService_setFileConfig_result__isset __isset;

  void __set_success(const file_param_t& val) {
    success = val;
  }

  bool operator == (const MtConfigService_setFileConfig_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MtConfigService_setFileConfig_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MtConfigService_setFileConfig_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MtConfigService_setFileConfig_presult__isset {
  _MtConfigService_setFileConfig_presult__isset() : success(false) {}
  bool success;
} _MtConfigService_setFileConfig_presult__isset;

class MtConfigService_setFileConfig_presult {
 public:


  virtual ~MtConfigService_setFileConfig_presult() throw() {}

  file_param_t* success;

  _MtConfigService_setFileConfig_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MtConfigService_getFileConfig_args__isset {
  _MtConfigService_getFileConfig_args__isset() : files(false) {}
  bool files;
} _MtConfigService_getFileConfig_args__isset;

class MtConfigService_getFileConfig_args {
 public:

  MtConfigService_getFileConfig_args() {
  }

  virtual ~MtConfigService_getFileConfig_args() throw() {}

  file_param_t files;

  _MtConfigService_getFileConfig_args__isset __isset;

  void __set_files(const file_param_t& val) {
    files = val;
  }

  bool operator == (const MtConfigService_getFileConfig_args & rhs) const
  {
    if (!(files == rhs.files))
      return false;
    return true;
  }
  bool operator != (const MtConfigService_getFileConfig_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MtConfigService_getFileConfig_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MtConfigService_getFileConfig_pargs {
 public:


  virtual ~MtConfigService_getFileConfig_pargs() throw() {}

  const file_param_t* files;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MtConfigService_getFileConfig_result__isset {
  _MtConfigService_getFileConfig_result__isset() : success(false) {}
  bool success;
} _MtConfigService_getFileConfig_result__isset;

class MtConfigService_getFileConfig_result {
 public:

  MtConfigService_getFileConfig_result() {
  }

  virtual ~MtConfigService_getFileConfig_result() throw() {}

  file_param_t success;

  _MtConfigService_getFileConfig_result__isset __isset;

  void __set_success(const file_param_t& val) {
    success = val;
  }

  bool operator == (const MtConfigService_getFileConfig_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MtConfigService_getFileConfig_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MtConfigService_getFileConfig_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MtConfigService_getFileConfig_presult__isset {
  _MtConfigService_getFileConfig_presult__isset() : success(false) {}
  bool success;
} _MtConfigService_getFileConfig_presult__isset;

class MtConfigService_getFileConfig_presult {
 public:


  virtual ~MtConfigService_getFileConfig_presult() throw() {}

  file_param_t* success;

  _MtConfigService_getFileConfig_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MtConfigService_getFileList_args__isset {
  _MtConfigService_getFileList_args__isset() : files(false) {}
  bool files;
} _MtConfigService_getFileList_args__isset;

class MtConfigService_getFileList_args {
 public:

  MtConfigService_getFileList_args() {
  }

  virtual ~MtConfigService_getFileList_args() throw() {}

  file_param_t files;

  _MtConfigService_getFileList_args__isset __isset;

  void __set_files(const file_param_t& val) {
    files = val;
  }

  bool operator == (const MtConfigService_getFileList_args & rhs) const
  {
    if (!(files == rhs.files))
      return false;
    return true;
  }
  bool operator != (const MtConfigService_getFileList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MtConfigService_getFileList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MtConfigService_getFileList_pargs {
 public:


  virtual ~MtConfigService_getFileList_pargs() throw() {}

  const file_param_t* files;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MtConfigService_getFileList_result__isset {
  _MtConfigService_getFileList_result__isset() : success(false) {}
  bool success;
} _MtConfigService_getFileList_result__isset;

class MtConfigService_getFileList_result {
 public:

  MtConfigService_getFileList_result() {
  }

  virtual ~MtConfigService_getFileList_result() throw() {}

  file_param_t success;

  _MtConfigService_getFileList_result__isset __isset;

  void __set_success(const file_param_t& val) {
    success = val;
  }

  bool operator == (const MtConfigService_getFileList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MtConfigService_getFileList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MtConfigService_getFileList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MtConfigService_getFileList_presult__isset {
  _MtConfigService_getFileList_presult__isset() : success(false) {}
  bool success;
} _MtConfigService_getFileList_presult__isset;

class MtConfigService_getFileList_presult {
 public:


  virtual ~MtConfigService_getFileList_presult() throw() {}

  file_param_t* success;

  _MtConfigService_getFileList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MtConfigService_distributeConfigFile_args__isset {
  _MtConfigService_distributeConfigFile_args__isset() : request(false) {}
  bool request;
} _MtConfigService_distributeConfigFile_args__isset;

class MtConfigService_distributeConfigFile_args {
 public:

  MtConfigService_distributeConfigFile_args() {
  }

  virtual ~MtConfigService_distributeConfigFile_args() throw() {}

  ConfigFileRequest request;

  _MtConfigService_distributeConfigFile_args__isset __isset;

  void __set_request(const ConfigFileRequest& val) {
    request = val;
  }

  bool operator == (const MtConfigService_distributeConfigFile_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const MtConfigService_distributeConfigFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MtConfigService_distributeConfigFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MtConfigService_distributeConfigFile_pargs {
 public:


  virtual ~MtConfigService_distributeConfigFile_pargs() throw() {}

  const ConfigFileRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MtConfigService_distributeConfigFile_result__isset {
  _MtConfigService_distributeConfigFile_result__isset() : success(false) {}
  bool success;
} _MtConfigService_distributeConfigFile_result__isset;

class MtConfigService_distributeConfigFile_result {
 public:

  MtConfigService_distributeConfigFile_result() {
  }

  virtual ~MtConfigService_distributeConfigFile_result() throw() {}

  ConfigFileResponse success;

  _MtConfigService_distributeConfigFile_result__isset __isset;

  void __set_success(const ConfigFileResponse& val) {
    success = val;
  }

  bool operator == (const MtConfigService_distributeConfigFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MtConfigService_distributeConfigFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MtConfigService_distributeConfigFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MtConfigService_distributeConfigFile_presult__isset {
  _MtConfigService_distributeConfigFile_presult__isset() : success(false) {}
  bool success;
} _MtConfigService_distributeConfigFile_presult__isset;

class MtConfigService_distributeConfigFile_presult {
 public:


  virtual ~MtConfigService_distributeConfigFile_presult() throw() {}

  ConfigFileResponse* success;

  _MtConfigService_distributeConfigFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MtConfigService_enableConfigFile_args__isset {
  _MtConfigService_enableConfigFile_args__isset() : request(false) {}
  bool request;
} _MtConfigService_enableConfigFile_args__isset;

class MtConfigService_enableConfigFile_args {
 public:

  MtConfigService_enableConfigFile_args() {
  }

  virtual ~MtConfigService_enableConfigFile_args() throw() {}

  ConfigFileRequest request;

  _MtConfigService_enableConfigFile_args__isset __isset;

  void __set_request(const ConfigFileRequest& val) {
    request = val;
  }

  bool operator == (const MtConfigService_enableConfigFile_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const MtConfigService_enableConfigFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MtConfigService_enableConfigFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MtConfigService_enableConfigFile_pargs {
 public:


  virtual ~MtConfigService_enableConfigFile_pargs() throw() {}

  const ConfigFileRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MtConfigService_enableConfigFile_result__isset {
  _MtConfigService_enableConfigFile_result__isset() : success(false) {}
  bool success;
} _MtConfigService_enableConfigFile_result__isset;

class MtConfigService_enableConfigFile_result {
 public:

  MtConfigService_enableConfigFile_result() {
  }

  virtual ~MtConfigService_enableConfigFile_result() throw() {}

  ConfigFileResponse success;

  _MtConfigService_enableConfigFile_result__isset __isset;

  void __set_success(const ConfigFileResponse& val) {
    success = val;
  }

  bool operator == (const MtConfigService_enableConfigFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MtConfigService_enableConfigFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MtConfigService_enableConfigFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MtConfigService_enableConfigFile_presult__isset {
  _MtConfigService_enableConfigFile_presult__isset() : success(false) {}
  bool success;
} _MtConfigService_enableConfigFile_presult__isset;

class MtConfigService_enableConfigFile_presult {
 public:


  virtual ~MtConfigService_enableConfigFile_presult() throw() {}

  ConfigFileResponse* success;

  _MtConfigService_enableConfigFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MtConfigService_getGroupInfo_args__isset {
  _MtConfigService_getGroupInfo_args__isset() : appkey(false), env(false), groupID(false) {}
  bool appkey;
  bool env;
  bool groupID;
} _MtConfigService_getGroupInfo_args__isset;

class MtConfigService_getGroupInfo_args {
 public:

  MtConfigService_getGroupInfo_args() : appkey(""), env(""), groupID("") {
  }

  virtual ~MtConfigService_getGroupInfo_args() throw() {}

  std::string appkey;
  std::string env;
  std::string groupID;

  _MtConfigService_getGroupInfo_args__isset __isset;

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_env(const std::string& val) {
    env = val;
  }

  void __set_groupID(const std::string& val) {
    groupID = val;
  }

  bool operator == (const MtConfigService_getGroupInfo_args & rhs) const
  {
    if (!(appkey == rhs.appkey))
      return false;
    if (!(env == rhs.env))
      return false;
    if (!(groupID == rhs.groupID))
      return false;
    return true;
  }
  bool operator != (const MtConfigService_getGroupInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MtConfigService_getGroupInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MtConfigService_getGroupInfo_pargs {
 public:


  virtual ~MtConfigService_getGroupInfo_pargs() throw() {}

  const std::string* appkey;
  const std::string* env;
  const std::string* groupID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MtConfigService_getGroupInfo_result__isset {
  _MtConfigService_getGroupInfo_result__isset() : success(false) {}
  bool success;
} _MtConfigService_getGroupInfo_result__isset;

class MtConfigService_getGroupInfo_result {
 public:

  MtConfigService_getGroupInfo_result() {
  }

  virtual ~MtConfigService_getGroupInfo_result() throw() {}

  ConfigGroupResponse success;

  _MtConfigService_getGroupInfo_result__isset __isset;

  void __set_success(const ConfigGroupResponse& val) {
    success = val;
  }

  bool operator == (const MtConfigService_getGroupInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MtConfigService_getGroupInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MtConfigService_getGroupInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MtConfigService_getGroupInfo_presult__isset {
  _MtConfigService_getGroupInfo_presult__isset() : success(false) {}
  bool success;
} _MtConfigService_getGroupInfo_presult__isset;

class MtConfigService_getGroupInfo_presult {
 public:


  virtual ~MtConfigService_getGroupInfo_presult() throw() {}

  ConfigGroupResponse* success;

  _MtConfigService_getGroupInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MtConfigService_getGroups_args__isset {
  _MtConfigService_getGroups_args__isset() : appkey(false), env(false) {}
  bool appkey;
  bool env;
} _MtConfigService_getGroups_args__isset;

class MtConfigService_getGroups_args {
 public:

  MtConfigService_getGroups_args() : appkey(""), env("") {
  }

  virtual ~MtConfigService_getGroups_args() throw() {}

  std::string appkey;
  std::string env;

  _MtConfigService_getGroups_args__isset __isset;

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_env(const std::string& val) {
    env = val;
  }

  bool operator == (const MtConfigService_getGroups_args & rhs) const
  {
    if (!(appkey == rhs.appkey))
      return false;
    if (!(env == rhs.env))
      return false;
    return true;
  }
  bool operator != (const MtConfigService_getGroups_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MtConfigService_getGroups_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MtConfigService_getGroups_pargs {
 public:


  virtual ~MtConfigService_getGroups_pargs() throw() {}

  const std::string* appkey;
  const std::string* env;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MtConfigService_getGroups_result__isset {
  _MtConfigService_getGroups_result__isset() : success(false) {}
  bool success;
} _MtConfigService_getGroups_result__isset;

class MtConfigService_getGroups_result {
 public:

  MtConfigService_getGroups_result() {
  }

  virtual ~MtConfigService_getGroups_result() throw() {}

  ConfigGroupsResponse success;

  _MtConfigService_getGroups_result__isset __isset;

  void __set_success(const ConfigGroupsResponse& val) {
    success = val;
  }

  bool operator == (const MtConfigService_getGroups_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MtConfigService_getGroups_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MtConfigService_getGroups_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MtConfigService_getGroups_presult__isset {
  _MtConfigService_getGroups_presult__isset() : success(false) {}
  bool success;
} _MtConfigService_getGroups_presult__isset;

class MtConfigService_getGroups_presult {
 public:


  virtual ~MtConfigService_getGroups_presult() throw() {}

  ConfigGroupsResponse* success;

  _MtConfigService_getGroups_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MtConfigService_addGroup_args__isset {
  _MtConfigService_addGroup_args__isset() : appkey(false), env(false), groupName(false), ips(false) {}
  bool appkey;
  bool env;
  bool groupName;
  bool ips;
} _MtConfigService_addGroup_args__isset;

class MtConfigService_addGroup_args {
 public:

  MtConfigService_addGroup_args() : appkey(""), env(""), groupName("") {
  }

  virtual ~MtConfigService_addGroup_args() throw() {}

  std::string appkey;
  std::string env;
  std::string groupName;
  std::vector<std::string>  ips;

  _MtConfigService_addGroup_args__isset __isset;

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_env(const std::string& val) {
    env = val;
  }

  void __set_groupName(const std::string& val) {
    groupName = val;
  }

  void __set_ips(const std::vector<std::string> & val) {
    ips = val;
  }

  bool operator == (const MtConfigService_addGroup_args & rhs) const
  {
    if (!(appkey == rhs.appkey))
      return false;
    if (!(env == rhs.env))
      return false;
    if (!(groupName == rhs.groupName))
      return false;
    if (!(ips == rhs.ips))
      return false;
    return true;
  }
  bool operator != (const MtConfigService_addGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MtConfigService_addGroup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MtConfigService_addGroup_pargs {
 public:


  virtual ~MtConfigService_addGroup_pargs() throw() {}

  const std::string* appkey;
  const std::string* env;
  const std::string* groupName;
  const std::vector<std::string> * ips;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MtConfigService_addGroup_result__isset {
  _MtConfigService_addGroup_result__isset() : success(false) {}
  bool success;
} _MtConfigService_addGroup_result__isset;

class MtConfigService_addGroup_result {
 public:

  MtConfigService_addGroup_result() {
  }

  virtual ~MtConfigService_addGroup_result() throw() {}

  ConfigGroupResponse success;

  _MtConfigService_addGroup_result__isset __isset;

  void __set_success(const ConfigGroupResponse& val) {
    success = val;
  }

  bool operator == (const MtConfigService_addGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MtConfigService_addGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MtConfigService_addGroup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MtConfigService_addGroup_presult__isset {
  _MtConfigService_addGroup_presult__isset() : success(false) {}
  bool success;
} _MtConfigService_addGroup_presult__isset;

class MtConfigService_addGroup_presult {
 public:


  virtual ~MtConfigService_addGroup_presult() throw() {}

  ConfigGroupResponse* success;

  _MtConfigService_addGroup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MtConfigService_updateGroup_args__isset {
  _MtConfigService_updateGroup_args__isset() : appkey(false), env(false), groupId(false), ips(false) {}
  bool appkey;
  bool env;
  bool groupId;
  bool ips;
} _MtConfigService_updateGroup_args__isset;

class MtConfigService_updateGroup_args {
 public:

  MtConfigService_updateGroup_args() : appkey(""), env(""), groupId("") {
  }

  virtual ~MtConfigService_updateGroup_args() throw() {}

  std::string appkey;
  std::string env;
  std::string groupId;
  std::vector<std::string>  ips;

  _MtConfigService_updateGroup_args__isset __isset;

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_env(const std::string& val) {
    env = val;
  }

  void __set_groupId(const std::string& val) {
    groupId = val;
  }

  void __set_ips(const std::vector<std::string> & val) {
    ips = val;
  }

  bool operator == (const MtConfigService_updateGroup_args & rhs) const
  {
    if (!(appkey == rhs.appkey))
      return false;
    if (!(env == rhs.env))
      return false;
    if (!(groupId == rhs.groupId))
      return false;
    if (!(ips == rhs.ips))
      return false;
    return true;
  }
  bool operator != (const MtConfigService_updateGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MtConfigService_updateGroup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MtConfigService_updateGroup_pargs {
 public:


  virtual ~MtConfigService_updateGroup_pargs() throw() {}

  const std::string* appkey;
  const std::string* env;
  const std::string* groupId;
  const std::vector<std::string> * ips;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MtConfigService_updateGroup_result__isset {
  _MtConfigService_updateGroup_result__isset() : success(false) {}
  bool success;
} _MtConfigService_updateGroup_result__isset;

class MtConfigService_updateGroup_result {
 public:

  MtConfigService_updateGroup_result() {
  }

  virtual ~MtConfigService_updateGroup_result() throw() {}

  ConfigGroupResponse success;

  _MtConfigService_updateGroup_result__isset __isset;

  void __set_success(const ConfigGroupResponse& val) {
    success = val;
  }

  bool operator == (const MtConfigService_updateGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MtConfigService_updateGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MtConfigService_updateGroup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MtConfigService_updateGroup_presult__isset {
  _MtConfigService_updateGroup_presult__isset() : success(false) {}
  bool success;
} _MtConfigService_updateGroup_presult__isset;

class MtConfigService_updateGroup_presult {
 public:


  virtual ~MtConfigService_updateGroup_presult() throw() {}

  ConfigGroupResponse* success;

  _MtConfigService_updateGroup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MtConfigService_deleteGroup_args__isset {
  _MtConfigService_deleteGroup_args__isset() : appkey(false), env(false), groupId(false) {}
  bool appkey;
  bool env;
  bool groupId;
} _MtConfigService_deleteGroup_args__isset;

class MtConfigService_deleteGroup_args {
 public:

  MtConfigService_deleteGroup_args() : appkey(""), env(""), groupId("") {
  }

  virtual ~MtConfigService_deleteGroup_args() throw() {}

  std::string appkey;
  std::string env;
  std::string groupId;

  _MtConfigService_deleteGroup_args__isset __isset;

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_env(const std::string& val) {
    env = val;
  }

  void __set_groupId(const std::string& val) {
    groupId = val;
  }

  bool operator == (const MtConfigService_deleteGroup_args & rhs) const
  {
    if (!(appkey == rhs.appkey))
      return false;
    if (!(env == rhs.env))
      return false;
    if (!(groupId == rhs.groupId))
      return false;
    return true;
  }
  bool operator != (const MtConfigService_deleteGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MtConfigService_deleteGroup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MtConfigService_deleteGroup_pargs {
 public:


  virtual ~MtConfigService_deleteGroup_pargs() throw() {}

  const std::string* appkey;
  const std::string* env;
  const std::string* groupId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MtConfigService_deleteGroup_result__isset {
  _MtConfigService_deleteGroup_result__isset() : success(false) {}
  bool success;
} _MtConfigService_deleteGroup_result__isset;

class MtConfigService_deleteGroup_result {
 public:

  MtConfigService_deleteGroup_result() : success(0) {
  }

  virtual ~MtConfigService_deleteGroup_result() throw() {}

  int32_t success;

  _MtConfigService_deleteGroup_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const MtConfigService_deleteGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MtConfigService_deleteGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MtConfigService_deleteGroup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MtConfigService_deleteGroup_presult__isset {
  _MtConfigService_deleteGroup_presult__isset() : success(false) {}
  bool success;
} _MtConfigService_deleteGroup_presult__isset;

class MtConfigService_deleteGroup_presult {
 public:


  virtual ~MtConfigService_deleteGroup_presult() throw() {}

  int32_t* success;

  _MtConfigService_deleteGroup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MtConfigService_getGroupID_args__isset {
  _MtConfigService_getGroupID_args__isset() : appkey(false), env(false), ip(false) {}
  bool appkey;
  bool env;
  bool ip;
} _MtConfigService_getGroupID_args__isset;

class MtConfigService_getGroupID_args {
 public:

  MtConfigService_getGroupID_args() : appkey(""), env(""), ip("") {
  }

  virtual ~MtConfigService_getGroupID_args() throw() {}

  std::string appkey;
  std::string env;
  std::string ip;

  _MtConfigService_getGroupID_args__isset __isset;

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_env(const std::string& val) {
    env = val;
  }

  void __set_ip(const std::string& val) {
    ip = val;
  }

  bool operator == (const MtConfigService_getGroupID_args & rhs) const
  {
    if (!(appkey == rhs.appkey))
      return false;
    if (!(env == rhs.env))
      return false;
    if (!(ip == rhs.ip))
      return false;
    return true;
  }
  bool operator != (const MtConfigService_getGroupID_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MtConfigService_getGroupID_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MtConfigService_getGroupID_pargs {
 public:


  virtual ~MtConfigService_getGroupID_pargs() throw() {}

  const std::string* appkey;
  const std::string* env;
  const std::string* ip;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MtConfigService_getGroupID_result__isset {
  _MtConfigService_getGroupID_result__isset() : success(false) {}
  bool success;
} _MtConfigService_getGroupID_result__isset;

class MtConfigService_getGroupID_result {
 public:

  MtConfigService_getGroupID_result() : success("") {
  }

  virtual ~MtConfigService_getGroupID_result() throw() {}

  std::string success;

  _MtConfigService_getGroupID_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const MtConfigService_getGroupID_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MtConfigService_getGroupID_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MtConfigService_getGroupID_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MtConfigService_getGroupID_presult__isset {
  _MtConfigService_getGroupID_presult__isset() : success(false) {}
  bool success;
} _MtConfigService_getGroupID_presult__isset;

class MtConfigService_getGroupID_presult {
 public:


  virtual ~MtConfigService_getGroupID_presult() throw() {}

  std::string* success;

  _MtConfigService_getGroupID_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MtConfigServiceClient : virtual public MtConfigServiceIf {
 public:
  MtConfigServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  MtConfigServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getMergeData(ConfigDataResponse& _return, const GetMergeDataRequest& request);
  void send_getMergeData(const GetMergeDataRequest& request);
  void recv_getMergeData(ConfigDataResponse& _return);
  int32_t setData(const std::string& appkey, const std::string& env, const std::string& path, const int64_t version, const std::string& jsonData);
  void send_setData(const std::string& appkey, const std::string& env, const std::string& path, const int64_t version, const std::string& jsonData);
  int32_t recv_setData();
  int32_t syncRelation(const std::vector<ConfigNode> & usedNodes, const std::string& requestIp);
  void send_syncRelation(const std::vector<ConfigNode> & usedNodes, const std::string& requestIp);
  int32_t recv_syncRelation();
  void getDefaultConfig(DefaultConfigResponse& _return);
  void send_getDefaultConfig();
  void recv_getDefaultConfig(DefaultConfigResponse& _return);
  void setFileConfig(file_param_t& _return, const file_param_t& files);
  void send_setFileConfig(const file_param_t& files);
  void recv_setFileConfig(file_param_t& _return);
  void getFileConfig(file_param_t& _return, const file_param_t& files);
  void send_getFileConfig(const file_param_t& files);
  void recv_getFileConfig(file_param_t& _return);
  void getFileList(file_param_t& _return, const file_param_t& files);
  void send_getFileList(const file_param_t& files);
  void recv_getFileList(file_param_t& _return);
  void distributeConfigFile(ConfigFileResponse& _return, const ConfigFileRequest& request);
  void send_distributeConfigFile(const ConfigFileRequest& request);
  void recv_distributeConfigFile(ConfigFileResponse& _return);
  void enableConfigFile(ConfigFileResponse& _return, const ConfigFileRequest& request);
  void send_enableConfigFile(const ConfigFileRequest& request);
  void recv_enableConfigFile(ConfigFileResponse& _return);
  void getGroupInfo(ConfigGroupResponse& _return, const std::string& appkey, const std::string& env, const std::string& groupID);
  void send_getGroupInfo(const std::string& appkey, const std::string& env, const std::string& groupID);
  void recv_getGroupInfo(ConfigGroupResponse& _return);
  void getGroups(ConfigGroupsResponse& _return, const std::string& appkey, const std::string& env);
  void send_getGroups(const std::string& appkey, const std::string& env);
  void recv_getGroups(ConfigGroupsResponse& _return);
  void addGroup(ConfigGroupResponse& _return, const std::string& appkey, const std::string& env, const std::string& groupName, const std::vector<std::string> & ips);
  void send_addGroup(const std::string& appkey, const std::string& env, const std::string& groupName, const std::vector<std::string> & ips);
  void recv_addGroup(ConfigGroupResponse& _return);
  void updateGroup(ConfigGroupResponse& _return, const std::string& appkey, const std::string& env, const std::string& groupId, const std::vector<std::string> & ips);
  void send_updateGroup(const std::string& appkey, const std::string& env, const std::string& groupId, const std::vector<std::string> & ips);
  void recv_updateGroup(ConfigGroupResponse& _return);
  int32_t deleteGroup(const std::string& appkey, const std::string& env, const std::string& groupId);
  void send_deleteGroup(const std::string& appkey, const std::string& env, const std::string& groupId);
  int32_t recv_deleteGroup();
  void getGroupID(std::string& _return, const std::string& appkey, const std::string& env, const std::string& ip);
  void send_getGroupID(const std::string& appkey, const std::string& env, const std::string& ip);
  void recv_getGroupID(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MtConfigServiceProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<MtConfigServiceIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (MtConfigServiceProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_getMergeData(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setData(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_syncRelation(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDefaultConfig(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setFileConfig(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFileConfig(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFileList(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_distributeConfigFile(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_enableConfigFile(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getGroupInfo(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getGroups(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addGroup(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateGroup(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteGroup(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getGroupID(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MtConfigServiceProcessor(boost::shared_ptr<MtConfigServiceIf> iface) :
    iface_(iface) {
    processMap_["getMergeData"] = &MtConfigServiceProcessor::process_getMergeData;
    processMap_["setData"] = &MtConfigServiceProcessor::process_setData;
    processMap_["syncRelation"] = &MtConfigServiceProcessor::process_syncRelation;
    processMap_["getDefaultConfig"] = &MtConfigServiceProcessor::process_getDefaultConfig;
    processMap_["setFileConfig"] = &MtConfigServiceProcessor::process_setFileConfig;
    processMap_["getFileConfig"] = &MtConfigServiceProcessor::process_getFileConfig;
    processMap_["getFileList"] = &MtConfigServiceProcessor::process_getFileList;
    processMap_["distributeConfigFile"] = &MtConfigServiceProcessor::process_distributeConfigFile;
    processMap_["enableConfigFile"] = &MtConfigServiceProcessor::process_enableConfigFile;
    processMap_["getGroupInfo"] = &MtConfigServiceProcessor::process_getGroupInfo;
    processMap_["getGroups"] = &MtConfigServiceProcessor::process_getGroups;
    processMap_["addGroup"] = &MtConfigServiceProcessor::process_addGroup;
    processMap_["updateGroup"] = &MtConfigServiceProcessor::process_updateGroup;
    processMap_["deleteGroup"] = &MtConfigServiceProcessor::process_deleteGroup;
    processMap_["getGroupID"] = &MtConfigServiceProcessor::process_getGroupID;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~MtConfigServiceProcessor() {}
};

class MtConfigServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MtConfigServiceProcessorFactory(const ::boost::shared_ptr< MtConfigServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MtConfigServiceIfFactory > handlerFactory_;
};

class MtConfigServiceMultiface : virtual public MtConfigServiceIf {
 public:
  MtConfigServiceMultiface(std::vector<boost::shared_ptr<MtConfigServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MtConfigServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MtConfigServiceIf> > ifaces_;
  MtConfigServiceMultiface() {}
  void add(boost::shared_ptr<MtConfigServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getMergeData(ConfigDataResponse& _return, const GetMergeDataRequest& request) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getMergeData(_return, request);
        return;
      } else {
        ifaces_[i]->getMergeData(_return, request);
      }
    }
  }

  int32_t setData(const std::string& appkey, const std::string& env, const std::string& path, const int64_t version, const std::string& jsonData) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->setData(appkey, env, path, version, jsonData);
      } else {
        ifaces_[i]->setData(appkey, env, path, version, jsonData);
      }
    }
  }

  int32_t syncRelation(const std::vector<ConfigNode> & usedNodes, const std::string& requestIp) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->syncRelation(usedNodes, requestIp);
      } else {
        ifaces_[i]->syncRelation(usedNodes, requestIp);
      }
    }
  }

  void getDefaultConfig(DefaultConfigResponse& _return) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getDefaultConfig(_return);
        return;
      } else {
        ifaces_[i]->getDefaultConfig(_return);
      }
    }
  }

  void setFileConfig(file_param_t& _return, const file_param_t& files) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->setFileConfig(_return, files);
        return;
      } else {
        ifaces_[i]->setFileConfig(_return, files);
      }
    }
  }

  void getFileConfig(file_param_t& _return, const file_param_t& files) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getFileConfig(_return, files);
        return;
      } else {
        ifaces_[i]->getFileConfig(_return, files);
      }
    }
  }

  void getFileList(file_param_t& _return, const file_param_t& files) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getFileList(_return, files);
        return;
      } else {
        ifaces_[i]->getFileList(_return, files);
      }
    }
  }

  void distributeConfigFile(ConfigFileResponse& _return, const ConfigFileRequest& request) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->distributeConfigFile(_return, request);
        return;
      } else {
        ifaces_[i]->distributeConfigFile(_return, request);
      }
    }
  }

  void enableConfigFile(ConfigFileResponse& _return, const ConfigFileRequest& request) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->enableConfigFile(_return, request);
        return;
      } else {
        ifaces_[i]->enableConfigFile(_return, request);
      }
    }
  }

  void getGroupInfo(ConfigGroupResponse& _return, const std::string& appkey, const std::string& env, const std::string& groupID) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getGroupInfo(_return, appkey, env, groupID);
        return;
      } else {
        ifaces_[i]->getGroupInfo(_return, appkey, env, groupID);
      }
    }
  }

  void getGroups(ConfigGroupsResponse& _return, const std::string& appkey, const std::string& env) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getGroups(_return, appkey, env);
        return;
      } else {
        ifaces_[i]->getGroups(_return, appkey, env);
      }
    }
  }

  void addGroup(ConfigGroupResponse& _return, const std::string& appkey, const std::string& env, const std::string& groupName, const std::vector<std::string> & ips) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->addGroup(_return, appkey, env, groupName, ips);
        return;
      } else {
        ifaces_[i]->addGroup(_return, appkey, env, groupName, ips);
      }
    }
  }

  void updateGroup(ConfigGroupResponse& _return, const std::string& appkey, const std::string& env, const std::string& groupId, const std::vector<std::string> & ips) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->updateGroup(_return, appkey, env, groupId, ips);
        return;
      } else {
        ifaces_[i]->updateGroup(_return, appkey, env, groupId, ips);
      }
    }
  }

  int32_t deleteGroup(const std::string& appkey, const std::string& env, const std::string& groupId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->deleteGroup(appkey, env, groupId);
      } else {
        ifaces_[i]->deleteGroup(appkey, env, groupId);
      }
    }
  }

  void getGroupID(std::string& _return, const std::string& appkey, const std::string& env, const std::string& ip) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getGroupID(_return, appkey, env, ip);
        return;
      } else {
        ifaces_[i]->getGroupID(_return, appkey, env, ip);
      }
    }
  }

};



#endif
