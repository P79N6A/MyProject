/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MNSCacheService_H
#define MNSCacheService_H

#include <TProcessor.h>
#include "mnsc_service_types.h"



class MNSCacheServiceIf {
 public:
  virtual ~MNSCacheServiceIf() {}
  virtual void getMNSCache(MNSResponse& _return, const std::string& appkey, const std::string& version, const std::string& env) = 0;
  virtual void getMNSCache4HLB(MNSResponse& _return, const std::string& appkey, const std::string& version, const std::string& env) = 0;
  virtual void getAppKeyListByBusinessLine(AppKeyListResponse& _return, const int32_t bizCode, const std::string& env) = 0;
  virtual void getHttpPropertiesByBusinessLine(HttpPropertiesResponse& _return, const int32_t bizCode, const std::string& env) = 0;
  virtual void getHttpPropertiesByAppkey(HttpPropertiesResponse& _return, const std::string& appkey, const std::string& env) = 0;
  virtual void getSandbox(SandboxResponse& _return, const std::string& appkey, const std::string& env) = 0;
  virtual void getHlbUpstream(UpstreamResponse& _return, const std::string& nginx_type, const std::string& idc_type, const std::string& env) = 0;
};

class MNSCacheServiceIfFactory {
 public:
  typedef MNSCacheServiceIf Handler;

  virtual ~MNSCacheServiceIfFactory() {}

  virtual MNSCacheServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MNSCacheServiceIf* /* handler */) = 0;
};

class MNSCacheServiceIfSingletonFactory : virtual public MNSCacheServiceIfFactory {
 public:
  MNSCacheServiceIfSingletonFactory(const boost::shared_ptr<MNSCacheServiceIf>& iface) : iface_(iface) {}
  virtual ~MNSCacheServiceIfSingletonFactory() {}

  virtual MNSCacheServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MNSCacheServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<MNSCacheServiceIf> iface_;
};

class MNSCacheServiceNull : virtual public MNSCacheServiceIf {
 public:
  virtual ~MNSCacheServiceNull() {}
  void getMNSCache(MNSResponse& /* _return */, const std::string& /* appkey */, const std::string& /* version */, const std::string& /* env */) {
    return;
  }
  void getMNSCache4HLB(MNSResponse& /* _return */, const std::string& /* appkey */, const std::string& /* version */, const std::string& /* env */) {
    return;
  }
  void getAppKeyListByBusinessLine(AppKeyListResponse& /* _return */, const int32_t /* bizCode */, const std::string& /* env */) {
    return;
  }
  void getHttpPropertiesByBusinessLine(HttpPropertiesResponse& /* _return */, const int32_t /* bizCode */, const std::string& /* env */) {
    return;
  }
  void getHttpPropertiesByAppkey(HttpPropertiesResponse& /* _return */, const std::string& /* appkey */, const std::string& /* env */) {
    return;
  }
  void getSandbox(SandboxResponse& /* _return */, const std::string& /* appkey */, const std::string& /* env */) {
    return;
  }
  void getHlbUpstream(UpstreamResponse& /* _return */, const std::string& /* nginx_type */, const std::string& /* idc_type */, const std::string& /* env */) {
    return;
  }
};

typedef struct _MNSCacheService_getMNSCache_args__isset {
  _MNSCacheService_getMNSCache_args__isset() : appkey(false), version(false), env(false) {}
  bool appkey;
  bool version;
  bool env;
} _MNSCacheService_getMNSCache_args__isset;

class MNSCacheService_getMNSCache_args {
 public:

  MNSCacheService_getMNSCache_args() : appkey(""), version(""), env("") {
  }

  virtual ~MNSCacheService_getMNSCache_args() throw() {}

  std::string appkey;
  std::string version;
  std::string env;

  _MNSCacheService_getMNSCache_args__isset __isset;

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_version(const std::string& val) {
    version = val;
  }

  void __set_env(const std::string& val) {
    env = val;
  }

  bool operator == (const MNSCacheService_getMNSCache_args & rhs) const
  {
    if (!(appkey == rhs.appkey))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(env == rhs.env))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getMNSCache_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getMNSCache_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MNSCacheService_getMNSCache_pargs {
 public:


  virtual ~MNSCacheService_getMNSCache_pargs() throw() {}

  const std::string* appkey;
  const std::string* version;
  const std::string* env;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getMNSCache_result__isset {
  _MNSCacheService_getMNSCache_result__isset() : success(false) {}
  bool success;
} _MNSCacheService_getMNSCache_result__isset;

class MNSCacheService_getMNSCache_result {
 public:

  MNSCacheService_getMNSCache_result() {
  }

  virtual ~MNSCacheService_getMNSCache_result() throw() {}

  MNSResponse success;

  _MNSCacheService_getMNSCache_result__isset __isset;

  void __set_success(const MNSResponse& val) {
    success = val;
  }

  bool operator == (const MNSCacheService_getMNSCache_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getMNSCache_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getMNSCache_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getMNSCache_presult__isset {
  _MNSCacheService_getMNSCache_presult__isset() : success(false) {}
  bool success;
} _MNSCacheService_getMNSCache_presult__isset;

class MNSCacheService_getMNSCache_presult {
 public:


  virtual ~MNSCacheService_getMNSCache_presult() throw() {}

  MNSResponse* success;

  _MNSCacheService_getMNSCache_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MNSCacheService_getMNSCache4HLB_args__isset {
  _MNSCacheService_getMNSCache4HLB_args__isset() : appkey(false), version(false), env(false) {}
  bool appkey;
  bool version;
  bool env;
} _MNSCacheService_getMNSCache4HLB_args__isset;

class MNSCacheService_getMNSCache4HLB_args {
 public:

  MNSCacheService_getMNSCache4HLB_args() : appkey(""), version(""), env("") {
  }

  virtual ~MNSCacheService_getMNSCache4HLB_args() throw() {}

  std::string appkey;
  std::string version;
  std::string env;

  _MNSCacheService_getMNSCache4HLB_args__isset __isset;

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_version(const std::string& val) {
    version = val;
  }

  void __set_env(const std::string& val) {
    env = val;
  }

  bool operator == (const MNSCacheService_getMNSCache4HLB_args & rhs) const
  {
    if (!(appkey == rhs.appkey))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(env == rhs.env))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getMNSCache4HLB_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getMNSCache4HLB_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MNSCacheService_getMNSCache4HLB_pargs {
 public:


  virtual ~MNSCacheService_getMNSCache4HLB_pargs() throw() {}

  const std::string* appkey;
  const std::string* version;
  const std::string* env;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getMNSCache4HLB_result__isset {
  _MNSCacheService_getMNSCache4HLB_result__isset() : success(false) {}
  bool success;
} _MNSCacheService_getMNSCache4HLB_result__isset;

class MNSCacheService_getMNSCache4HLB_result {
 public:

  MNSCacheService_getMNSCache4HLB_result() {
  }

  virtual ~MNSCacheService_getMNSCache4HLB_result() throw() {}

  MNSResponse success;

  _MNSCacheService_getMNSCache4HLB_result__isset __isset;

  void __set_success(const MNSResponse& val) {
    success = val;
  }

  bool operator == (const MNSCacheService_getMNSCache4HLB_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getMNSCache4HLB_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getMNSCache4HLB_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getMNSCache4HLB_presult__isset {
  _MNSCacheService_getMNSCache4HLB_presult__isset() : success(false) {}
  bool success;
} _MNSCacheService_getMNSCache4HLB_presult__isset;

class MNSCacheService_getMNSCache4HLB_presult {
 public:


  virtual ~MNSCacheService_getMNSCache4HLB_presult() throw() {}

  MNSResponse* success;

  _MNSCacheService_getMNSCache4HLB_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MNSCacheService_getAppKeyListByBusinessLine_args__isset {
  _MNSCacheService_getAppKeyListByBusinessLine_args__isset() : bizCode(false), env(false) {}
  bool bizCode;
  bool env;
} _MNSCacheService_getAppKeyListByBusinessLine_args__isset;

class MNSCacheService_getAppKeyListByBusinessLine_args {
 public:

  MNSCacheService_getAppKeyListByBusinessLine_args() : bizCode(0), env("") {
  }

  virtual ~MNSCacheService_getAppKeyListByBusinessLine_args() throw() {}

  int32_t bizCode;
  std::string env;

  _MNSCacheService_getAppKeyListByBusinessLine_args__isset __isset;

  void __set_bizCode(const int32_t val) {
    bizCode = val;
  }

  void __set_env(const std::string& val) {
    env = val;
  }

  bool operator == (const MNSCacheService_getAppKeyListByBusinessLine_args & rhs) const
  {
    if (!(bizCode == rhs.bizCode))
      return false;
    if (!(env == rhs.env))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getAppKeyListByBusinessLine_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getAppKeyListByBusinessLine_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MNSCacheService_getAppKeyListByBusinessLine_pargs {
 public:


  virtual ~MNSCacheService_getAppKeyListByBusinessLine_pargs() throw() {}

  const int32_t* bizCode;
  const std::string* env;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getAppKeyListByBusinessLine_result__isset {
  _MNSCacheService_getAppKeyListByBusinessLine_result__isset() : success(false) {}
  bool success;
} _MNSCacheService_getAppKeyListByBusinessLine_result__isset;

class MNSCacheService_getAppKeyListByBusinessLine_result {
 public:

  MNSCacheService_getAppKeyListByBusinessLine_result() {
  }

  virtual ~MNSCacheService_getAppKeyListByBusinessLine_result() throw() {}

  AppKeyListResponse success;

  _MNSCacheService_getAppKeyListByBusinessLine_result__isset __isset;

  void __set_success(const AppKeyListResponse& val) {
    success = val;
  }

  bool operator == (const MNSCacheService_getAppKeyListByBusinessLine_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getAppKeyListByBusinessLine_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getAppKeyListByBusinessLine_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getAppKeyListByBusinessLine_presult__isset {
  _MNSCacheService_getAppKeyListByBusinessLine_presult__isset() : success(false) {}
  bool success;
} _MNSCacheService_getAppKeyListByBusinessLine_presult__isset;

class MNSCacheService_getAppKeyListByBusinessLine_presult {
 public:


  virtual ~MNSCacheService_getAppKeyListByBusinessLine_presult() throw() {}

  AppKeyListResponse* success;

  _MNSCacheService_getAppKeyListByBusinessLine_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MNSCacheService_getHttpPropertiesByBusinessLine_args__isset {
  _MNSCacheService_getHttpPropertiesByBusinessLine_args__isset() : bizCode(false), env(false) {}
  bool bizCode;
  bool env;
} _MNSCacheService_getHttpPropertiesByBusinessLine_args__isset;

class MNSCacheService_getHttpPropertiesByBusinessLine_args {
 public:

  MNSCacheService_getHttpPropertiesByBusinessLine_args() : bizCode(0), env("") {
  }

  virtual ~MNSCacheService_getHttpPropertiesByBusinessLine_args() throw() {}

  int32_t bizCode;
  std::string env;

  _MNSCacheService_getHttpPropertiesByBusinessLine_args__isset __isset;

  void __set_bizCode(const int32_t val) {
    bizCode = val;
  }

  void __set_env(const std::string& val) {
    env = val;
  }

  bool operator == (const MNSCacheService_getHttpPropertiesByBusinessLine_args & rhs) const
  {
    if (!(bizCode == rhs.bizCode))
      return false;
    if (!(env == rhs.env))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getHttpPropertiesByBusinessLine_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getHttpPropertiesByBusinessLine_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MNSCacheService_getHttpPropertiesByBusinessLine_pargs {
 public:


  virtual ~MNSCacheService_getHttpPropertiesByBusinessLine_pargs() throw() {}

  const int32_t* bizCode;
  const std::string* env;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getHttpPropertiesByBusinessLine_result__isset {
  _MNSCacheService_getHttpPropertiesByBusinessLine_result__isset() : success(false) {}
  bool success;
} _MNSCacheService_getHttpPropertiesByBusinessLine_result__isset;

class MNSCacheService_getHttpPropertiesByBusinessLine_result {
 public:

  MNSCacheService_getHttpPropertiesByBusinessLine_result() {
  }

  virtual ~MNSCacheService_getHttpPropertiesByBusinessLine_result() throw() {}

  HttpPropertiesResponse success;

  _MNSCacheService_getHttpPropertiesByBusinessLine_result__isset __isset;

  void __set_success(const HttpPropertiesResponse& val) {
    success = val;
  }

  bool operator == (const MNSCacheService_getHttpPropertiesByBusinessLine_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getHttpPropertiesByBusinessLine_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getHttpPropertiesByBusinessLine_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getHttpPropertiesByBusinessLine_presult__isset {
  _MNSCacheService_getHttpPropertiesByBusinessLine_presult__isset() : success(false) {}
  bool success;
} _MNSCacheService_getHttpPropertiesByBusinessLine_presult__isset;

class MNSCacheService_getHttpPropertiesByBusinessLine_presult {
 public:


  virtual ~MNSCacheService_getHttpPropertiesByBusinessLine_presult() throw() {}

  HttpPropertiesResponse* success;

  _MNSCacheService_getHttpPropertiesByBusinessLine_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MNSCacheService_getHttpPropertiesByAppkey_args__isset {
  _MNSCacheService_getHttpPropertiesByAppkey_args__isset() : appkey(false), env(false) {}
  bool appkey;
  bool env;
} _MNSCacheService_getHttpPropertiesByAppkey_args__isset;

class MNSCacheService_getHttpPropertiesByAppkey_args {
 public:

  MNSCacheService_getHttpPropertiesByAppkey_args() : appkey(""), env("") {
  }

  virtual ~MNSCacheService_getHttpPropertiesByAppkey_args() throw() {}

  std::string appkey;
  std::string env;

  _MNSCacheService_getHttpPropertiesByAppkey_args__isset __isset;

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_env(const std::string& val) {
    env = val;
  }

  bool operator == (const MNSCacheService_getHttpPropertiesByAppkey_args & rhs) const
  {
    if (!(appkey == rhs.appkey))
      return false;
    if (!(env == rhs.env))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getHttpPropertiesByAppkey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getHttpPropertiesByAppkey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MNSCacheService_getHttpPropertiesByAppkey_pargs {
 public:


  virtual ~MNSCacheService_getHttpPropertiesByAppkey_pargs() throw() {}

  const std::string* appkey;
  const std::string* env;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getHttpPropertiesByAppkey_result__isset {
  _MNSCacheService_getHttpPropertiesByAppkey_result__isset() : success(false) {}
  bool success;
} _MNSCacheService_getHttpPropertiesByAppkey_result__isset;

class MNSCacheService_getHttpPropertiesByAppkey_result {
 public:

  MNSCacheService_getHttpPropertiesByAppkey_result() {
  }

  virtual ~MNSCacheService_getHttpPropertiesByAppkey_result() throw() {}

  HttpPropertiesResponse success;

  _MNSCacheService_getHttpPropertiesByAppkey_result__isset __isset;

  void __set_success(const HttpPropertiesResponse& val) {
    success = val;
  }

  bool operator == (const MNSCacheService_getHttpPropertiesByAppkey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getHttpPropertiesByAppkey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getHttpPropertiesByAppkey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getHttpPropertiesByAppkey_presult__isset {
  _MNSCacheService_getHttpPropertiesByAppkey_presult__isset() : success(false) {}
  bool success;
} _MNSCacheService_getHttpPropertiesByAppkey_presult__isset;

class MNSCacheService_getHttpPropertiesByAppkey_presult {
 public:


  virtual ~MNSCacheService_getHttpPropertiesByAppkey_presult() throw() {}

  HttpPropertiesResponse* success;

  _MNSCacheService_getHttpPropertiesByAppkey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MNSCacheService_getSandbox_args__isset {
  _MNSCacheService_getSandbox_args__isset() : appkey(false), env(false) {}
  bool appkey;
  bool env;
} _MNSCacheService_getSandbox_args__isset;

class MNSCacheService_getSandbox_args {
 public:

  MNSCacheService_getSandbox_args() : appkey(""), env("") {
  }

  virtual ~MNSCacheService_getSandbox_args() throw() {}

  std::string appkey;
  std::string env;

  _MNSCacheService_getSandbox_args__isset __isset;

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_env(const std::string& val) {
    env = val;
  }

  bool operator == (const MNSCacheService_getSandbox_args & rhs) const
  {
    if (!(appkey == rhs.appkey))
      return false;
    if (!(env == rhs.env))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getSandbox_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getSandbox_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MNSCacheService_getSandbox_pargs {
 public:


  virtual ~MNSCacheService_getSandbox_pargs() throw() {}

  const std::string* appkey;
  const std::string* env;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getSandbox_result__isset {
  _MNSCacheService_getSandbox_result__isset() : success(false) {}
  bool success;
} _MNSCacheService_getSandbox_result__isset;

class MNSCacheService_getSandbox_result {
 public:

  MNSCacheService_getSandbox_result() {
  }

  virtual ~MNSCacheService_getSandbox_result() throw() {}

  SandboxResponse success;

  _MNSCacheService_getSandbox_result__isset __isset;

  void __set_success(const SandboxResponse& val) {
    success = val;
  }

  bool operator == (const MNSCacheService_getSandbox_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getSandbox_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getSandbox_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getSandbox_presult__isset {
  _MNSCacheService_getSandbox_presult__isset() : success(false) {}
  bool success;
} _MNSCacheService_getSandbox_presult__isset;

class MNSCacheService_getSandbox_presult {
 public:


  virtual ~MNSCacheService_getSandbox_presult() throw() {}

  SandboxResponse* success;

  _MNSCacheService_getSandbox_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MNSCacheService_getHlbUpstream_args__isset {
  _MNSCacheService_getHlbUpstream_args__isset() : nginx_type(false), idc_type(false), env(false) {}
  bool nginx_type;
  bool idc_type;
  bool env;
} _MNSCacheService_getHlbUpstream_args__isset;

class MNSCacheService_getHlbUpstream_args {
 public:

  MNSCacheService_getHlbUpstream_args() : nginx_type(""), idc_type(""), env("") {
  }

  virtual ~MNSCacheService_getHlbUpstream_args() throw() {}

  std::string nginx_type;
  std::string idc_type;
  std::string env;

  _MNSCacheService_getHlbUpstream_args__isset __isset;

  void __set_nginx_type(const std::string& val) {
    nginx_type = val;
  }

  void __set_idc_type(const std::string& val) {
    idc_type = val;
  }

  void __set_env(const std::string& val) {
    env = val;
  }

  bool operator == (const MNSCacheService_getHlbUpstream_args & rhs) const
  {
    if (!(nginx_type == rhs.nginx_type))
      return false;
    if (!(idc_type == rhs.idc_type))
      return false;
    if (!(env == rhs.env))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getHlbUpstream_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getHlbUpstream_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MNSCacheService_getHlbUpstream_pargs {
 public:


  virtual ~MNSCacheService_getHlbUpstream_pargs() throw() {}

  const std::string* nginx_type;
  const std::string* idc_type;
  const std::string* env;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getHlbUpstream_result__isset {
  _MNSCacheService_getHlbUpstream_result__isset() : success(false) {}
  bool success;
} _MNSCacheService_getHlbUpstream_result__isset;

class MNSCacheService_getHlbUpstream_result {
 public:

  MNSCacheService_getHlbUpstream_result() {
  }

  virtual ~MNSCacheService_getHlbUpstream_result() throw() {}

  UpstreamResponse success;

  _MNSCacheService_getHlbUpstream_result__isset __isset;

  void __set_success(const UpstreamResponse& val) {
    success = val;
  }

  bool operator == (const MNSCacheService_getHlbUpstream_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MNSCacheService_getHlbUpstream_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSCacheService_getHlbUpstream_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSCacheService_getHlbUpstream_presult__isset {
  _MNSCacheService_getHlbUpstream_presult__isset() : success(false) {}
  bool success;
} _MNSCacheService_getHlbUpstream_presult__isset;

class MNSCacheService_getHlbUpstream_presult {
 public:


  virtual ~MNSCacheService_getHlbUpstream_presult() throw() {}

  UpstreamResponse* success;

  _MNSCacheService_getHlbUpstream_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MNSCacheServiceClient : virtual public MNSCacheServiceIf {
 public:
  MNSCacheServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  MNSCacheServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getMNSCache(MNSResponse& _return, const std::string& appkey, const std::string& version, const std::string& env);
  void send_getMNSCache(const std::string& appkey, const std::string& version, const std::string& env);
  void recv_getMNSCache(MNSResponse& _return);
  void getMNSCache4HLB(MNSResponse& _return, const std::string& appkey, const std::string& version, const std::string& env);
  void send_getMNSCache4HLB(const std::string& appkey, const std::string& version, const std::string& env);
  void recv_getMNSCache4HLB(MNSResponse& _return);
  void getAppKeyListByBusinessLine(AppKeyListResponse& _return, const int32_t bizCode, const std::string& env);
  void send_getAppKeyListByBusinessLine(const int32_t bizCode, const std::string& env);
  void recv_getAppKeyListByBusinessLine(AppKeyListResponse& _return);
  void getHttpPropertiesByBusinessLine(HttpPropertiesResponse& _return, const int32_t bizCode, const std::string& env);
  void send_getHttpPropertiesByBusinessLine(const int32_t bizCode, const std::string& env);
  void recv_getHttpPropertiesByBusinessLine(HttpPropertiesResponse& _return);
  void getHttpPropertiesByAppkey(HttpPropertiesResponse& _return, const std::string& appkey, const std::string& env);
  void send_getHttpPropertiesByAppkey(const std::string& appkey, const std::string& env);
  void recv_getHttpPropertiesByAppkey(HttpPropertiesResponse& _return);
  void getSandbox(SandboxResponse& _return, const std::string& appkey, const std::string& env);
  void send_getSandbox(const std::string& appkey, const std::string& env);
  void recv_getSandbox(SandboxResponse& _return);
  void getHlbUpstream(UpstreamResponse& _return, const std::string& nginx_type, const std::string& idc_type, const std::string& env);
  void send_getHlbUpstream(const std::string& nginx_type, const std::string& idc_type, const std::string& env);
  void recv_getHlbUpstream(UpstreamResponse& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MNSCacheServiceProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<MNSCacheServiceIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (MNSCacheServiceProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_getMNSCache(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMNSCache4HLB(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAppKeyListByBusinessLine(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getHttpPropertiesByBusinessLine(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getHttpPropertiesByAppkey(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSandbox(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getHlbUpstream(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MNSCacheServiceProcessor(boost::shared_ptr<MNSCacheServiceIf> iface) :
    iface_(iface) {
    processMap_["getMNSCache"] = &MNSCacheServiceProcessor::process_getMNSCache;
    processMap_["getMNSCache4HLB"] = &MNSCacheServiceProcessor::process_getMNSCache4HLB;
    processMap_["getAppKeyListByBusinessLine"] = &MNSCacheServiceProcessor::process_getAppKeyListByBusinessLine;
    processMap_["getHttpPropertiesByBusinessLine"] = &MNSCacheServiceProcessor::process_getHttpPropertiesByBusinessLine;
    processMap_["getHttpPropertiesByAppkey"] = &MNSCacheServiceProcessor::process_getHttpPropertiesByAppkey;
    processMap_["getSandbox"] = &MNSCacheServiceProcessor::process_getSandbox;
    processMap_["getHlbUpstream"] = &MNSCacheServiceProcessor::process_getHlbUpstream;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~MNSCacheServiceProcessor() {}
};

class MNSCacheServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MNSCacheServiceProcessorFactory(const ::boost::shared_ptr< MNSCacheServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MNSCacheServiceIfFactory > handlerFactory_;
};

class MNSCacheServiceMultiface : virtual public MNSCacheServiceIf {
 public:
  MNSCacheServiceMultiface(std::vector<boost::shared_ptr<MNSCacheServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MNSCacheServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MNSCacheServiceIf> > ifaces_;
  MNSCacheServiceMultiface() {}
  void add(boost::shared_ptr<MNSCacheServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getMNSCache(MNSResponse& _return, const std::string& appkey, const std::string& version, const std::string& env) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getMNSCache(_return, appkey, version, env);
        return;
      } else {
        ifaces_[i]->getMNSCache(_return, appkey, version, env);
      }
    }
  }

  void getMNSCache4HLB(MNSResponse& _return, const std::string& appkey, const std::string& version, const std::string& env) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getMNSCache4HLB(_return, appkey, version, env);
        return;
      } else {
        ifaces_[i]->getMNSCache4HLB(_return, appkey, version, env);
      }
    }
  }

  void getAppKeyListByBusinessLine(AppKeyListResponse& _return, const int32_t bizCode, const std::string& env) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getAppKeyListByBusinessLine(_return, bizCode, env);
        return;
      } else {
        ifaces_[i]->getAppKeyListByBusinessLine(_return, bizCode, env);
      }
    }
  }

  void getHttpPropertiesByBusinessLine(HttpPropertiesResponse& _return, const int32_t bizCode, const std::string& env) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getHttpPropertiesByBusinessLine(_return, bizCode, env);
        return;
      } else {
        ifaces_[i]->getHttpPropertiesByBusinessLine(_return, bizCode, env);
      }
    }
  }

  void getHttpPropertiesByAppkey(HttpPropertiesResponse& _return, const std::string& appkey, const std::string& env) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getHttpPropertiesByAppkey(_return, appkey, env);
        return;
      } else {
        ifaces_[i]->getHttpPropertiesByAppkey(_return, appkey, env);
      }
    }
  }

  void getSandbox(SandboxResponse& _return, const std::string& appkey, const std::string& env) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getSandbox(_return, appkey, env);
        return;
      } else {
        ifaces_[i]->getSandbox(_return, appkey, env);
      }
    }
  }

  void getHlbUpstream(UpstreamResponse& _return, const std::string& nginx_type, const std::string& idc_type, const std::string& env) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getHlbUpstream(_return, nginx_type, idc_type, env);
        return;
      } else {
        ifaces_[i]->getHlbUpstream(_return, nginx_type, idc_type, env);
      }
    }
  }

};



#endif
