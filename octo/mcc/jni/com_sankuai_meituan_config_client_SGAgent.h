/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <string>
#include "call_back.h"
#include "file_config_listener.h"
#include <boost/shared_ptr.hpp>
#include "sg_agent_fileconfig_processor.h"
/* Header for class com_sankuai_meituan_config_client_SGAgent */

#ifndef _Included_com_sankuai_meituan_config_client_SGAgent
#define _Included_com_sankuai_meituan_config_client_SGAgent
#ifdef __cplusplus
extern "C" {
#endif

static jstring StringToJString(JNIEnv * env, const std::string & nativeString) {
        return env->NewStringUTF(nativeString.c_str());
}

typedef struct CBData{
    JavaVM* m_pVm;
    JNIEnv* m_pEnv;
    jobject m_objInterface;
    jobject m_objCallBack;
} CBData;

static CBData g_cbData;

JNIEXPORT jint JNI_OnLoad(JavaVM* vm, void* reserved)
{
    g_cbData.m_pVm = vm;

    if (vm -> GetEnv((void**) &g_cbData.m_pEnv, JNI_VERSION_1_6) != JNI_OK) {
        return -1;
    }

    // 返回jni的版本
    return JNI_VERSION_1_6;
}

int ProcessJNICB(std::string filename, std::string oriFile, std::string newFile)
{
    //JavaVM* pVm;
    //g_cbData.m_pEnv->GetJavaVM(&pVm);
    //pVm->AttachCurrentThread((void**)&g_cbData.m_pEnv,NULL);
    if (NULL != g_cbData.m_pVm) {
        int getEnvStat =
            g_cbData.m_pVm->GetEnv((void **)&g_cbData.m_pEnv,
                    JNI_VERSION_1_6);
        if (getEnvStat == JNI_EDETACHED) {
            CLOG_WARN("GetEnv: not attached");
            if (g_cbData.m_pVm->AttachCurrentThread((void **) &g_cbData.m_pEnv, NULL) != 0) {
                CLOG_ERROR("Failed to attach");
                return -1;
            }
        } else if (getEnvStat == JNI_OK) {
        } else if (getEnvStat == JNI_EVERSION) {
            CLOG_ERROR("GetEnv: version not supported");
            return -1;
        }
    }

    jclass jclsProcess = g_cbData.m_pEnv->GetObjectClass(g_cbData.m_objInterface);
    if (jclsProcess == NULL)
    {
        CLOG_ERROR("jclsProcess = NULL\n");
        return -1;
    }

    jmethodID jmidProcess = g_cbData.m_pEnv->GetMethodID(jclsProcess, "change",
                "(Ljava/lang/String;[B[B)V");
    if (jmidProcess == NULL)
    {
        CLOG_ERROR("jmidProcess = NULL\n");
        return -2;
    }

    //if (NULL == g_cbData.m_pEnv) {
    //    return -1;
    //}

    jstring jfilename = StringToJString(g_cbData.m_pEnv, filename);
    jbyteArray boriFile = g_cbData.m_pEnv
        -> NewByteArray(strlen(oriFile.c_str()));
    g_cbData.m_pEnv -> SetByteArrayRegion(
        boriFile, 0, strlen(oriFile.c_str()), (jbyte*)oriFile.c_str());

    jbyteArray bnewFile = g_cbData.m_pEnv
        -> NewByteArray(strlen(newFile.c_str()));
    g_cbData.m_pEnv -> SetByteArrayRegion(
        bnewFile, 0, strlen(newFile.c_str()), (jbyte*)newFile.c_str());

    g_cbData.m_pEnv->CallIntMethod(g_cbData.m_objInterface,
                jmidProcess, jfilename, boriFile, bnewFile);

    //pVm->DetachCurrentThread();

    return 0;
}

class TestListener: public FileChangeListener {
    public:
        virtual void OnEvent(std::string filename, std::string oriFile, std::string newFile) {
            try {
                ProcessJNICB(filename, oriFile, newFile);
            }
            catch (...) {
                CLOG_ERROR("failed to OnEvent");
            }
        }
};

/*
 * Class:     com_sankuai_meituan_config_client_SGAgent
 * Method:    setConfig
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_sankuai_meituan_config_client_SGAgent_setConfig
  (JNIEnv *, jclass, jstring, jstring, jstring, jstring);

/*
 * Class:     com_sankuai_meituan_config_client_SGAgent
 * Method:    get
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_sankuai_meituan_config_client_SGAgent_get
  (JNIEnv *, jclass, jstring, jstring, jstring);

/*
 * Class:     com_sankuai_meituan_config_client_SGAgent
 * Method:    fileConfigAddApp
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_sankuai_meituan_config_client_SGAgent_fileConfigAddApp
  (JNIEnv *, jclass, jstring);

/*
 * Class:     com_sankuai_meituan_config_client_SGAgent
 * Method:    fileConfigGet
 * Signature: (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jbyteArray JNICALL Java_com_sankuai_meituan_config_client_SGAgent_fileConfigGet
  (JNIEnv *, jclass, jstring, jstring);


/*
 * Class:     com_sankuai_meituan_config_client_SGAgent
 * Method:    resetUserCallBack
 * Signature: (Lcom/sankuai/meituan/config/client/CBInterface;)I
 */
JNIEXPORT jint JNICALL Java_com_sankuai_meituan_config_client_SGAgent_resetUserCallBack
  (JNIEnv *, jclass, jobject);

/*
 * Class:     com_sankuai_meituan_config_client_SGAgent
 * Method:    process
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_com_sankuai_meituan_config_client_SGAgent_process
  (JNIEnv *, jclass, jint);


/*
 *  * Class:     com_sankuai_meituan_config_client_SGAgent
 *   * Method:    addListener
 *    * Signature: (Ljava/lang/String;)I
 *     */
JNIEXPORT jint JNICALL Java_com_sankuai_meituan_config_client_SGAgent_addListener
  (JNIEnv *, jclass, jstring, jobject);

#ifdef __cplusplus
}
#endif
#endif
