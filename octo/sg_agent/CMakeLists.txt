cmake_minimum_required(VERSION 2.8)

project(sg_agent C CXX)

SET(CMAKE_CXX_FLAGS "-g -fPIC -Wno-deprecated -DHAVE_NETINET_IN_H -DMUDUO_STD_STRING")
SET(CMAKE_C_FLAGS "-g -fPIC -Wno-deprecated")

SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

INCLUDE_DIRECTORIES(./)
INCLUDE_DIRECTORIES(/usr/include/)
INCLUDE_DIRECTORIES(/usr/include/thrift/)

SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

#for filter absolute path of compiler machine
SET(CMAKE_USE_RELATIVE_PATHS ON)

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake")
MESSAGE(STATUS "CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH}")

SET(SGAGENT_SRC_PATH ${CMAKE_SOURCE_DIR}/src)
MESSAGE(STATUS "SGAGENT_SRC_PATH ${SGAGENT_SRC_PATH}")

SET(SGAGENT_MODULE_PATH ${CMAKE_SOURCE_DIR}/module)
MESSAGE(STATUS "SGAGENT_MODULE_PATH ${SGAGENT_MODULE_PATH}")

SET(THIRD_MODULE_PATH ${CMAKE_SOURCE_DIR}/../common/cpp/lib)
MESSAGE(STATUS "THIRD_MODULE_PATH ${THIRD_MODULE_PATH}")

SET(CTHRIFT_MODULE_PATH ${CMAKE_SOURCE_DIR}/module/cthrift/include)
MESSAGE(STATUS "CTHRIFT_MODULE_PATH ${CTHRIFT_MODULE_PATH}")

SET(MAFKA_MODULE_PATH ${CMAKE_SOURCE_DIR}/module/mafka-cpp-client)
MESSAGE(STATUS "MAFKA_MODULE_PATH ${MAFKA_MODULE_PATH}")

SET(CLOG_MODULE_PATH ${CMAKE_SOURCE_DIR}/module/clog)
MESSAGE(STATUS "CLOG_MODULE_PATH ${CLOG_MODULE_PATH}")

SET(CMTRACE_MODULE_PATH ${CMAKE_SOURCE_DIR}/module/cmtraceV2/include)
MESSAGE(STATUS "CMTRACE_MODULE_PATH ${CMTRACE_MODULE_PATH}")

SET(CORE_PATH ${CMAKE_SOURCE_DIR}/../plugin)
MESSAGE(STATUS "CORE_PATH ${CORE_PATH}")

SET(LOG4CPLUS_PATH ${SGAGENT_SRC_PATH})
MESSAGE(STATUS "LOG4CPLUS_PATH ${LOG4CPLUS_PATH}")

SET(COMMON_PATH ${SGAGENT_SRC_PATH}/comm)
MESSAGE(STATUS "COMMON_PATH ${COMMON_PATH}")

SET(UTIL_PATH ${SGAGENT_SRC_PATH}/util)
MESSAGE(STATUS "UTIL_PATH ${UTIL_PATH}")
#for filter absolute path of compiler machine
SET(CMAKE_USE_RELATIVE_PATHS ON)

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake")
MESSAGE(STATUS "CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH}")

SET(SGAGENT_SRC_PATH ${CMAKE_SOURCE_DIR}/src)
MESSAGE(STATUS "SGAGENT_SRC_PATH ${SGAGENT_SRC_PATH}")

SET(SGAGENT_MODULE_PATH ${CMAKE_SOURCE_DIR}/module)
MESSAGE(STATUS "SGAGENT_MODULE_PATH ${SGAGENT_MODULE_PATH}")

SET(THIRD_MODULE_PATH ${CMAKE_SOURCE_DIR}/../common/cpp/lib)
MESSAGE(STATUS "THIRD_MODULE_PATH ${THIRD_MODULE_PATH}")

SET(CORE_PATH ${CMAKE_SOURCE_DIR}/../plugin)
MESSAGE(STATUS "CORE_PATH ${CORE_PATH}")

SET(LOG4CPLUS_PATH ${SGAGENT_SRC_PATH})
MESSAGE(STATUS "LOG4CPLUS_PATH ${LOG4CPLUS_PATH}")

SET(COMMON_PATH ${SGAGENT_SRC_PATH}/comm)
MESSAGE(STATUS "COMMON_PATH ${COMMON_PATH}")

SET(UTIL_PATH ${SGAGENT_SRC_PATH}/util)
MESSAGE(STATUS "UTIL_PATH ${UTIL_PATH}")

SET(SGAGENT_PATH ${SGAGENT_SRC_PATH}/sg_agent)
MESSAGE(STATUS "SGAGENT_PATH ${SGAGENT_PATH}")

SET(SG_COMMON_PATH ${SGAGENT_SRC_PATH}/sgcommon)
MESSAGE(STATUS "SG_COMMON_PATH ${SG_COMMON_PATH}")

SET(MNS_PATH ${SGAGENT_SRC_PATH}/mns)
MESSAGE(STATUS "MNS_PATH ${MNS_PATH}")

INCLUDE(ExternalProject)

#for output
EXECUTE_PROCESS(COMMAND mkdir ${CMAKE_SOURCE_DIR}/build)
SET(CMAKE_INSTALL_PREFIX ${CMAKE_SOURCE_DIR}/build)
MESSAGE(STATUS "CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX}")

#default binary and lib path
SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_INSTALL_PREFIX}/bin)
EXECUTE_PROCESS(COMMAND mkdir ${EXECUTABLE_OUTPUT_PATH})
MESSAGE(STATUS "EXECUTABLE_OUTPUT_PATH ${EXECUTABLE_OUTPUT_PATH}")

# find zookeeper libraries
FIND_PACKAGE(Zookeeper REQUIRED)
MESSAGE(STATUS "ZOOKEEPER_LIBRARY ${ZOOKEEPER_LIBRARY}")
MESSAGE(STATUS "ZOOKEEPER_INCLUDE_DIR ${ZOOKEEPER_INCLUDE_DIR}")

# find boost libraries
FIND_PACKAGE(Boost REQUIRED)
MESSAGE(STATUS "BOOST_INCLUDE_DIR ${BOOST_INCLUDE_DIR}")

# find muddo libraries
FIND_PACKAGE(Muduo REQUIRED)

MESSAGE(STATUS "MUDUO_INCLUDE_DIR ${MUDUO_INCLUDE_DIR}")
MESSAGE(STATUS "MUDUO_BASE_LIBRARIES ${MUDUO_BASE_LIBRARIES}")
MESSAGE(STATUS "MUDUO_NET_LIBRARIES ${MUDUO_NET_LIBRARIES}")
MESSAGE(STATUS "MUDUO_HTTP_LIBRARIES ${MUDUO_HTTP_LIBRARIES}")
MESSAGE(STATUS "MUDUO_STATIC_LIB ${MUDUO_STATIC_LIB}")


# find curl libraries
FIND_PACKAGE(Curl REQUIRED)
MESSAGE(STATUS "CURL_INCLUDE_DIR ${CURL_INCLUDE_DIR}")
MESSAGE(STATUS "CURL_LIBRARY ${CURL_LIBRARY}")


# find thrift libraries
FIND_PACKAGE(Thrift REQUIRED)
SET(THRIFT_COMPILER ${THIRD_MODULE_PATH}/thrift-0.8.0_build/bin/thrift)
SET(THRIFT_INCLUDE_DIR ${SGAGENT_MODULE_PATH}/thrift/include)
SET(THRIFT_STATIC_LIB ${SGAGENT_MODULE_PATH}/thrift/lib/libthrift.a)
SET(THRIFTNB_STATIC_LIB ${SGAGENT_MODULE_PATH}/thrift/lib/libthriftnb.a)
MESSAGE(STATUS "THRIFT_INCLUDE_DIR ${THRIFT_INCLUDE_DIR}")
MESSAGE(STATUS "THRIFT_LIBS ${THRIFT_LIBS}")
MESSAGE(STATUS "THRIFT_STATIC_LIB ${THRIFT_STATIC_LIB}")
MESSAGE(STATUS "THRIFTNB_STATIC_LIB ${THRIFTNB_STATIC_LIB}")

SET(OCTO_IDL_PATH ../common/idl)
MESSAGE(STATUS "OCTO_IDL_PATH ${OCTO_IDL_PATH}")

execute_process(COMMAND ${THRIFT_COMPILER} -r --gen cpp ${OCTO_IDL_PATH}/idl-sgagent/src/main/thrift/sgagent_service.thrift WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

execute_process(COMMAND ${THRIFT_COMPILER} -r --gen cpp ${OCTO_IDL_PATH}/idl-sgagent/src/main/thrift/sgagent_worker_service.thrift WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

execute_process(COMMAND ${THRIFT_COMPILER} -r --gen cpp ${OCTO_IDL_PATH}/idl-sgagent/src/main/thrift/sg_worker_service.thrift WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

execute_process(COMMAND ${THRIFT_COMPILER} -r --gen cpp ${OCTO_IDL_PATH}/idl-sgagent/src/main/thrift/operation_common.thrift WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

execute_process(COMMAND ${THRIFT_COMPILER} -r --gen cpp ${OCTO_IDL_PATH}/idl-config/src/main/thrift/config_service.thrift WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

execute_process(COMMAND ${THRIFT_COMPILER} -r --gen cpp ${OCTO_IDL_PATH}/idl-config/src/main/thrift/config_data.thrift WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

execute_process(COMMAND ${THRIFT_COMPILER} -r --gen cpp ${OCTO_IDL_PATH}/idl-mnsc/src/main/thrift/mnsc_service.thrift WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

execute_process(COMMAND ${THRIFT_COMPILER} -r --gen cpp ${OCTO_IDL_PATH}/idl-aggregator/src/main/thrift/aggregator_service.thrift WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

MESSAGE("CMAKE_CURRENT_SOURCE_DIR = ${CMAKE_CURRENT_SOURCE_DIR}")

execute_process(COMMAND mv  ${CMAKE_SOURCE_DIR}/gen-cpp ${CMAKE_SOURCE_DIR}/octoidl)

SET(THRIFT_GEN_CPP_PATH ${CMAKE_SOURCE_DIR}/octoidl)
MESSAGE(STATUS "THRIFT_GEN_CPP_PATH ${THRIFT_GEN_CPP_PATH}")

execute_process(COMMAND rm -rf ${THRIFT_GEN_CPP_PATH}/AggregatorService_server.skeleton.cpp
                        	${THRIFT_GEN_CPP_PATH}/MtConfigService_server.skeleton.cpp
                        	${THRIFT_GEN_CPP_PATH}/SGAgent_server.skeleton.cpp
                        	${THRIFT_GEN_CPP_PATH}/SGAgentWorker_server.skeleton.cpp
				${THRIFT_GEN_CPP_PATH}/MNSCacheService_server.skeleton.cpp
				)
set(CMAKE_BUILD_NO_TESTS 1)

SET(CTHRIFT_SRC_ORIGIN_PATH  ${CMAKE_SOURCE_DIR}/../mtransport/cthrift/src/cthrift/)
SET(MAFKA_SRC_ORIGIN_PATH    ${CMAKE_SOURCE_DIR}/../mafka-cpp-client/)
SET(CMTRACE_SRC_ORIGIN_PATH  ${CMAKE_SOURCE_DIR}/../mtrace/cmtrace/)
SET(CLOG_SRC_PATH            ${CMAKE_SOURCE_DIR}/../cmdlog/clog)


ADD_SUBDIRECTORY(${CMTRACE_SRC_ORIGIN_PATH} ./module/cmtraceV2/lib)

SET(INCLUDE_CMTRACE_OUTPUT_PATH ./module/cmtraceV2/include/cmtraceV2/)
EXECUTE_PROCESS(COMMAND rm -rf ${INCLUDE_CMTRACE_OUTPUT_PATH})
EXECUTE_PROCESS(COMMAND mkdir -p ${INCLUDE_CMTRACE_OUTPUT_PATH})
EXECUTE_PROCESS(COMMAND find ${CMTRACE_SRC_ORIGIN_PATH}/mtrace/include -name *.h -exec cp -t ${INCLUDE_CMTRACE_OUTPUT_PATH} {} \;)

#find cthrift libraries
FIND_PACKAGE(CmtraceV2 REQUIRED)
MESSAGE(STATUS "CMTRACE_INCLUDE_DIR ${CMTRACE_INCLUDE_DIR}")
MESSAGE(STATUS "CMTRACE_LIBRARY ${CMTRACE_LIBRARY}")
INCLUDE_DIRECTORIES(SYSTEM ${CMTRACE_INCLUDE_DIR})


SET(INCLUDE_CLOG_OUTPUT_PATH ./module/clog/include/clog/)
SET(CLOG_OUTPUT_LIB_PATH ./module/clog/lib)
SET(CLOG_INCLUDE_PATH ${CLOG_SRC_PATH}/include)
MESSAGE(STATUS "CLOG_INCLUDE_PATH ${CLOG_INCLUDE_PATH}")
EXECUTE_PROCESS(COMMAND rm -rf ${INCLUDE_CLOG_OUTPUT_PATH})
EXECUTE_PROCESS(COMMAND rm -rf ${CLOG_OUTPUT_LIB_PATH})

ADD_SUBDIRECTORY(${CLOG_SRC_PATH} ${CLOG_OUTPUT_LIB_PATH})

EXECUTE_PROCESS(COMMAND mkdir -p ${INCLUDE_CLOG_OUTPUT_PATH})
EXECUTE_PROCESS(COMMAND find ${CLOG_INCLUDE_PATH} -name *.h -exec cp -t ${INCLUDE_CLOG_OUTPUT_PATH} {} \;)
EXECUTE_PROCESS(COMMAND mkdir -p ${INCLUDE_CLOG_OUTPUT_PATH})
EXECUTE_PROCESS(COMMAND find ${CMAKE_SOURCE_DIR}/lib/ -name libclog* -exec cp -t ${CLOG_OUTPUT_LIB_PATH} {} \;)

#find clog libraries
MESSAGE("---------------------------------")
FIND_PACKAGE(Clog REQUIRED)
MESSAGE("---------------------------------")
MESSAGE(STATUS "CLOG_INCLUDE_DIR ${CLOG_INCLUDE_DIR}")
MESSAGE(STATUS "CLOG_LIBRARY ${CLOG_LIBRARY}")
INCLUDE_DIRECTORIES(SYSTEM ${CLOG_INCLUDE_DIR})

ADD_SUBDIRECTORY(${CTHRIFT_SRC_ORIGIN_PATH} ./module/cthrift/lib)


SET(INCLUDE_CTHRIFT_OUTPUT_PATH ./module/cthrift/include/cthrift/)
EXECUTE_PROCESS(COMMAND rm -rf ${INCLUDE_CTHRIFT_OUTPUT_PATH})
EXECUTE_PROCESS(COMMAND mkdir -p ${INCLUDE_CTHRIFT_OUTPUT_PATH})
SET(INCLUDE_MNS_OUTPUT_PATH ./module/cthrift/include/mns_sdk)
EXECUTE_PROCESS(COMMAND rm -rf ${INCLUDE_MNS_OUTPUT_PATH})
EXECUTE_PROCESS(COMMAND mkdir -p ${INCLUDE_MNS_OUTPUT_PATH})
SET(INCLUDE_MCC_OUTPUT_PATH ./module/cthrift/include/mcc_sdk)
EXECUTE_PROCESS(COMMAND rm -rf ${INCLUDE_MCC_OUTPUT_PATH})
EXECUTE_PROCESS(COMMAND mkdir -p ${INCLUDE_MCC_OUTPUT_PATH})
SET(INCLUDE_UNIFORM_OUTPUT_PATH ./module/cthrift/include/uniform)
EXECUTE_PROCESS(COMMAND rm -rf ${INCLUDE_UNIFORM_OUTPUT_PATH})
EXECUTE_PROCESS(COMMAND mkdir -p ${INCLUDE_UNIFORM_OUTPUT_PATH})



#DO NOT add ' OR " to the path
EXECUTE_PROCESS(COMMAND find ${CTHRIFT_SRC_ORIGIN_PATH} -path  ${CTHRIFT_SRC_ORIGIN_PATH}/mns_sdk -prune -o -name *.h -print -exec cp -t ${INCLUDE_CTHRIFT_OUTPUT_PATH} {} \;)
#DO NOT add ' OR " to the path
EXECUTE_PROCESS(COMMAND find ${CTHRIFT_SRC_ORIGIN_PATH} -path  ${CTHRIFT_SRC_ORIGIN_PATH}/mns_sdk -prune -o -name *.tcc -print -exec cp -t ${INCLUDE_CTHRIFT_OUTPUT_PATH} {} \;)
EXECUTE_PROCESS(COMMAND find ${CTHRIFT_SRC_ORIGIN_PATH}/mns_sdk -name *.h -exec cp -t ${INCLUDE_MNS_OUTPUT_PATH} {} \;)
#DO NOT add ' OR " to the path
EXECUTE_PROCESS(COMMAND find ${CTHRIFT_SRC_ORIGIN_PATH} -path ${CTHRIFT_SRC_ORIGIN_PATH}/mcc_sdk -prune -o -name *.h -print -exec cp -t ${INCLUDE_CTHRIFT_OUTPUT_PATH} {} \;)
#DO NOT add ' OR " to the path
EXECUTE_PROCESS(COMMAND find ${CTHRIFT_SRC_ORIGIN_PATH} -path ${CTHRIFT_SRC_ORIGIN_PATH}/mcc_sdk -prune -o -name *.tcc -print -exec cp -t ${INCLUDE_CTHRIFT_OUTPUT_PATH} {} \;)
EXECUTE_PROCESS(COMMAND find ${CTHRIFT_SRC_ORIGIN_PATH}/mcc_sdk -name *.h -exec cp -t ${INCLUDE_MCC_OUTPUT_PATH} {} \;)
EXECUTE_PROCESS(COMMAND find ${CTHRIFT_SRC_ORIGIN_PATH}/uniform -name *.h -exec cp -t ${INCLUDE_UNIFORM_OUTPUT_PATH} {} \;)

#find cthrift libraries
FIND_PACKAGE(Cthrift REQUIRED)
MESSAGE(STATUS "CTHRIFT_INCLUDE_DIR ${CTHRIFT_INCLUDE_DIR}")
MESSAGE(STATUS "CTHRIFT_LIBRARY ${CTHRIFT_LIBRARY}")

INCLUDE_DIRECTORIES(SYSTEM ${CTHRIFT_INCLUDE_DIR})
INCLUDE_DIRECTORIES(SYSTEM ${CTHRIFT_INCLUDE_DIR}/cthrift/)

ADD_SUBDIRECTORY(${MAFKA_SRC_ORIGIN_PATH} ./module/mafka-cpp-client/lib)

SET(INCLUDE_MAFKA_OUTPUT_PATH ./module/mafka-cpp-client/include/)
EXECUTE_PROCESS(COMMAND rm -rf ${INCLUDE_MAFKA_OUTPUT_PATH})
EXECUTE_PROCESS(COMMAND mkdir -p ${INCLUDE_MAFKA_OUTPUT_PATH})
EXECUTE_PROCESS(COMMAND find ${MAFKA_SRC_ORIGIN_PATH}/src/  -name *.h -exec cp -t ${INCLUDE_MAFKA_OUTPUT_PATH} {} \;)

# find mafka libraries
FIND_PACKAGE(Mafka REQUIRED)
MESSAGE(STATUS "MAFKA_INCLUDE_DIR ${MAFKA_INCLUDE_DIR}")
MESSAGE(STATUS "MAFKA_LIBRARY ${MAFKA_LIBRARY}")

if(${CMAKE_BUILD_TYPE} MATCHES "debug")
	ADD_DEFINITIONS(-DSG_AGENT_TEST)
	ADD_SUBDIRECTORY(src/test)
else()
		ADD_SUBDIRECTORY(src/sg_agent)
		ADD_SUBDIRECTORY(src/sgcommon)
		ADD_SUBDIRECTORY(src/mns)
endif()

#EXECUTE_PROCESS(COMMAND mkdir ${CMAKE_SOURCE_DIR}/build/tool)
#SET(POST_TOOL_PATH ${CMAKE_INSTALL_PREFIX}/tool)
#MESSAGE(STATUS "POST_TOOL_PATH ${POST_TOOL_PATH}")
EXECUTE_PROCESS(COMMAND mkdir ${EXECUTABLE_OUTPUT_PATH}/libs)
SET(POST_DYNAMIC_LIBS_PATH ${EXECUTABLE_OUTPUT_PATH}/libs)
MESSAGE(STATUS "POST_DYNAMIC_LIBS_PATH ${POST_DYNAMIC_LIBS_PATH}")

INSTALL(CODE "execute_process(COMMAND find ${CMAKE_SOURCE_DIR}/tool/ -type f -exec cp -rt ${EXECUTABLE_OUTPUT_PATH} {} \;)")
INSTALL(CODE "execute_process(COMMAND find ${CMAKE_SOURCE_DIR}/conf/ -type f -exec cp -rt ${EXECUTABLE_OUTPUT_PATH} {} \;)")
INSTALL(CODE "execute_process(COMMAND find ${CMAKE_SOURCE_DIR}/dynamic_libs/ -type f -exec cp -rt ${POST_DYNAMIC_LIBS_PATH} {} \;)")
INSTALL(CODE "execute_process(COMMAND find ${CMAKE_SOURCE_DIR}/dynamic_libs/ -type l -exec cp -rt ${POST_DYNAMIC_LIBS_PATH} {} \;)")
