/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef appkey_TYPES_H
#define appkey_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>





typedef struct _AppkeyDesc__isset {
  _AppkeyDesc__isset() : appkey(false), category(false), business(false), base(false), owt(false), pdl(false), regLimit(false), cell(false) {}
  bool appkey;
  bool category;
  bool business;
  bool base;
  bool owt;
  bool pdl;
  bool regLimit;
  bool cell;
} _AppkeyDesc__isset;

class AppkeyDesc {
 public:

  static const char* ascii_fingerprint; // = "A44A082646EF80597F7B32389335E300";
  static const uint8_t binary_fingerprint[16]; // = {0xA4,0x4A,0x08,0x26,0x46,0xEF,0x80,0x59,0x7F,0x7B,0x32,0x38,0x93,0x35,0xE3,0x00};

  AppkeyDesc() : appkey(""), category(""), business(0), base(0), owt(""), pdl(""), regLimit(0), cell("") {
  }

  virtual ~AppkeyDesc() throw() {}

  std::string appkey;
  std::string category;
  int32_t business;
  int32_t base;
  std::string owt;
  std::string pdl;
  int32_t regLimit;
  std::string cell;

  _AppkeyDesc__isset __isset;

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_category(const std::string& val) {
    category = val;
  }

  void __set_business(const int32_t val) {
    business = val;
  }

  void __set_base(const int32_t val) {
    base = val;
  }

  void __set_owt(const std::string& val) {
    owt = val;
  }

  void __set_pdl(const std::string& val) {
    pdl = val;
  }

  void __set_regLimit(const int32_t val) {
    regLimit = val;
  }

  void __set_cell(const std::string& val) {
    cell = val;
  }

  bool operator == (const AppkeyDesc & rhs) const
  {
    if (!(appkey == rhs.appkey))
      return false;
    if (!(category == rhs.category))
      return false;
    if (!(business == rhs.business))
      return false;
    if (!(base == rhs.base))
      return false;
    if (!(owt == rhs.owt))
      return false;
    if (!(pdl == rhs.pdl))
      return false;
    if (!(regLimit == rhs.regLimit))
      return false;
    if (!(cell == rhs.cell))
      return false;
    return true;
  }
  bool operator != (const AppkeyDesc &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AppkeyDesc & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AppkeyDescResponse__isset {
  _AppkeyDescResponse__isset() : errCode(false), desc(false), msg(false) {}
  bool errCode;
  bool desc;
  bool msg;
} _AppkeyDescResponse__isset;

class AppkeyDescResponse {
 public:

  static const char* ascii_fingerprint; // = "6BB8CC087EEC701F26213E5E2356661A";
  static const uint8_t binary_fingerprint[16]; // = {0x6B,0xB8,0xCC,0x08,0x7E,0xEC,0x70,0x1F,0x26,0x21,0x3E,0x5E,0x23,0x56,0x66,0x1A};

  AppkeyDescResponse() : errCode(0), msg("") {
  }

  virtual ~AppkeyDescResponse() throw() {}

  int32_t errCode;
  AppkeyDesc desc;
  std::string msg;

  _AppkeyDescResponse__isset __isset;

  void __set_errCode(const int32_t val) {
    errCode = val;
  }

  void __set_desc(const AppkeyDesc& val) {
    desc = val;
  }

  void __set_msg(const std::string& val) {
    msg = val;
  }

  bool operator == (const AppkeyDescResponse & rhs) const
  {
    if (!(errCode == rhs.errCode))
      return false;
    if (!(desc == rhs.desc))
      return false;
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const AppkeyDescResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AppkeyDescResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
