/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef config_data_TYPES_H
#define config_data_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>





typedef struct _SetConfigRequest__isset {
  _SetConfigRequest__isset() : swimlane(false), token(false), cell(false) {}
  bool swimlane;
  bool token;
  bool cell;
} _SetConfigRequest__isset;

class SetConfigRequest {
 public:

  static const char* ascii_fingerprint; // = "0BA3F43FAB9AA7F4BAEF06F2ADCD3E2C";
  static const uint8_t binary_fingerprint[16]; // = {0x0B,0xA3,0xF4,0x3F,0xAB,0x9A,0xA7,0xF4,0xBA,0xEF,0x06,0xF2,0xAD,0xCD,0x3E,0x2C};

  SetConfigRequest() : appkey(""), env(""), path(""), conf(""), swimlane(""), token(""), cell("") {
  }

  virtual ~SetConfigRequest() throw() {}

  std::string appkey;
  std::string env;
  std::string path;
  std::string conf;
  std::string swimlane;
  std::string token;
  std::string cell;

  _SetConfigRequest__isset __isset;

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_env(const std::string& val) {
    env = val;
  }

  void __set_path(const std::string& val) {
    path = val;
  }

  void __set_conf(const std::string& val) {
    conf = val;
  }

  void __set_swimlane(const std::string& val) {
    swimlane = val;
    __isset.swimlane = true;
  }

  void __set_token(const std::string& val) {
    token = val;
    __isset.token = true;
  }

  void __set_cell(const std::string& val) {
    cell = val;
    __isset.cell = true;
  }

  bool operator == (const SetConfigRequest & rhs) const
  {
    if (!(appkey == rhs.appkey))
      return false;
    if (!(env == rhs.env))
      return false;
    if (!(path == rhs.path))
      return false;
    if (!(conf == rhs.conf))
      return false;
    if (__isset.swimlane != rhs.__isset.swimlane)
      return false;
    else if (__isset.swimlane && !(swimlane == rhs.swimlane))
      return false;
    if (__isset.token != rhs.__isset.token)
      return false;
    else if (__isset.token && !(token == rhs.token))
      return false;
    if (__isset.cell != rhs.__isset.cell)
      return false;
    else if (__isset.cell && !(cell == rhs.cell))
      return false;
    return true;
  }
  bool operator != (const SetConfigRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetConfigRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SetConfigResponse__isset {
  _SetConfigResponse__isset() : errMsg(false) {}
  bool errMsg;
} _SetConfigResponse__isset;

class SetConfigResponse {
 public:

  static const char* ascii_fingerprint; // = "96705E9A3FD7B072319C71653E0DBB90";
  static const uint8_t binary_fingerprint[16]; // = {0x96,0x70,0x5E,0x9A,0x3F,0xD7,0xB0,0x72,0x31,0x9C,0x71,0x65,0x3E,0x0D,0xBB,0x90};

  SetConfigResponse() : code(200), errMsg("") {
  }

  virtual ~SetConfigResponse() throw() {}

  int32_t code;
  std::string errMsg;

  _SetConfigResponse__isset __isset;

  void __set_code(const int32_t val) {
    code = val;
  }

  void __set_errMsg(const std::string& val) {
    errMsg = val;
    __isset.errMsg = true;
  }

  bool operator == (const SetConfigResponse & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (__isset.errMsg != rhs.__isset.errMsg)
      return false;
    else if (__isset.errMsg && !(errMsg == rhs.errMsg))
      return false;
    return true;
  }
  bool operator != (const SetConfigResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetConfigResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PullRequest__isset {
  _PullRequest__isset() : prID(false), note(false), prMisID(false), status(false), appkey(false), env(false), prTime(false) {}
  bool prID;
  bool note;
  bool prMisID;
  bool status;
  bool appkey;
  bool env;
  bool prTime;
} _PullRequest__isset;

class PullRequest {
 public:

  static const char* ascii_fingerprint; // = "8EC78C0365E0B4A60DCD45CD4CDFBF4D";
  static const uint8_t binary_fingerprint[16]; // = {0x8E,0xC7,0x8C,0x03,0x65,0xE0,0xB4,0xA6,0x0D,0xCD,0x45,0xCD,0x4C,0xDF,0xBF,0x4D};

  PullRequest() : prID(0), note(""), prMisID(""), status(0), appkey(""), env(0), prTime(0) {
  }

  virtual ~PullRequest() throw() {}

  int64_t prID;
  std::string note;
  std::string prMisID;
  int32_t status;
  std::string appkey;
  int32_t env;
  int64_t prTime;

  _PullRequest__isset __isset;

  void __set_prID(const int64_t val) {
    prID = val;
  }

  void __set_note(const std::string& val) {
    note = val;
  }

  void __set_prMisID(const std::string& val) {
    prMisID = val;
  }

  void __set_status(const int32_t val) {
    status = val;
  }

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_env(const int32_t val) {
    env = val;
  }

  void __set_prTime(const int64_t val) {
    prTime = val;
  }

  bool operator == (const PullRequest & rhs) const
  {
    if (!(prID == rhs.prID))
      return false;
    if (!(note == rhs.note))
      return false;
    if (!(prMisID == rhs.prMisID))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(appkey == rhs.appkey))
      return false;
    if (!(env == rhs.env))
      return false;
    if (!(prTime == rhs.prTime))
      return false;
    return true;
  }
  bool operator != (const PullRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PullRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PRDetail__isset {
  _PRDetail__isset() : prDetailID(false), prID(false), newValue(false), oldValue(false), newComment(false), oldComment(false), isDeleted(false) {}
  bool prDetailID;
  bool prID;
  bool newValue;
  bool oldValue;
  bool newComment;
  bool oldComment;
  bool isDeleted;
} _PRDetail__isset;

class PRDetail {
 public:

  static const char* ascii_fingerprint; // = "3666855326828A45CAB2FBA2ECF88210";
  static const uint8_t binary_fingerprint[16]; // = {0x36,0x66,0x85,0x53,0x26,0x82,0x8A,0x45,0xCA,0xB2,0xFB,0xA2,0xEC,0xF8,0x82,0x10};

  PRDetail() : prDetailID(0), prID(0), key(""), newValue(""), oldValue(""), newComment(""), oldComment(""), isDeleted(0) {
  }

  virtual ~PRDetail() throw() {}

  int64_t prDetailID;
  int64_t prID;
  std::string key;
  std::string newValue;
  std::string oldValue;
  std::string newComment;
  std::string oldComment;
  bool isDeleted;

  _PRDetail__isset __isset;

  void __set_prDetailID(const int64_t val) {
    prDetailID = val;
  }

  void __set_prID(const int64_t val) {
    prID = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_newValue(const std::string& val) {
    newValue = val;
  }

  void __set_oldValue(const std::string& val) {
    oldValue = val;
  }

  void __set_newComment(const std::string& val) {
    newComment = val;
  }

  void __set_oldComment(const std::string& val) {
    oldComment = val;
  }

  void __set_isDeleted(const bool val) {
    isDeleted = val;
  }

  bool operator == (const PRDetail & rhs) const
  {
    if (!(prDetailID == rhs.prDetailID))
      return false;
    if (!(prID == rhs.prID))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(newValue == rhs.newValue))
      return false;
    if (!(oldValue == rhs.oldValue))
      return false;
    if (!(newComment == rhs.newComment))
      return false;
    if (!(oldComment == rhs.oldComment))
      return false;
    if (!(isDeleted == rhs.isDeleted))
      return false;
    return true;
  }
  bool operator != (const PRDetail &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PRDetail & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Review__isset {
  _Review__isset() : reviewID(false), prID(false), reviewerMisID(false), note(false), reviewTime(false), approve(false) {}
  bool reviewID;
  bool prID;
  bool reviewerMisID;
  bool note;
  bool reviewTime;
  bool approve;
} _Review__isset;

class Review {
 public:

  static const char* ascii_fingerprint; // = "4EFD525DB97852951AD20DEF07C09D78";
  static const uint8_t binary_fingerprint[16]; // = {0x4E,0xFD,0x52,0x5D,0xB9,0x78,0x52,0x95,0x1A,0xD2,0x0D,0xEF,0x07,0xC0,0x9D,0x78};

  Review() : reviewID(0), prID(0), reviewerMisID(""), note(""), reviewTime(0), approve(0) {
  }

  virtual ~Review() throw() {}

  int64_t reviewID;
  int64_t prID;
  std::string reviewerMisID;
  std::string note;
  int64_t reviewTime;
  int32_t approve;

  _Review__isset __isset;

  void __set_reviewID(const int64_t val) {
    reviewID = val;
  }

  void __set_prID(const int64_t val) {
    prID = val;
  }

  void __set_reviewerMisID(const std::string& val) {
    reviewerMisID = val;
  }

  void __set_note(const std::string& val) {
    note = val;
  }

  void __set_reviewTime(const int64_t val) {
    reviewTime = val;
  }

  void __set_approve(const int32_t val) {
    approve = val;
  }

  bool operator == (const Review & rhs) const
  {
    if (!(reviewID == rhs.reviewID))
      return false;
    if (!(prID == rhs.prID))
      return false;
    if (!(reviewerMisID == rhs.reviewerMisID))
      return false;
    if (!(note == rhs.note))
      return false;
    if (!(reviewTime == rhs.reviewTime))
      return false;
    if (!(approve == rhs.approve))
      return false;
    return true;
  }
  bool operator != (const Review &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Review & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UpdateGroupRequest__isset {
  _UpdateGroupRequest__isset() : appkey(false), env(false), groupId(false), ips(false), version(false) {}
  bool appkey;
  bool env;
  bool groupId;
  bool ips;
  bool version;
} _UpdateGroupRequest__isset;

class UpdateGroupRequest {
 public:

  static const char* ascii_fingerprint; // = "4FA3D094E609A92BFA9AB49A38B281C0";
  static const uint8_t binary_fingerprint[16]; // = {0x4F,0xA3,0xD0,0x94,0xE6,0x09,0xA9,0x2B,0xFA,0x9A,0xB4,0x9A,0x38,0xB2,0x81,0xC0};

  UpdateGroupRequest() : appkey(""), env(""), groupId(""), version("") {
  }

  virtual ~UpdateGroupRequest() throw() {}

  std::string appkey;
  std::string env;
  std::string groupId;
  std::vector<std::string>  ips;
  std::string version;

  _UpdateGroupRequest__isset __isset;

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_env(const std::string& val) {
    env = val;
  }

  void __set_groupId(const std::string& val) {
    groupId = val;
  }

  void __set_ips(const std::vector<std::string> & val) {
    ips = val;
  }

  void __set_version(const std::string& val) {
    version = val;
    __isset.version = true;
  }

  bool operator == (const UpdateGroupRequest & rhs) const
  {
    if (!(appkey == rhs.appkey))
      return false;
    if (!(env == rhs.env))
      return false;
    if (!(groupId == rhs.groupId))
      return false;
    if (!(ips == rhs.ips))
      return false;
    if (__isset.version != rhs.__isset.version)
      return false;
    else if (__isset.version && !(version == rhs.version))
      return false;
    return true;
  }
  bool operator != (const UpdateGroupRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateGroupRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FilelogRequest__isset {
  _FilelogRequest__isset() : appkey(false), env(false), groupId(false), filename(false), userName(false), misId(false), successList(false), dErrList(false), eErrList(false), type(false) {}
  bool appkey;
  bool env;
  bool groupId;
  bool filename;
  bool userName;
  bool misId;
  bool successList;
  bool dErrList;
  bool eErrList;
  bool type;
} _FilelogRequest__isset;

class FilelogRequest {
 public:

  static const char* ascii_fingerprint; // = "7D66F4A5B035B6AD4815F99E5587362A";
  static const uint8_t binary_fingerprint[16]; // = {0x7D,0x66,0xF4,0xA5,0xB0,0x35,0xB6,0xAD,0x48,0x15,0xF9,0x9E,0x55,0x87,0x36,0x2A};

  FilelogRequest() : appkey(""), env(""), groupId(""), filename(""), userName(""), misId(""), type("") {
  }

  virtual ~FilelogRequest() throw() {}

  std::string appkey;
  std::string env;
  std::string groupId;
  std::string filename;
  std::string userName;
  std::string misId;
  std::vector<std::string>  successList;
  std::vector<std::string>  dErrList;
  std::vector<std::string>  eErrList;
  std::string type;

  _FilelogRequest__isset __isset;

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_env(const std::string& val) {
    env = val;
  }

  void __set_groupId(const std::string& val) {
    groupId = val;
  }

  void __set_filename(const std::string& val) {
    filename = val;
  }

  void __set_userName(const std::string& val) {
    userName = val;
  }

  void __set_misId(const std::string& val) {
    misId = val;
  }

  void __set_successList(const std::vector<std::string> & val) {
    successList = val;
  }

  void __set_dErrList(const std::vector<std::string> & val) {
    dErrList = val;
  }

  void __set_eErrList(const std::vector<std::string> & val) {
    eErrList = val;
  }

  void __set_type(const std::string& val) {
    type = val;
    __isset.type = true;
  }

  bool operator == (const FilelogRequest & rhs) const
  {
    if (!(appkey == rhs.appkey))
      return false;
    if (!(env == rhs.env))
      return false;
    if (!(groupId == rhs.groupId))
      return false;
    if (!(filename == rhs.filename))
      return false;
    if (!(userName == rhs.userName))
      return false;
    if (!(misId == rhs.misId))
      return false;
    if (!(successList == rhs.successList))
      return false;
    if (!(dErrList == rhs.dErrList))
      return false;
    if (!(eErrList == rhs.eErrList))
      return false;
    if (__isset.type != rhs.__isset.type)
      return false;
    else if (__isset.type && !(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const FilelogRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FilelogRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeleteFileRequest__isset {
  _DeleteFileRequest__isset() : username(false), reserved(false) {}
  bool username;
  bool reserved;
} _DeleteFileRequest__isset;

class DeleteFileRequest {
 public:

  static const char* ascii_fingerprint; // = "36610ED008B9864E8E3DB42BB7EA9327";
  static const uint8_t binary_fingerprint[16]; // = {0x36,0x61,0x0E,0xD0,0x08,0xB9,0x86,0x4E,0x8E,0x3D,0xB4,0x2B,0xB7,0xEA,0x93,0x27};

  DeleteFileRequest() : appkey(""), env(""), groupID(""), fileName(""), username(""), reserved("") {
  }

  virtual ~DeleteFileRequest() throw() {}

  std::string appkey;
  std::string env;
  std::string groupID;
  std::string fileName;
  std::string username;
  std::string reserved;

  _DeleteFileRequest__isset __isset;

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_env(const std::string& val) {
    env = val;
  }

  void __set_groupID(const std::string& val) {
    groupID = val;
  }

  void __set_fileName(const std::string& val) {
    fileName = val;
  }

  void __set_username(const std::string& val) {
    username = val;
    __isset.username = true;
  }

  void __set_reserved(const std::string& val) {
    reserved = val;
    __isset.reserved = true;
  }

  bool operator == (const DeleteFileRequest & rhs) const
  {
    if (!(appkey == rhs.appkey))
      return false;
    if (!(env == rhs.env))
      return false;
    if (!(groupID == rhs.groupID))
      return false;
    if (!(fileName == rhs.fileName))
      return false;
    if (__isset.username != rhs.__isset.username)
      return false;
    else if (__isset.username && !(username == rhs.username))
      return false;
    if (__isset.reserved != rhs.__isset.reserved)
      return false;
    else if (__isset.reserved && !(reserved == rhs.reserved))
      return false;
    return true;
  }
  bool operator != (const DeleteFileRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeleteFileRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileConfigSyncRequest__isset {
  _FileConfigSyncRequest__isset() : appkey(false), groupId(false), path(false), env(false), ip(false) {}
  bool appkey;
  bool groupId;
  bool path;
  bool env;
  bool ip;
} _FileConfigSyncRequest__isset;

class FileConfigSyncRequest {
 public:

  static const char* ascii_fingerprint; // = "14643C8DFE743EE3CD1DA8AB85EBE744";
  static const uint8_t binary_fingerprint[16]; // = {0x14,0x64,0x3C,0x8D,0xFE,0x74,0x3E,0xE3,0xCD,0x1D,0xA8,0xAB,0x85,0xEB,0xE7,0x44};

  FileConfigSyncRequest() : appkey(""), groupId(""), path(""), env(""), ip("") {
  }

  virtual ~FileConfigSyncRequest() throw() {}

  std::string appkey;
  std::string groupId;
  std::string path;
  std::string env;
  std::string ip;

  _FileConfigSyncRequest__isset __isset;

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_groupId(const std::string& val) {
    groupId = val;
    __isset.groupId = true;
  }

  void __set_path(const std::string& val) {
    path = val;
    __isset.path = true;
  }

  void __set_env(const std::string& val) {
    env = val;
  }

  void __set_ip(const std::string& val) {
    ip = val;
  }

  bool operator == (const FileConfigSyncRequest & rhs) const
  {
    if (!(appkey == rhs.appkey))
      return false;
    if (__isset.groupId != rhs.__isset.groupId)
      return false;
    else if (__isset.groupId && !(groupId == rhs.groupId))
      return false;
    if (__isset.path != rhs.__isset.path)
      return false;
    else if (__isset.path && !(path == rhs.path))
      return false;
    if (!(env == rhs.env))
      return false;
    if (!(ip == rhs.ip))
      return false;
    return true;
  }
  bool operator != (const FileConfigSyncRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileConfigSyncRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileConfigSyncResponse__isset {
  _FileConfigSyncResponse__isset() : code(false), msg(false) {}
  bool code;
  bool msg;
} _FileConfigSyncResponse__isset;

class FileConfigSyncResponse {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  FileConfigSyncResponse() : code(0), msg("") {
  }

  virtual ~FileConfigSyncResponse() throw() {}

  int32_t code;
  std::string msg;

  _FileConfigSyncResponse__isset __isset;

  void __set_code(const int32_t val) {
    code = val;
  }

  void __set_msg(const std::string& val) {
    msg = val;
  }

  bool operator == (const FileConfigSyncResponse & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const FileConfigSyncResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileConfigSyncResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
