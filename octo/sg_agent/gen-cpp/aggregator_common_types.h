/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef aggregator_common_TYPES_H
#define aggregator_common_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>





typedef struct _SGLog__isset {
  _SGLog__isset() : appkey(false), time(false), level(false), content(false) {}
  bool appkey;
  bool time;
  bool level;
  bool content;
} _SGLog__isset;

class SGLog {
 public:

  static const char* ascii_fingerprint; // = "4BB100F683C996B9C99F9E4B75E3065A";
  static const uint8_t binary_fingerprint[16]; // = {0x4B,0xB1,0x00,0xF6,0x83,0xC9,0x96,0xB9,0xC9,0x9F,0x9E,0x4B,0x75,0xE3,0x06,0x5A};

  SGLog() : appkey(""), time(0), level(0), content("") {
  }

  virtual ~SGLog() throw() {}

  std::string appkey;
  int64_t time;
  int32_t level;
  std::string content;

  _SGLog__isset __isset;

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_time(const int64_t val) {
    time = val;
  }

  void __set_level(const int32_t val) {
    level = val;
  }

  void __set_content(const std::string& val) {
    content = val;
  }

  bool operator == (const SGLog & rhs) const
  {
    if (!(appkey == rhs.appkey))
      return false;
    if (!(time == rhs.time))
      return false;
    if (!(level == rhs.level))
      return false;
    if (!(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const SGLog &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGLog & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LogList {
 public:

  static const char* ascii_fingerprint; // = "BF16587285B282040C70A9D2AA0A365A";
  static const uint8_t binary_fingerprint[16]; // = {0xBF,0x16,0x58,0x72,0x85,0xB2,0x82,0x04,0x0C,0x70,0xA9,0xD2,0xAA,0x0A,0x36,0x5A};

  LogList() {
  }

  virtual ~LogList() throw() {}

  std::vector<SGLog>  logs;

  void __set_logs(const std::vector<SGLog> & val) {
    logs = val;
  }

  bool operator == (const LogList & rhs) const
  {
    if (!(logs == rhs.logs))
      return false;
    return true;
  }
  bool operator != (const LogList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGModuleInvokeInfo__isset {
  _SGModuleInvokeInfo__isset() : traceId(false), spanId(false), spanName(false), localAppKey(false), localHost(false), localPort(false), remoteAppKey(false), remoteHost(false), remotePort(false), start(false), cost(false), type(false), status(false), count(false), debug(false), extend(false) {}
  bool traceId;
  bool spanId;
  bool spanName;
  bool localAppKey;
  bool localHost;
  bool localPort;
  bool remoteAppKey;
  bool remoteHost;
  bool remotePort;
  bool start;
  bool cost;
  bool type;
  bool status;
  bool count;
  bool debug;
  bool extend;
} _SGModuleInvokeInfo__isset;

class SGModuleInvokeInfo {
 public:

  static const char* ascii_fingerprint; // = "E873F482F9C9473903C455089A45ECBB";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x73,0xF4,0x82,0xF9,0xC9,0x47,0x39,0x03,0xC4,0x55,0x08,0x9A,0x45,0xEC,0xBB};

  SGModuleInvokeInfo() : traceId(""), spanId(""), spanName(""), localAppKey(""), localHost(""), localPort(0), remoteAppKey(""), remoteHost(""), remotePort(0), start(0), cost(0), type(0), status(0), count(0), debug(0), extend("") {
  }

  virtual ~SGModuleInvokeInfo() throw() {}

  std::string traceId;
  std::string spanId;
  std::string spanName;
  std::string localAppKey;
  std::string localHost;
  int32_t localPort;
  std::string remoteAppKey;
  std::string remoteHost;
  int32_t remotePort;
  int64_t start;
  int32_t cost;
  int32_t type;
  int32_t status;
  int32_t count;
  int32_t debug;
  std::string extend;

  _SGModuleInvokeInfo__isset __isset;

  void __set_traceId(const std::string& val) {
    traceId = val;
  }

  void __set_spanId(const std::string& val) {
    spanId = val;
  }

  void __set_spanName(const std::string& val) {
    spanName = val;
  }

  void __set_localAppKey(const std::string& val) {
    localAppKey = val;
  }

  void __set_localHost(const std::string& val) {
    localHost = val;
  }

  void __set_localPort(const int32_t val) {
    localPort = val;
  }

  void __set_remoteAppKey(const std::string& val) {
    remoteAppKey = val;
  }

  void __set_remoteHost(const std::string& val) {
    remoteHost = val;
  }

  void __set_remotePort(const int32_t val) {
    remotePort = val;
  }

  void __set_start(const int64_t val) {
    start = val;
  }

  void __set_cost(const int32_t val) {
    cost = val;
  }

  void __set_type(const int32_t val) {
    type = val;
  }

  void __set_status(const int32_t val) {
    status = val;
  }

  void __set_count(const int32_t val) {
    count = val;
  }

  void __set_debug(const int32_t val) {
    debug = val;
  }

  void __set_extend(const std::string& val) {
    extend = val;
  }

  bool operator == (const SGModuleInvokeInfo & rhs) const
  {
    if (!(traceId == rhs.traceId))
      return false;
    if (!(spanId == rhs.spanId))
      return false;
    if (!(spanName == rhs.spanName))
      return false;
    if (!(localAppKey == rhs.localAppKey))
      return false;
    if (!(localHost == rhs.localHost))
      return false;
    if (!(localPort == rhs.localPort))
      return false;
    if (!(remoteAppKey == rhs.remoteAppKey))
      return false;
    if (!(remoteHost == rhs.remoteHost))
      return false;
    if (!(remotePort == rhs.remotePort))
      return false;
    if (!(start == rhs.start))
      return false;
    if (!(cost == rhs.cost))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(count == rhs.count))
      return false;
    if (!(debug == rhs.debug))
      return false;
    if (!(extend == rhs.extend))
      return false;
    return true;
  }
  bool operator != (const SGModuleInvokeInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGModuleInvokeInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonLog__isset {
  _CommonLog__isset() : extend(false) {}
  bool extend;
} _CommonLog__isset;

class CommonLog {
 public:

  static const char* ascii_fingerprint; // = "5531C8D7ED2A5FC0358A03FFBCC21464";
  static const uint8_t binary_fingerprint[16]; // = {0x55,0x31,0xC8,0xD7,0xED,0x2A,0x5F,0xC0,0x35,0x8A,0x03,0xFF,0xBC,0xC2,0x14,0x64};

  CommonLog() : cmd(0), content(""), extend("") {
  }

  virtual ~CommonLog() throw() {}

  int32_t cmd;
  std::string content;
  std::string extend;

  _CommonLog__isset __isset;

  void __set_cmd(const int32_t val) {
    cmd = val;
  }

  void __set_content(const std::string& val) {
    content = val;
  }

  void __set_extend(const std::string& val) {
    extend = val;
    __isset.extend = true;
  }

  bool operator == (const CommonLog & rhs) const
  {
    if (!(cmd == rhs.cmd))
      return false;
    if (!(content == rhs.content))
      return false;
    if (__isset.extend != rhs.__isset.extend)
      return false;
    else if (__isset.extend && !(extend == rhs.extend))
      return false;
    return true;
  }
  bool operator != (const CommonLog &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonLog & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ErrorLog__isset {
  _ErrorLog__isset() : appkey(false), time(false), level(false), category(false), content(false) {}
  bool appkey;
  bool time;
  bool level;
  bool category;
  bool content;
} _ErrorLog__isset;

class ErrorLog {
 public:

  static const char* ascii_fingerprint; // = "4F06E212FB5DC6B92353D1A77CED7EC5";
  static const uint8_t binary_fingerprint[16]; // = {0x4F,0x06,0xE2,0x12,0xFB,0x5D,0xC6,0xB9,0x23,0x53,0xD1,0xA7,0x7C,0xED,0x7E,0xC5};

  ErrorLog() : appkey(""), time(0), level(0), category(""), content("") {
  }

  virtual ~ErrorLog() throw() {}

  std::string appkey;
  int64_t time;
  int32_t level;
  std::string category;
  std::string content;

  _ErrorLog__isset __isset;

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_time(const int64_t val) {
    time = val;
  }

  void __set_level(const int32_t val) {
    level = val;
  }

  void __set_category(const std::string& val) {
    category = val;
  }

  void __set_content(const std::string& val) {
    content = val;
  }

  bool operator == (const ErrorLog & rhs) const
  {
    if (!(appkey == rhs.appkey))
      return false;
    if (!(time == rhs.time))
      return false;
    if (!(level == rhs.level))
      return false;
    if (!(category == rhs.category))
      return false;
    if (!(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const ErrorLog &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ErrorLog & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ErrorLogList__isset {
  _ErrorLogList__isset() : logs(false) {}
  bool logs;
} _ErrorLogList__isset;

class ErrorLogList {
 public:

  static const char* ascii_fingerprint; // = "F0FE966A01F4320845B54F184C765EE0";
  static const uint8_t binary_fingerprint[16]; // = {0xF0,0xFE,0x96,0x6A,0x01,0xF4,0x32,0x08,0x45,0xB5,0x4F,0x18,0x4C,0x76,0x5E,0xE0};

  ErrorLogList() {
  }

  virtual ~ErrorLogList() throw() {}

  std::vector<ErrorLog>  logs;

  _ErrorLogList__isset __isset;

  void __set_logs(const std::vector<ErrorLog> & val) {
    logs = val;
  }

  bool operator == (const ErrorLogList & rhs) const
  {
    if (!(logs == rhs.logs))
      return false;
    return true;
  }
  bool operator != (const ErrorLogList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ErrorLogList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TraceLog__isset {
  _TraceLog__isset() : traceId(false), spanId(false), spanName(false), localAppKey(false), localHost(false), localPort(false), remoteAppKey(false), remoteHost(false), remotePort(false), start(false), cost(false), type(false), status(false), count(false), debug(false), extend(false) {}
  bool traceId;
  bool spanId;
  bool spanName;
  bool localAppKey;
  bool localHost;
  bool localPort;
  bool remoteAppKey;
  bool remoteHost;
  bool remotePort;
  bool start;
  bool cost;
  bool type;
  bool status;
  bool count;
  bool debug;
  bool extend;
} _TraceLog__isset;

class TraceLog {
 public:

  static const char* ascii_fingerprint; // = "E873F482F9C9473903C455089A45ECBB";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x73,0xF4,0x82,0xF9,0xC9,0x47,0x39,0x03,0xC4,0x55,0x08,0x9A,0x45,0xEC,0xBB};

  TraceLog() : traceId(""), spanId(""), spanName(""), localAppKey(""), localHost(""), localPort(0), remoteAppKey(""), remoteHost(""), remotePort(0), start(0), cost(0), type(0), status(0), count(0), debug(0), extend("") {
  }

  virtual ~TraceLog() throw() {}

  std::string traceId;
  std::string spanId;
  std::string spanName;
  std::string localAppKey;
  std::string localHost;
  int32_t localPort;
  std::string remoteAppKey;
  std::string remoteHost;
  int32_t remotePort;
  int64_t start;
  int32_t cost;
  int32_t type;
  int32_t status;
  int32_t count;
  int32_t debug;
  std::string extend;

  _TraceLog__isset __isset;

  void __set_traceId(const std::string& val) {
    traceId = val;
  }

  void __set_spanId(const std::string& val) {
    spanId = val;
  }

  void __set_spanName(const std::string& val) {
    spanName = val;
  }

  void __set_localAppKey(const std::string& val) {
    localAppKey = val;
  }

  void __set_localHost(const std::string& val) {
    localHost = val;
  }

  void __set_localPort(const int32_t val) {
    localPort = val;
  }

  void __set_remoteAppKey(const std::string& val) {
    remoteAppKey = val;
  }

  void __set_remoteHost(const std::string& val) {
    remoteHost = val;
  }

  void __set_remotePort(const int32_t val) {
    remotePort = val;
  }

  void __set_start(const int64_t val) {
    start = val;
  }

  void __set_cost(const int32_t val) {
    cost = val;
  }

  void __set_type(const int32_t val) {
    type = val;
  }

  void __set_status(const int32_t val) {
    status = val;
  }

  void __set_count(const int32_t val) {
    count = val;
  }

  void __set_debug(const int32_t val) {
    debug = val;
  }

  void __set_extend(const std::string& val) {
    extend = val;
  }

  bool operator == (const TraceLog & rhs) const
  {
    if (!(traceId == rhs.traceId))
      return false;
    if (!(spanId == rhs.spanId))
      return false;
    if (!(spanName == rhs.spanName))
      return false;
    if (!(localAppKey == rhs.localAppKey))
      return false;
    if (!(localHost == rhs.localHost))
      return false;
    if (!(localPort == rhs.localPort))
      return false;
    if (!(remoteAppKey == rhs.remoteAppKey))
      return false;
    if (!(remoteHost == rhs.remoteHost))
      return false;
    if (!(remotePort == rhs.remotePort))
      return false;
    if (!(start == rhs.start))
      return false;
    if (!(cost == rhs.cost))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(count == rhs.count))
      return false;
    if (!(debug == rhs.debug))
      return false;
    if (!(extend == rhs.extend))
      return false;
    return true;
  }
  bool operator != (const TraceLog &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TraceLog & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TraceLogList__isset {
  _TraceLogList__isset() : logs(false) {}
  bool logs;
} _TraceLogList__isset;

class TraceLogList {
 public:

  static const char* ascii_fingerprint; // = "AB78FF3DA4DBC1C8F517AB9DE58BD2DD";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x78,0xFF,0x3D,0xA4,0xDB,0xC1,0xC8,0xF5,0x17,0xAB,0x9D,0xE5,0x8B,0xD2,0xDD};

  TraceLogList() {
  }

  virtual ~TraceLogList() throw() {}

  std::vector<TraceLog>  logs;

  _TraceLogList__isset __isset;

  void __set_logs(const std::vector<TraceLog> & val) {
    logs = val;
  }

  bool operator == (const TraceLogList & rhs) const
  {
    if (!(logs == rhs.logs))
      return false;
    return true;
  }
  bool operator != (const TraceLogList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TraceLogList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TraceThresholdLog__isset {
  _TraceThresholdLog__isset() : traceId(false), spanId(false), spanName(false), localAppKey(false), localHost(false), localPort(false), remoteAppKey(false), remoteHost(false), remotePort(false), start(false), cost(false), type(false), status(false), count(false), debug(false), extend(false) {}
  bool traceId;
  bool spanId;
  bool spanName;
  bool localAppKey;
  bool localHost;
  bool localPort;
  bool remoteAppKey;
  bool remoteHost;
  bool remotePort;
  bool start;
  bool cost;
  bool type;
  bool status;
  bool count;
  bool debug;
  bool extend;
} _TraceThresholdLog__isset;

class TraceThresholdLog {
 public:

  static const char* ascii_fingerprint; // = "E873F482F9C9473903C455089A45ECBB";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x73,0xF4,0x82,0xF9,0xC9,0x47,0x39,0x03,0xC4,0x55,0x08,0x9A,0x45,0xEC,0xBB};

  TraceThresholdLog() : traceId(""), spanId(""), spanName(""), localAppKey(""), localHost(""), localPort(0), remoteAppKey(""), remoteHost(""), remotePort(0), start(0), cost(0), type(0), status(0), count(0), debug(0), extend("") {
  }

  virtual ~TraceThresholdLog() throw() {}

  std::string traceId;
  std::string spanId;
  std::string spanName;
  std::string localAppKey;
  std::string localHost;
  int32_t localPort;
  std::string remoteAppKey;
  std::string remoteHost;
  int32_t remotePort;
  int64_t start;
  int32_t cost;
  int32_t type;
  int32_t status;
  int32_t count;
  int32_t debug;
  std::string extend;

  _TraceThresholdLog__isset __isset;

  void __set_traceId(const std::string& val) {
    traceId = val;
  }

  void __set_spanId(const std::string& val) {
    spanId = val;
  }

  void __set_spanName(const std::string& val) {
    spanName = val;
  }

  void __set_localAppKey(const std::string& val) {
    localAppKey = val;
  }

  void __set_localHost(const std::string& val) {
    localHost = val;
  }

  void __set_localPort(const int32_t val) {
    localPort = val;
  }

  void __set_remoteAppKey(const std::string& val) {
    remoteAppKey = val;
  }

  void __set_remoteHost(const std::string& val) {
    remoteHost = val;
  }

  void __set_remotePort(const int32_t val) {
    remotePort = val;
  }

  void __set_start(const int64_t val) {
    start = val;
  }

  void __set_cost(const int32_t val) {
    cost = val;
  }

  void __set_type(const int32_t val) {
    type = val;
  }

  void __set_status(const int32_t val) {
    status = val;
  }

  void __set_count(const int32_t val) {
    count = val;
  }

  void __set_debug(const int32_t val) {
    debug = val;
  }

  void __set_extend(const std::string& val) {
    extend = val;
  }

  bool operator == (const TraceThresholdLog & rhs) const
  {
    if (!(traceId == rhs.traceId))
      return false;
    if (!(spanId == rhs.spanId))
      return false;
    if (!(spanName == rhs.spanName))
      return false;
    if (!(localAppKey == rhs.localAppKey))
      return false;
    if (!(localHost == rhs.localHost))
      return false;
    if (!(localPort == rhs.localPort))
      return false;
    if (!(remoteAppKey == rhs.remoteAppKey))
      return false;
    if (!(remoteHost == rhs.remoteHost))
      return false;
    if (!(remotePort == rhs.remotePort))
      return false;
    if (!(start == rhs.start))
      return false;
    if (!(cost == rhs.cost))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(count == rhs.count))
      return false;
    if (!(debug == rhs.debug))
      return false;
    if (!(extend == rhs.extend))
      return false;
    return true;
  }
  bool operator != (const TraceThresholdLog &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TraceThresholdLog & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TraceThresholdLogList__isset {
  _TraceThresholdLogList__isset() : logs(false) {}
  bool logs;
} _TraceThresholdLogList__isset;

class TraceThresholdLogList {
 public:

  static const char* ascii_fingerprint; // = "AB78FF3DA4DBC1C8F517AB9DE58BD2DD";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x78,0xFF,0x3D,0xA4,0xDB,0xC1,0xC8,0xF5,0x17,0xAB,0x9D,0xE5,0x8B,0xD2,0xDD};

  TraceThresholdLogList() {
  }

  virtual ~TraceThresholdLogList() throw() {}

  std::vector<TraceThresholdLog>  logs;

  _TraceThresholdLogList__isset __isset;

  void __set_logs(const std::vector<TraceThresholdLog> & val) {
    logs = val;
  }

  bool operator == (const TraceThresholdLogList & rhs) const
  {
    if (!(logs == rhs.logs))
      return false;
    return true;
  }
  bool operator != (const TraceThresholdLogList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TraceThresholdLogList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DropRequest__isset {
  _DropRequest__isset() : appkey(false), host(false), remoteAppkey(false), spanname(false), start(false), count(false), type(false) {}
  bool appkey;
  bool host;
  bool remoteAppkey;
  bool spanname;
  bool start;
  bool count;
  bool type;
} _DropRequest__isset;

class DropRequest {
 public:

  static const char* ascii_fingerprint; // = "751928D045D9F111A7AA9F962CEA2804";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0x19,0x28,0xD0,0x45,0xD9,0xF1,0x11,0xA7,0xAA,0x9F,0x96,0x2C,0xEA,0x28,0x04};

  DropRequest() : appkey(""), host(""), remoteAppkey(""), spanname(""), start(0), count(0), type(0) {
  }

  virtual ~DropRequest() throw() {}

  std::string appkey;
  std::string host;
  std::string remoteAppkey;
  std::string spanname;
  int64_t start;
  int64_t count;
  int32_t type;

  _DropRequest__isset __isset;

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_host(const std::string& val) {
    host = val;
  }

  void __set_remoteAppkey(const std::string& val) {
    remoteAppkey = val;
  }

  void __set_spanname(const std::string& val) {
    spanname = val;
  }

  void __set_start(const int64_t val) {
    start = val;
  }

  void __set_count(const int64_t val) {
    count = val;
  }

  void __set_type(const int32_t val) {
    type = val;
  }

  bool operator == (const DropRequest & rhs) const
  {
    if (!(appkey == rhs.appkey))
      return false;
    if (!(host == rhs.host))
      return false;
    if (!(remoteAppkey == rhs.remoteAppkey))
      return false;
    if (!(spanname == rhs.spanname))
      return false;
    if (!(start == rhs.start))
      return false;
    if (!(count == rhs.count))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const DropRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DropRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DropRequestList__isset {
  _DropRequestList__isset() : requests(false) {}
  bool requests;
} _DropRequestList__isset;

class DropRequestList {
 public:

  static const char* ascii_fingerprint; // = "A73FD2B5CC62FFA5D8B1605FFC62156C";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0x3F,0xD2,0xB5,0xCC,0x62,0xFF,0xA5,0xD8,0xB1,0x60,0x5F,0xFC,0x62,0x15,0x6C};

  DropRequestList() {
  }

  virtual ~DropRequestList() throw() {}

  std::vector<DropRequest>  requests;

  _DropRequestList__isset __isset;

  void __set_requests(const std::vector<DropRequest> & val) {
    requests = val;
  }

  bool operator == (const DropRequestList & rhs) const
  {
    if (!(requests == rhs.requests))
      return false;
    return true;
  }
  bool operator != (const DropRequestList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DropRequestList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PerfCostData__isset {
  _PerfCostData__isset() : cost(false), count(false) {}
  bool cost;
  bool count;
} _PerfCostData__isset;

class PerfCostData {
 public:

  static const char* ascii_fingerprint; // = "9C2A05F173B50306037BDE9AE30E1B99";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x2A,0x05,0xF1,0x73,0xB5,0x03,0x06,0x03,0x7B,0xDE,0x9A,0xE3,0x0E,0x1B,0x99};

  PerfCostData() : cost(0), count(0) {
  }

  virtual ~PerfCostData() throw() {}

  int32_t cost;
  int64_t count;

  _PerfCostData__isset __isset;

  void __set_cost(const int32_t val) {
    cost = val;
  }

  void __set_count(const int64_t val) {
    count = val;
  }

  bool operator == (const PerfCostData & rhs) const
  {
    if (!(cost == rhs.cost))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const PerfCostData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PerfCostData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PerfCostDataList__isset {
  _PerfCostDataList__isset() : costDataList(false) {}
  bool costDataList;
} _PerfCostDataList__isset;

class PerfCostDataList {
 public:

  static const char* ascii_fingerprint; // = "3C5E0016783311EF25E0D0867E30406F";
  static const uint8_t binary_fingerprint[16]; // = {0x3C,0x5E,0x00,0x16,0x78,0x33,0x11,0xEF,0x25,0xE0,0xD0,0x86,0x7E,0x30,0x40,0x6F};

  PerfCostDataList() {
  }

  virtual ~PerfCostDataList() throw() {}

  std::vector<PerfCostData>  costDataList;

  _PerfCostDataList__isset __isset;

  void __set_costDataList(const std::vector<PerfCostData> & val) {
    costDataList = val;
  }

  bool operator == (const PerfCostDataList & rhs) const
  {
    if (!(costDataList == rhs.costDataList))
      return false;
    return true;
  }
  bool operator != (const PerfCostDataList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PerfCostDataList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
