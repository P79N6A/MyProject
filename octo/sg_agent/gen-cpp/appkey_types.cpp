/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "appkey_types.h"



const char* AppkeyDesc::ascii_fingerprint = "A44A082646EF80597F7B32389335E300";
const uint8_t AppkeyDesc::binary_fingerprint[16] = {0xA4,0x4A,0x08,0x26,0x46,0xEF,0x80,0x59,0x7F,0x7B,0x32,0x38,0x93,0x35,0xE3,0x00};

uint32_t AppkeyDesc::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->appkey);
          this->__isset.appkey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->category);
          this->__isset.category = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->business);
          this->__isset.business = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->base);
          this->__isset.base = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->owt);
          this->__isset.owt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pdl);
          this->__isset.pdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->regLimit);
          this->__isset.regLimit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cell);
          this->__isset.cell = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AppkeyDesc::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AppkeyDesc");
  xfer += oprot->writeFieldBegin("appkey", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->appkey);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("category", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->category);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("business", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->business);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("base", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->base);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("owt", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->owt);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("pdl", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->pdl);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("regLimit", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->regLimit);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("cell", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->cell);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* AppkeyDescResponse::ascii_fingerprint = "6BB8CC087EEC701F26213E5E2356661A";
const uint8_t AppkeyDescResponse::binary_fingerprint[16] = {0x6B,0xB8,0xCC,0x08,0x7E,0xEC,0x70,0x1F,0x26,0x21,0x3E,0x5E,0x23,0x56,0x66,0x1A};

uint32_t AppkeyDescResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->errCode);
          this->__isset.errCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->desc.read(iprot);
          this->__isset.desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msg);
          this->__isset.msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AppkeyDescResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AppkeyDescResponse");
  xfer += oprot->writeFieldBegin("errCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->errCode);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("desc", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->desc.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("msg", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->msg);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


