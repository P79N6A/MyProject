/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AggregatorService_H
#define AggregatorService_H

#include <TProcessor.h>
#include "aggregator_service_types.h"



class AggregatorServiceIf {
 public:
  virtual ~AggregatorServiceIf() {}
  virtual int32_t uploadLog(const SGLog& log) = 0;
  virtual int32_t uploadModuleInvoke(const SGModuleInvokeInfo& log) = 0;
  virtual int32_t uploadCommonLog(const CommonLog& log) = 0;
};

class AggregatorServiceIfFactory {
 public:
  typedef AggregatorServiceIf Handler;

  virtual ~AggregatorServiceIfFactory() {}

  virtual AggregatorServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AggregatorServiceIf* /* handler */) = 0;
};

class AggregatorServiceIfSingletonFactory : virtual public AggregatorServiceIfFactory {
 public:
  AggregatorServiceIfSingletonFactory(const boost::shared_ptr<AggregatorServiceIf>& iface) : iface_(iface) {}
  virtual ~AggregatorServiceIfSingletonFactory() {}

  virtual AggregatorServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AggregatorServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<AggregatorServiceIf> iface_;
};

class AggregatorServiceNull : virtual public AggregatorServiceIf {
 public:
  virtual ~AggregatorServiceNull() {}
  int32_t uploadLog(const SGLog& /* log */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t uploadModuleInvoke(const SGModuleInvokeInfo& /* log */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t uploadCommonLog(const CommonLog& /* log */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _AggregatorService_uploadLog_args__isset {
  _AggregatorService_uploadLog_args__isset() : log(false) {}
  bool log;
} _AggregatorService_uploadLog_args__isset;

class AggregatorService_uploadLog_args {
 public:

  AggregatorService_uploadLog_args() {
  }

  virtual ~AggregatorService_uploadLog_args() throw() {}

  SGLog log;

  _AggregatorService_uploadLog_args__isset __isset;

  void __set_log(const SGLog& val) {
    log = val;
  }

  bool operator == (const AggregatorService_uploadLog_args & rhs) const
  {
    if (!(log == rhs.log))
      return false;
    return true;
  }
  bool operator != (const AggregatorService_uploadLog_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AggregatorService_uploadLog_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AggregatorService_uploadLog_pargs {
 public:


  virtual ~AggregatorService_uploadLog_pargs() throw() {}

  const SGLog* log;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AggregatorService_uploadLog_result__isset {
  _AggregatorService_uploadLog_result__isset() : success(false) {}
  bool success;
} _AggregatorService_uploadLog_result__isset;

class AggregatorService_uploadLog_result {
 public:

  AggregatorService_uploadLog_result() : success(0) {
  }

  virtual ~AggregatorService_uploadLog_result() throw() {}

  int32_t success;

  _AggregatorService_uploadLog_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AggregatorService_uploadLog_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AggregatorService_uploadLog_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AggregatorService_uploadLog_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AggregatorService_uploadLog_presult__isset {
  _AggregatorService_uploadLog_presult__isset() : success(false) {}
  bool success;
} _AggregatorService_uploadLog_presult__isset;

class AggregatorService_uploadLog_presult {
 public:


  virtual ~AggregatorService_uploadLog_presult() throw() {}

  int32_t* success;

  _AggregatorService_uploadLog_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AggregatorService_uploadModuleInvoke_args__isset {
  _AggregatorService_uploadModuleInvoke_args__isset() : log(false) {}
  bool log;
} _AggregatorService_uploadModuleInvoke_args__isset;

class AggregatorService_uploadModuleInvoke_args {
 public:

  AggregatorService_uploadModuleInvoke_args() {
  }

  virtual ~AggregatorService_uploadModuleInvoke_args() throw() {}

  SGModuleInvokeInfo log;

  _AggregatorService_uploadModuleInvoke_args__isset __isset;

  void __set_log(const SGModuleInvokeInfo& val) {
    log = val;
  }

  bool operator == (const AggregatorService_uploadModuleInvoke_args & rhs) const
  {
    if (!(log == rhs.log))
      return false;
    return true;
  }
  bool operator != (const AggregatorService_uploadModuleInvoke_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AggregatorService_uploadModuleInvoke_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AggregatorService_uploadModuleInvoke_pargs {
 public:


  virtual ~AggregatorService_uploadModuleInvoke_pargs() throw() {}

  const SGModuleInvokeInfo* log;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AggregatorService_uploadModuleInvoke_result__isset {
  _AggregatorService_uploadModuleInvoke_result__isset() : success(false) {}
  bool success;
} _AggregatorService_uploadModuleInvoke_result__isset;

class AggregatorService_uploadModuleInvoke_result {
 public:

  AggregatorService_uploadModuleInvoke_result() : success(0) {
  }

  virtual ~AggregatorService_uploadModuleInvoke_result() throw() {}

  int32_t success;

  _AggregatorService_uploadModuleInvoke_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AggregatorService_uploadModuleInvoke_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AggregatorService_uploadModuleInvoke_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AggregatorService_uploadModuleInvoke_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AggregatorService_uploadModuleInvoke_presult__isset {
  _AggregatorService_uploadModuleInvoke_presult__isset() : success(false) {}
  bool success;
} _AggregatorService_uploadModuleInvoke_presult__isset;

class AggregatorService_uploadModuleInvoke_presult {
 public:


  virtual ~AggregatorService_uploadModuleInvoke_presult() throw() {}

  int32_t* success;

  _AggregatorService_uploadModuleInvoke_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AggregatorService_uploadCommonLog_args__isset {
  _AggregatorService_uploadCommonLog_args__isset() : log(false) {}
  bool log;
} _AggregatorService_uploadCommonLog_args__isset;

class AggregatorService_uploadCommonLog_args {
 public:

  AggregatorService_uploadCommonLog_args() {
  }

  virtual ~AggregatorService_uploadCommonLog_args() throw() {}

  CommonLog log;

  _AggregatorService_uploadCommonLog_args__isset __isset;

  void __set_log(const CommonLog& val) {
    log = val;
  }

  bool operator == (const AggregatorService_uploadCommonLog_args & rhs) const
  {
    if (!(log == rhs.log))
      return false;
    return true;
  }
  bool operator != (const AggregatorService_uploadCommonLog_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AggregatorService_uploadCommonLog_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AggregatorService_uploadCommonLog_pargs {
 public:


  virtual ~AggregatorService_uploadCommonLog_pargs() throw() {}

  const CommonLog* log;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AggregatorService_uploadCommonLog_result__isset {
  _AggregatorService_uploadCommonLog_result__isset() : success(false) {}
  bool success;
} _AggregatorService_uploadCommonLog_result__isset;

class AggregatorService_uploadCommonLog_result {
 public:

  AggregatorService_uploadCommonLog_result() : success(0) {
  }

  virtual ~AggregatorService_uploadCommonLog_result() throw() {}

  int32_t success;

  _AggregatorService_uploadCommonLog_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const AggregatorService_uploadCommonLog_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AggregatorService_uploadCommonLog_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AggregatorService_uploadCommonLog_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AggregatorService_uploadCommonLog_presult__isset {
  _AggregatorService_uploadCommonLog_presult__isset() : success(false) {}
  bool success;
} _AggregatorService_uploadCommonLog_presult__isset;

class AggregatorService_uploadCommonLog_presult {
 public:


  virtual ~AggregatorService_uploadCommonLog_presult() throw() {}

  int32_t* success;

  _AggregatorService_uploadCommonLog_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AggregatorServiceClient : virtual public AggregatorServiceIf {
 public:
  AggregatorServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  AggregatorServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t uploadLog(const SGLog& log);
  void send_uploadLog(const SGLog& log);
  int32_t recv_uploadLog();
  int32_t uploadModuleInvoke(const SGModuleInvokeInfo& log);
  void send_uploadModuleInvoke(const SGModuleInvokeInfo& log);
  int32_t recv_uploadModuleInvoke();
  int32_t uploadCommonLog(const CommonLog& log);
  void send_uploadCommonLog(const CommonLog& log);
  int32_t recv_uploadCommonLog();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AggregatorServiceProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<AggregatorServiceIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (AggregatorServiceProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_uploadLog(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_uploadModuleInvoke(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_uploadCommonLog(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AggregatorServiceProcessor(boost::shared_ptr<AggregatorServiceIf> iface) :
    iface_(iface) {
    processMap_["uploadLog"] = &AggregatorServiceProcessor::process_uploadLog;
    processMap_["uploadModuleInvoke"] = &AggregatorServiceProcessor::process_uploadModuleInvoke;
    processMap_["uploadCommonLog"] = &AggregatorServiceProcessor::process_uploadCommonLog;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~AggregatorServiceProcessor() {}
};

class AggregatorServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AggregatorServiceProcessorFactory(const ::boost::shared_ptr< AggregatorServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< AggregatorServiceIfFactory > handlerFactory_;
};

class AggregatorServiceMultiface : virtual public AggregatorServiceIf {
 public:
  AggregatorServiceMultiface(std::vector<boost::shared_ptr<AggregatorServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AggregatorServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AggregatorServiceIf> > ifaces_;
  AggregatorServiceMultiface() {}
  void add(boost::shared_ptr<AggregatorServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t uploadLog(const SGLog& log) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->uploadLog(log);
      } else {
        ifaces_[i]->uploadLog(log);
      }
    }
  }

  int32_t uploadModuleInvoke(const SGModuleInvokeInfo& log) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->uploadModuleInvoke(log);
      } else {
        ifaces_[i]->uploadModuleInvoke(log);
      }
    }
  }

  int32_t uploadCommonLog(const CommonLog& log) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->uploadCommonLog(log);
      } else {
        ifaces_[i]->uploadCommonLog(log);
      }
    }
  }

};



#endif
