/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef mnsc_data_TYPES_H
#define mnsc_data_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>

#include "sgagent_common_types.h"




struct Protocols {
  enum type {
    THRIFT = 0,
    HTTP = 1
  };
};

extern const std::map<int, const char*> _Protocols_VALUES_TO_NAMES;

typedef class  ::SGService SGService;

typedef std::map<std::string, std::string>  HttpProperties;

typedef struct _MNSResponse__isset {
  _MNSResponse__isset() : defaultMNSCache(false), version(false) {}
  bool defaultMNSCache;
  bool version;
} _MNSResponse__isset;

class MNSResponse {
 public:

  static const char* ascii_fingerprint; // = "0CDB7B27E1847CFA6E7D02796FA5A2DB";
  static const uint8_t binary_fingerprint[16]; // = {0x0C,0xDB,0x7B,0x27,0xE1,0x84,0x7C,0xFA,0x6E,0x7D,0x02,0x79,0x6F,0xA5,0xA2,0xDB};

  MNSResponse() : code(200), version("") {
  }

  virtual ~MNSResponse() throw() {}

  int32_t code;
  std::vector<SGService>  defaultMNSCache;
  std::string version;

  _MNSResponse__isset __isset;

  void __set_code(const int32_t val) {
    code = val;
  }

  void __set_defaultMNSCache(const std::vector<SGService> & val) {
    defaultMNSCache = val;
    __isset.defaultMNSCache = true;
  }

  void __set_version(const std::string& val) {
    version = val;
    __isset.version = true;
  }

  bool operator == (const MNSResponse & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (__isset.defaultMNSCache != rhs.__isset.defaultMNSCache)
      return false;
    else if (__isset.defaultMNSCache && !(defaultMNSCache == rhs.defaultMNSCache))
      return false;
    if (__isset.version != rhs.__isset.version)
      return false;
    else if (__isset.version && !(version == rhs.version))
      return false;
    return true;
  }
  bool operator != (const MNSResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MNSBatchResponse__isset {
  _MNSBatchResponse__isset() : cache(false) {}
  bool cache;
} _MNSBatchResponse__isset;

class MNSBatchResponse {
 public:

  static const char* ascii_fingerprint; // = "5CB5217E8D2AF6CB8C5C579D709D1AA6";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0xB5,0x21,0x7E,0x8D,0x2A,0xF6,0xCB,0x8C,0x5C,0x57,0x9D,0x70,0x9D,0x1A,0xA6};

  MNSBatchResponse() : code(200) {
  }

  virtual ~MNSBatchResponse() throw() {}

  int32_t code;
  std::map<std::string, std::map<std::string, std::vector<SGService> > >  cache;

  _MNSBatchResponse__isset __isset;

  void __set_code(const int32_t val) {
    code = val;
  }

  void __set_cache(const std::map<std::string, std::map<std::string, std::vector<SGService> > > & val) {
    cache = val;
    __isset.cache = true;
  }

  bool operator == (const MNSBatchResponse & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (__isset.cache != rhs.__isset.cache)
      return false;
    else if (__isset.cache && !(cache == rhs.cache))
      return false;
    return true;
  }
  bool operator != (const MNSBatchResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNSBatchResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AppKeyListResponse__isset {
  _AppKeyListResponse__isset() : appKeyList(false) {}
  bool appKeyList;
} _AppKeyListResponse__isset;

class AppKeyListResponse {
 public:

  static const char* ascii_fingerprint; // = "93CC3D1E71866966C22792AABF4C3815";
  static const uint8_t binary_fingerprint[16]; // = {0x93,0xCC,0x3D,0x1E,0x71,0x86,0x69,0x66,0xC2,0x27,0x92,0xAA,0xBF,0x4C,0x38,0x15};

  AppKeyListResponse() : code(200) {
  }

  virtual ~AppKeyListResponse() throw() {}

  int32_t code;
  std::vector<std::string>  appKeyList;

  _AppKeyListResponse__isset __isset;

  void __set_code(const int32_t val) {
    code = val;
  }

  void __set_appKeyList(const std::vector<std::string> & val) {
    appKeyList = val;
    __isset.appKeyList = true;
  }

  bool operator == (const AppKeyListResponse & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (__isset.appKeyList != rhs.__isset.appKeyList)
      return false;
    else if (__isset.appKeyList && !(appKeyList == rhs.appKeyList))
      return false;
    return true;
  }
  bool operator != (const AppKeyListResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AppKeyListResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HttpPropertiesResponse__isset {
  _HttpPropertiesResponse__isset() : propertiesMap(false) {}
  bool propertiesMap;
} _HttpPropertiesResponse__isset;

class HttpPropertiesResponse {
 public:

  static const char* ascii_fingerprint; // = "ED513D89046EBA5323735F654E017436";
  static const uint8_t binary_fingerprint[16]; // = {0xED,0x51,0x3D,0x89,0x04,0x6E,0xBA,0x53,0x23,0x73,0x5F,0x65,0x4E,0x01,0x74,0x36};

  HttpPropertiesResponse() : code(200) {
  }

  virtual ~HttpPropertiesResponse() throw() {}

  int32_t code;
  std::map<std::string, HttpProperties>  propertiesMap;

  _HttpPropertiesResponse__isset __isset;

  void __set_code(const int32_t val) {
    code = val;
  }

  void __set_propertiesMap(const std::map<std::string, HttpProperties> & val) {
    propertiesMap = val;
    __isset.propertiesMap = true;
  }

  bool operator == (const HttpPropertiesResponse & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (__isset.propertiesMap != rhs.__isset.propertiesMap)
      return false;
    else if (__isset.propertiesMap && !(propertiesMap == rhs.propertiesMap))
      return false;
    return true;
  }
  bool operator != (const HttpPropertiesResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HttpPropertiesResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _groupNode__isset {
  _groupNode__isset() : ip(false), port(false) {}
  bool ip;
  bool port;
} _groupNode__isset;

class groupNode {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  groupNode() : ip(""), port(0) {
  }

  virtual ~groupNode() throw() {}

  std::string ip;
  int32_t port;

  _groupNode__isset __isset;

  void __set_ip(const std::string& val) {
    ip = val;
  }

  void __set_port(const int32_t val) {
    port = val;
  }

  bool operator == (const groupNode & rhs) const
  {
    if (!(ip == rhs.ip))
      return false;
    if (!(port == rhs.port))
      return false;
    return true;
  }
  bool operator != (const groupNode &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const groupNode & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HttpGroup__isset {
  _HttpGroup__isset() : groupName(false), appkey(false), server(false) {}
  bool groupName;
  bool appkey;
  bool server;
} _HttpGroup__isset;

class HttpGroup {
 public:

  static const char* ascii_fingerprint; // = "9171212561229E2F5D704BD0F969D5C3";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x71,0x21,0x25,0x61,0x22,0x9E,0x2F,0x5D,0x70,0x4B,0xD0,0xF9,0x69,0xD5,0xC3};

  HttpGroup() : groupName(""), appkey("") {
  }

  virtual ~HttpGroup() throw() {}

  std::string groupName;
  std::string appkey;
  std::vector<groupNode>  server;

  _HttpGroup__isset __isset;

  void __set_groupName(const std::string& val) {
    groupName = val;
  }

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_server(const std::vector<groupNode> & val) {
    server = val;
  }

  bool operator == (const HttpGroup & rhs) const
  {
    if (!(groupName == rhs.groupName))
      return false;
    if (!(appkey == rhs.appkey))
      return false;
    if (!(server == rhs.server))
      return false;
    return true;
  }
  bool operator != (const HttpGroup &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HttpGroup & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HttpGroupResponse__isset {
  _HttpGroupResponse__isset() : groups(false) {}
  bool groups;
} _HttpGroupResponse__isset;

class HttpGroupResponse {
 public:

  static const char* ascii_fingerprint; // = "0CB028ADABF804D8686CAE3020DF1C1B";
  static const uint8_t binary_fingerprint[16]; // = {0x0C,0xB0,0x28,0xAD,0xAB,0xF8,0x04,0xD8,0x68,0x6C,0xAE,0x30,0x20,0xDF,0x1C,0x1B};

  HttpGroupResponse() : code(200) {
  }

  virtual ~HttpGroupResponse() throw() {}

  int32_t code;
  std::map<std::string, HttpGroup>  groups;

  _HttpGroupResponse__isset __isset;

  void __set_code(const int32_t val) {
    code = val;
  }

  void __set_groups(const std::map<std::string, HttpGroup> & val) {
    groups = val;
  }

  bool operator == (const HttpGroupResponse & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(groups == rhs.groups))
      return false;
    return true;
  }
  bool operator != (const HttpGroupResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HttpGroupResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AllHttpGroupsResponse__isset {
  _AllHttpGroupsResponse__isset() : allGroups(false) {}
  bool allGroups;
} _AllHttpGroupsResponse__isset;

class AllHttpGroupsResponse {
 public:

  static const char* ascii_fingerprint; // = "04212F4983C0C853711C659E324FC0FA";
  static const uint8_t binary_fingerprint[16]; // = {0x04,0x21,0x2F,0x49,0x83,0xC0,0xC8,0x53,0x71,0x1C,0x65,0x9E,0x32,0x4F,0xC0,0xFA};

  AllHttpGroupsResponse() : code(200) {
  }

  virtual ~AllHttpGroupsResponse() throw() {}

  int32_t code;
  std::map<std::string, std::map<std::string, HttpGroup> >  allGroups;

  _AllHttpGroupsResponse__isset __isset;

  void __set_code(const int32_t val) {
    code = val;
  }

  void __set_allGroups(const std::map<std::string, std::map<std::string, HttpGroup> > & val) {
    allGroups = val;
  }

  bool operator == (const AllHttpGroupsResponse & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(allGroups == rhs.allGroups))
      return false;
    return true;
  }
  bool operator != (const AllHttpGroupsResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AllHttpGroupsResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MnsRequest__isset {
  _MnsRequest__isset() : protoctol(false), appkey(false), env(false) {}
  bool protoctol;
  bool appkey;
  bool env;
} _MnsRequest__isset;

class MnsRequest {
 public:

  static const char* ascii_fingerprint; // = "38C252E94E93B69D04EB3A6EE2F9EDFB";
  static const uint8_t binary_fingerprint[16]; // = {0x38,0xC2,0x52,0xE9,0x4E,0x93,0xB6,0x9D,0x04,0xEB,0x3A,0x6E,0xE2,0xF9,0xED,0xFB};

  MnsRequest() : protoctol((Protocols::type)0), appkey(""), env("") {
  }

  virtual ~MnsRequest() throw() {}

  Protocols::type protoctol;
  std::string appkey;
  std::string env;

  _MnsRequest__isset __isset;

  void __set_protoctol(const Protocols::type val) {
    protoctol = val;
  }

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_env(const std::string& val) {
    env = val;
  }

  bool operator == (const MnsRequest & rhs) const
  {
    if (!(protoctol == rhs.protoctol))
      return false;
    if (!(appkey == rhs.appkey))
      return false;
    if (!(env == rhs.env))
      return false;
    return true;
  }
  bool operator != (const MnsRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MnsRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RegisterResponse__isset {
  _RegisterResponse__isset() : code(false), allowRegister(false), msg(false) {}
  bool code;
  bool allowRegister;
  bool msg;
} _RegisterResponse__isset;

class RegisterResponse {
 public:

  static const char* ascii_fingerprint; // = "ABFA111458F19F7512E333E6D746DEE8";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0xFA,0x11,0x14,0x58,0xF1,0x9F,0x75,0x12,0xE3,0x33,0xE6,0xD7,0x46,0xDE,0xE8};

  RegisterResponse() : code(0), allowRegister(0), msg("") {
  }

  virtual ~RegisterResponse() throw() {}

  int32_t code;
  bool allowRegister;
  std::string msg;

  _RegisterResponse__isset __isset;

  void __set_code(const int32_t val) {
    code = val;
  }

  void __set_allowRegister(const bool val) {
    allowRegister = val;
    __isset.allowRegister = true;
  }

  void __set_msg(const std::string& val) {
    msg = val;
    __isset.msg = true;
  }

  bool operator == (const RegisterResponse & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (__isset.allowRegister != rhs.__isset.allowRegister)
      return false;
    else if (__isset.allowRegister && !(allowRegister == rhs.allowRegister))
      return false;
    if (__isset.msg != rhs.__isset.msg)
      return false;
    else if (__isset.msg && !(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const RegisterResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RegisterResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
