/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SGAgent_H
#define SGAgent_H

#include <TProcessor.h>
#include "sgagent_service_types.h"



class SGAgentIf {
 public:
  virtual ~SGAgentIf() {}
  virtual void getAppkeyDesc(AppkeyDescResponse& _return, const std::string& appkey) = 0;
  virtual void getServiceListByProtocol(ProtocolResponse& _return, const ProtocolRequest& req) = 0;
  virtual void getOriginServiceList(ProtocolResponse& _return, const ProtocolRequest& req) = 0;
  virtual void getServiceListWithZKFweight(ProtocolResponse& _return, const ProtocolRequest& req) = 0;
  virtual void getServiceList(std::vector<SGService> & _return, const std::string& localAppkey, const std::string& remoteAppkey) = 0;
  virtual void getHttpServiceList(std::vector<SGService> & _return, const std::string& localAppkey, const std::string& remoteAppkey) = 0;
  virtual void getAppKeyListByBusinessLine(std::vector<std::string> & _return, const int32_t businessLineCode) = 0;
  virtual void getService(SGService& _return, const std::string& localAppkey, const std::string& remoteAppkey, const int32_t strategy) = 0;
  virtual int32_t registService(const SGService& oService) = 0;
  virtual int32_t registServicewithCmd(const int32_t uptCmd, const SGService& oService) = 0;
  virtual int32_t unRegistService(const SGService& oService) = 0;
  virtual int32_t updateConfig(const ConfigUpdateRequest& request) = 0;
  virtual void getConfig(std::string& _return, const proc_conf_param_t& node) = 0;
  virtual int32_t setConfig(const proc_conf_param_t& conf) = 0;
  virtual void getFileConfig(file_param_t& _return, const file_param_t& file) = 0;
  virtual int32_t notifyFileConfigIssued(const file_param_t& files) = 0;
  virtual int32_t notifyFileConfigWork(const file_param_t& files) = 0;
  virtual void getLocalConfig(std::string& _return, const std::string& localAppkey, const std::string& ip) = 0;
  virtual int32_t uploadLog(const SGLog& oLog) = 0;
  virtual int32_t uploadCommonLog(const CommonLog& oCommonLog) = 0;
  virtual int32_t uploadModuleInvoke(const SGModuleInvokeInfo& oInfo) = 0;
  virtual void getDegradeActions(std::vector<DegradeAction> & _return, const std::string& localAppkey, const std::string& remoteAppkey) = 0;
  virtual void getZabbixInfo(ZabbixSelfCheck& _return) = 0;
  virtual void getAuthorizedConsumers(std::string& _return, const std::string& targetAppkey) = 0;
  virtual void getAuthorizedProviders(std::string& _return, const std::string& targetAppkey) = 0;
  virtual void getHttpPropertiesByBusinessLine(std::map<std::string, HttpProperties> & _return, const int32_t bizCode) = 0;
  virtual void getHttpPropertiesByAppkey(std::map<std::string, HttpProperties> & _return, const std::string& appkey) = 0;
  virtual bool switchEnv(const std::string& env, const std::string& verifyCode) = 0;
  virtual void getName(std::string& _return) = 0;
  virtual void getVersion(std::string& _return) = 0;
  virtual int32_t getEnv() = 0;
  virtual sg_fb_status getStatus() = 0;
  virtual void getStatusDetails(std::string& _return) = 0;
  virtual void getCounters(std::map<std::string, int64_t> & _return) = 0;
  virtual int64_t getCounter(const std::string& key) = 0;
  virtual void setOption(const std::string& key, const std::string& value) = 0;
  virtual void getOption(std::string& _return, const std::string& key) = 0;
  virtual void getOptions(std::map<std::string, std::string> & _return) = 0;
  virtual void getCpuProfile(std::string& _return, const int32_t profileDurationInSec) = 0;
  virtual int64_t aliveSince() = 0;
  virtual void reinitialize() = 0;
  virtual void setRemoteSwitch(SwitchResponse& _return, const SwitchRequest& req) = 0;
  virtual bool shutdown(const std::string& verifyCode) = 0;
};

class SGAgentIfFactory {
 public:
  typedef SGAgentIf Handler;

  virtual ~SGAgentIfFactory() {}

  virtual SGAgentIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SGAgentIf* /* handler */) = 0;
};

class SGAgentIfSingletonFactory : virtual public SGAgentIfFactory {
 public:
  SGAgentIfSingletonFactory(const boost::shared_ptr<SGAgentIf>& iface) : iface_(iface) {}
  virtual ~SGAgentIfSingletonFactory() {}

  virtual SGAgentIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SGAgentIf* /* handler */) {}

 protected:
  boost::shared_ptr<SGAgentIf> iface_;
};

class SGAgentNull : virtual public SGAgentIf {
 public:
  virtual ~SGAgentNull() {}
  void getAppkeyDesc(AppkeyDescResponse& /* _return */, const std::string& /* appkey */) {
    return;
  }
  void getServiceListByProtocol(ProtocolResponse& /* _return */, const ProtocolRequest& /* req */) {
    return;
  }
  void getOriginServiceList(ProtocolResponse& /* _return */, const ProtocolRequest& /* req */) {
    return;
  }
  void getServiceListWithZKFweight(ProtocolResponse& /* _return */, const ProtocolRequest& /* req */) {
    return;
  }
  void getServiceList(std::vector<SGService> & /* _return */, const std::string& /* localAppkey */, const std::string& /* remoteAppkey */) {
    return;
  }
  void getHttpServiceList(std::vector<SGService> & /* _return */, const std::string& /* localAppkey */, const std::string& /* remoteAppkey */) {
    return;
  }
  void getAppKeyListByBusinessLine(std::vector<std::string> & /* _return */, const int32_t /* businessLineCode */) {
    return;
  }
  void getService(SGService& /* _return */, const std::string& /* localAppkey */, const std::string& /* remoteAppkey */, const int32_t /* strategy */) {
    return;
  }
  int32_t registService(const SGService& /* oService */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t registServicewithCmd(const int32_t /* uptCmd */, const SGService& /* oService */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t unRegistService(const SGService& /* oService */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t updateConfig(const ConfigUpdateRequest& /* request */) {
    int32_t _return = 0;
    return _return;
  }
  void getConfig(std::string& /* _return */, const proc_conf_param_t& /* node */) {
    return;
  }
  int32_t setConfig(const proc_conf_param_t& /* conf */) {
    int32_t _return = 0;
    return _return;
  }
  void getFileConfig(file_param_t& /* _return */, const file_param_t& /* file */) {
    return;
  }
  int32_t notifyFileConfigIssued(const file_param_t& /* files */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t notifyFileConfigWork(const file_param_t& /* files */) {
    int32_t _return = 0;
    return _return;
  }
  void getLocalConfig(std::string& /* _return */, const std::string& /* localAppkey */, const std::string& /* ip */) {
    return;
  }
  int32_t uploadLog(const SGLog& /* oLog */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t uploadCommonLog(const CommonLog& /* oCommonLog */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t uploadModuleInvoke(const SGModuleInvokeInfo& /* oInfo */) {
    int32_t _return = 0;
    return _return;
  }
  void getDegradeActions(std::vector<DegradeAction> & /* _return */, const std::string& /* localAppkey */, const std::string& /* remoteAppkey */) {
    return;
  }
  void getZabbixInfo(ZabbixSelfCheck& /* _return */) {
    return;
  }
  void getAuthorizedConsumers(std::string& /* _return */, const std::string& /* targetAppkey */) {
    return;
  }
  void getAuthorizedProviders(std::string& /* _return */, const std::string& /* targetAppkey */) {
    return;
  }
  void getHttpPropertiesByBusinessLine(std::map<std::string, HttpProperties> & /* _return */, const int32_t /* bizCode */) {
    return;
  }
  void getHttpPropertiesByAppkey(std::map<std::string, HttpProperties> & /* _return */, const std::string& /* appkey */) {
    return;
  }
  bool switchEnv(const std::string& /* env */, const std::string& /* verifyCode */) {
    bool _return = false;
    return _return;
  }
  void getName(std::string& /* _return */) {
    return;
  }
  void getVersion(std::string& /* _return */) {
    return;
  }
  int32_t getEnv() {
    int32_t _return = 0;
    return _return;
  }
  sg_fb_status getStatus() {
    sg_fb_status _return = ( ::fb_status::type)0;
    return _return;
  }
  void getStatusDetails(std::string& /* _return */) {
    return;
  }
  void getCounters(std::map<std::string, int64_t> & /* _return */) {
    return;
  }
  int64_t getCounter(const std::string& /* key */) {
    int64_t _return = 0;
    return _return;
  }
  void setOption(const std::string& /* key */, const std::string& /* value */) {
    return;
  }
  void getOption(std::string& /* _return */, const std::string& /* key */) {
    return;
  }
  void getOptions(std::map<std::string, std::string> & /* _return */) {
    return;
  }
  void getCpuProfile(std::string& /* _return */, const int32_t /* profileDurationInSec */) {
    return;
  }
  int64_t aliveSince() {
    int64_t _return = 0;
    return _return;
  }
  void reinitialize() {
    return;
  }
  void setRemoteSwitch(SwitchResponse& /* _return */, const SwitchRequest& /* req */) {
    return;
  }
  bool shutdown(const std::string& /* verifyCode */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _SGAgent_getAppkeyDesc_args__isset {
  _SGAgent_getAppkeyDesc_args__isset() : appkey(false) {}
  bool appkey;
} _SGAgent_getAppkeyDesc_args__isset;

class SGAgent_getAppkeyDesc_args {
 public:

  SGAgent_getAppkeyDesc_args() : appkey("") {
  }

  virtual ~SGAgent_getAppkeyDesc_args() throw() {}

  std::string appkey;

  _SGAgent_getAppkeyDesc_args__isset __isset;

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  bool operator == (const SGAgent_getAppkeyDesc_args & rhs) const
  {
    if (!(appkey == rhs.appkey))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getAppkeyDesc_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getAppkeyDesc_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_getAppkeyDesc_pargs {
 public:


  virtual ~SGAgent_getAppkeyDesc_pargs() throw() {}

  const std::string* appkey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getAppkeyDesc_result__isset {
  _SGAgent_getAppkeyDesc_result__isset() : success(false) {}
  bool success;
} _SGAgent_getAppkeyDesc_result__isset;

class SGAgent_getAppkeyDesc_result {
 public:

  SGAgent_getAppkeyDesc_result() {
  }

  virtual ~SGAgent_getAppkeyDesc_result() throw() {}

  AppkeyDescResponse success;

  _SGAgent_getAppkeyDesc_result__isset __isset;

  void __set_success(const AppkeyDescResponse& val) {
    success = val;
  }

  bool operator == (const SGAgent_getAppkeyDesc_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getAppkeyDesc_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getAppkeyDesc_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getAppkeyDesc_presult__isset {
  _SGAgent_getAppkeyDesc_presult__isset() : success(false) {}
  bool success;
} _SGAgent_getAppkeyDesc_presult__isset;

class SGAgent_getAppkeyDesc_presult {
 public:


  virtual ~SGAgent_getAppkeyDesc_presult() throw() {}

  AppkeyDescResponse* success;

  _SGAgent_getAppkeyDesc_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgent_getServiceListByProtocol_args__isset {
  _SGAgent_getServiceListByProtocol_args__isset() : req(false) {}
  bool req;
} _SGAgent_getServiceListByProtocol_args__isset;

class SGAgent_getServiceListByProtocol_args {
 public:

  SGAgent_getServiceListByProtocol_args() {
  }

  virtual ~SGAgent_getServiceListByProtocol_args() throw() {}

  ProtocolRequest req;

  _SGAgent_getServiceListByProtocol_args__isset __isset;

  void __set_req(const ProtocolRequest& val) {
    req = val;
  }

  bool operator == (const SGAgent_getServiceListByProtocol_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getServiceListByProtocol_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getServiceListByProtocol_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_getServiceListByProtocol_pargs {
 public:


  virtual ~SGAgent_getServiceListByProtocol_pargs() throw() {}

  const ProtocolRequest* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getServiceListByProtocol_result__isset {
  _SGAgent_getServiceListByProtocol_result__isset() : success(false) {}
  bool success;
} _SGAgent_getServiceListByProtocol_result__isset;

class SGAgent_getServiceListByProtocol_result {
 public:

  SGAgent_getServiceListByProtocol_result() {
  }

  virtual ~SGAgent_getServiceListByProtocol_result() throw() {}

  ProtocolResponse success;

  _SGAgent_getServiceListByProtocol_result__isset __isset;

  void __set_success(const ProtocolResponse& val) {
    success = val;
  }

  bool operator == (const SGAgent_getServiceListByProtocol_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getServiceListByProtocol_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getServiceListByProtocol_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getServiceListByProtocol_presult__isset {
  _SGAgent_getServiceListByProtocol_presult__isset() : success(false) {}
  bool success;
} _SGAgent_getServiceListByProtocol_presult__isset;

class SGAgent_getServiceListByProtocol_presult {
 public:


  virtual ~SGAgent_getServiceListByProtocol_presult() throw() {}

  ProtocolResponse* success;

  _SGAgent_getServiceListByProtocol_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgent_getOriginServiceList_args__isset {
  _SGAgent_getOriginServiceList_args__isset() : req(false) {}
  bool req;
} _SGAgent_getOriginServiceList_args__isset;

class SGAgent_getOriginServiceList_args {
 public:

  SGAgent_getOriginServiceList_args() {
  }

  virtual ~SGAgent_getOriginServiceList_args() throw() {}

  ProtocolRequest req;

  _SGAgent_getOriginServiceList_args__isset __isset;

  void __set_req(const ProtocolRequest& val) {
    req = val;
  }

  bool operator == (const SGAgent_getOriginServiceList_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getOriginServiceList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getOriginServiceList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_getOriginServiceList_pargs {
 public:


  virtual ~SGAgent_getOriginServiceList_pargs() throw() {}

  const ProtocolRequest* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getOriginServiceList_result__isset {
  _SGAgent_getOriginServiceList_result__isset() : success(false) {}
  bool success;
} _SGAgent_getOriginServiceList_result__isset;

class SGAgent_getOriginServiceList_result {
 public:

  SGAgent_getOriginServiceList_result() {
  }

  virtual ~SGAgent_getOriginServiceList_result() throw() {}

  ProtocolResponse success;

  _SGAgent_getOriginServiceList_result__isset __isset;

  void __set_success(const ProtocolResponse& val) {
    success = val;
  }

  bool operator == (const SGAgent_getOriginServiceList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getOriginServiceList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getOriginServiceList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getOriginServiceList_presult__isset {
  _SGAgent_getOriginServiceList_presult__isset() : success(false) {}
  bool success;
} _SGAgent_getOriginServiceList_presult__isset;

class SGAgent_getOriginServiceList_presult {
 public:


  virtual ~SGAgent_getOriginServiceList_presult() throw() {}

  ProtocolResponse* success;

  _SGAgent_getOriginServiceList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgent_getServiceListWithZKFweight_args__isset {
  _SGAgent_getServiceListWithZKFweight_args__isset() : req(false) {}
  bool req;
} _SGAgent_getServiceListWithZKFweight_args__isset;

class SGAgent_getServiceListWithZKFweight_args {
 public:

  SGAgent_getServiceListWithZKFweight_args() {
  }

  virtual ~SGAgent_getServiceListWithZKFweight_args() throw() {}

  ProtocolRequest req;

  _SGAgent_getServiceListWithZKFweight_args__isset __isset;

  void __set_req(const ProtocolRequest& val) {
    req = val;
  }

  bool operator == (const SGAgent_getServiceListWithZKFweight_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getServiceListWithZKFweight_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getServiceListWithZKFweight_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_getServiceListWithZKFweight_pargs {
 public:


  virtual ~SGAgent_getServiceListWithZKFweight_pargs() throw() {}

  const ProtocolRequest* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getServiceListWithZKFweight_result__isset {
  _SGAgent_getServiceListWithZKFweight_result__isset() : success(false) {}
  bool success;
} _SGAgent_getServiceListWithZKFweight_result__isset;

class SGAgent_getServiceListWithZKFweight_result {
 public:

  SGAgent_getServiceListWithZKFweight_result() {
  }

  virtual ~SGAgent_getServiceListWithZKFweight_result() throw() {}

  ProtocolResponse success;

  _SGAgent_getServiceListWithZKFweight_result__isset __isset;

  void __set_success(const ProtocolResponse& val) {
    success = val;
  }

  bool operator == (const SGAgent_getServiceListWithZKFweight_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getServiceListWithZKFweight_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getServiceListWithZKFweight_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getServiceListWithZKFweight_presult__isset {
  _SGAgent_getServiceListWithZKFweight_presult__isset() : success(false) {}
  bool success;
} _SGAgent_getServiceListWithZKFweight_presult__isset;

class SGAgent_getServiceListWithZKFweight_presult {
 public:


  virtual ~SGAgent_getServiceListWithZKFweight_presult() throw() {}

  ProtocolResponse* success;

  _SGAgent_getServiceListWithZKFweight_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgent_getServiceList_args__isset {
  _SGAgent_getServiceList_args__isset() : localAppkey(false), remoteAppkey(false) {}
  bool localAppkey;
  bool remoteAppkey;
} _SGAgent_getServiceList_args__isset;

class SGAgent_getServiceList_args {
 public:

  SGAgent_getServiceList_args() : localAppkey(""), remoteAppkey("") {
  }

  virtual ~SGAgent_getServiceList_args() throw() {}

  std::string localAppkey;
  std::string remoteAppkey;

  _SGAgent_getServiceList_args__isset __isset;

  void __set_localAppkey(const std::string& val) {
    localAppkey = val;
  }

  void __set_remoteAppkey(const std::string& val) {
    remoteAppkey = val;
  }

  bool operator == (const SGAgent_getServiceList_args & rhs) const
  {
    if (!(localAppkey == rhs.localAppkey))
      return false;
    if (!(remoteAppkey == rhs.remoteAppkey))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getServiceList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getServiceList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_getServiceList_pargs {
 public:


  virtual ~SGAgent_getServiceList_pargs() throw() {}

  const std::string* localAppkey;
  const std::string* remoteAppkey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getServiceList_result__isset {
  _SGAgent_getServiceList_result__isset() : success(false) {}
  bool success;
} _SGAgent_getServiceList_result__isset;

class SGAgent_getServiceList_result {
 public:

  SGAgent_getServiceList_result() {
  }

  virtual ~SGAgent_getServiceList_result() throw() {}

  std::vector<SGService>  success;

  _SGAgent_getServiceList_result__isset __isset;

  void __set_success(const std::vector<SGService> & val) {
    success = val;
  }

  bool operator == (const SGAgent_getServiceList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getServiceList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getServiceList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getServiceList_presult__isset {
  _SGAgent_getServiceList_presult__isset() : success(false) {}
  bool success;
} _SGAgent_getServiceList_presult__isset;

class SGAgent_getServiceList_presult {
 public:


  virtual ~SGAgent_getServiceList_presult() throw() {}

  std::vector<SGService> * success;

  _SGAgent_getServiceList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgent_getHttpServiceList_args__isset {
  _SGAgent_getHttpServiceList_args__isset() : localAppkey(false), remoteAppkey(false) {}
  bool localAppkey;
  bool remoteAppkey;
} _SGAgent_getHttpServiceList_args__isset;

class SGAgent_getHttpServiceList_args {
 public:

  SGAgent_getHttpServiceList_args() : localAppkey(""), remoteAppkey("") {
  }

  virtual ~SGAgent_getHttpServiceList_args() throw() {}

  std::string localAppkey;
  std::string remoteAppkey;

  _SGAgent_getHttpServiceList_args__isset __isset;

  void __set_localAppkey(const std::string& val) {
    localAppkey = val;
  }

  void __set_remoteAppkey(const std::string& val) {
    remoteAppkey = val;
  }

  bool operator == (const SGAgent_getHttpServiceList_args & rhs) const
  {
    if (!(localAppkey == rhs.localAppkey))
      return false;
    if (!(remoteAppkey == rhs.remoteAppkey))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getHttpServiceList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getHttpServiceList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_getHttpServiceList_pargs {
 public:


  virtual ~SGAgent_getHttpServiceList_pargs() throw() {}

  const std::string* localAppkey;
  const std::string* remoteAppkey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getHttpServiceList_result__isset {
  _SGAgent_getHttpServiceList_result__isset() : success(false) {}
  bool success;
} _SGAgent_getHttpServiceList_result__isset;

class SGAgent_getHttpServiceList_result {
 public:

  SGAgent_getHttpServiceList_result() {
  }

  virtual ~SGAgent_getHttpServiceList_result() throw() {}

  std::vector<SGService>  success;

  _SGAgent_getHttpServiceList_result__isset __isset;

  void __set_success(const std::vector<SGService> & val) {
    success = val;
  }

  bool operator == (const SGAgent_getHttpServiceList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getHttpServiceList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getHttpServiceList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getHttpServiceList_presult__isset {
  _SGAgent_getHttpServiceList_presult__isset() : success(false) {}
  bool success;
} _SGAgent_getHttpServiceList_presult__isset;

class SGAgent_getHttpServiceList_presult {
 public:


  virtual ~SGAgent_getHttpServiceList_presult() throw() {}

  std::vector<SGService> * success;

  _SGAgent_getHttpServiceList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgent_getAppKeyListByBusinessLine_args__isset {
  _SGAgent_getAppKeyListByBusinessLine_args__isset() : businessLineCode(false) {}
  bool businessLineCode;
} _SGAgent_getAppKeyListByBusinessLine_args__isset;

class SGAgent_getAppKeyListByBusinessLine_args {
 public:

  SGAgent_getAppKeyListByBusinessLine_args() : businessLineCode(0) {
  }

  virtual ~SGAgent_getAppKeyListByBusinessLine_args() throw() {}

  int32_t businessLineCode;

  _SGAgent_getAppKeyListByBusinessLine_args__isset __isset;

  void __set_businessLineCode(const int32_t val) {
    businessLineCode = val;
  }

  bool operator == (const SGAgent_getAppKeyListByBusinessLine_args & rhs) const
  {
    if (!(businessLineCode == rhs.businessLineCode))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getAppKeyListByBusinessLine_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getAppKeyListByBusinessLine_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_getAppKeyListByBusinessLine_pargs {
 public:


  virtual ~SGAgent_getAppKeyListByBusinessLine_pargs() throw() {}

  const int32_t* businessLineCode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getAppKeyListByBusinessLine_result__isset {
  _SGAgent_getAppKeyListByBusinessLine_result__isset() : success(false) {}
  bool success;
} _SGAgent_getAppKeyListByBusinessLine_result__isset;

class SGAgent_getAppKeyListByBusinessLine_result {
 public:

  SGAgent_getAppKeyListByBusinessLine_result() {
  }

  virtual ~SGAgent_getAppKeyListByBusinessLine_result() throw() {}

  std::vector<std::string>  success;

  _SGAgent_getAppKeyListByBusinessLine_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const SGAgent_getAppKeyListByBusinessLine_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getAppKeyListByBusinessLine_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getAppKeyListByBusinessLine_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getAppKeyListByBusinessLine_presult__isset {
  _SGAgent_getAppKeyListByBusinessLine_presult__isset() : success(false) {}
  bool success;
} _SGAgent_getAppKeyListByBusinessLine_presult__isset;

class SGAgent_getAppKeyListByBusinessLine_presult {
 public:


  virtual ~SGAgent_getAppKeyListByBusinessLine_presult() throw() {}

  std::vector<std::string> * success;

  _SGAgent_getAppKeyListByBusinessLine_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgent_getService_args__isset {
  _SGAgent_getService_args__isset() : localAppkey(false), remoteAppkey(false), strategy(false) {}
  bool localAppkey;
  bool remoteAppkey;
  bool strategy;
} _SGAgent_getService_args__isset;

class SGAgent_getService_args {
 public:

  SGAgent_getService_args() : localAppkey(""), remoteAppkey(""), strategy(0) {
  }

  virtual ~SGAgent_getService_args() throw() {}

  std::string localAppkey;
  std::string remoteAppkey;
  int32_t strategy;

  _SGAgent_getService_args__isset __isset;

  void __set_localAppkey(const std::string& val) {
    localAppkey = val;
  }

  void __set_remoteAppkey(const std::string& val) {
    remoteAppkey = val;
  }

  void __set_strategy(const int32_t val) {
    strategy = val;
  }

  bool operator == (const SGAgent_getService_args & rhs) const
  {
    if (!(localAppkey == rhs.localAppkey))
      return false;
    if (!(remoteAppkey == rhs.remoteAppkey))
      return false;
    if (!(strategy == rhs.strategy))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getService_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getService_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_getService_pargs {
 public:


  virtual ~SGAgent_getService_pargs() throw() {}

  const std::string* localAppkey;
  const std::string* remoteAppkey;
  const int32_t* strategy;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getService_result__isset {
  _SGAgent_getService_result__isset() : success(false) {}
  bool success;
} _SGAgent_getService_result__isset;

class SGAgent_getService_result {
 public:

  SGAgent_getService_result() {
  }

  virtual ~SGAgent_getService_result() throw() {}

  SGService success;

  _SGAgent_getService_result__isset __isset;

  void __set_success(const SGService& val) {
    success = val;
  }

  bool operator == (const SGAgent_getService_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getService_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getService_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getService_presult__isset {
  _SGAgent_getService_presult__isset() : success(false) {}
  bool success;
} _SGAgent_getService_presult__isset;

class SGAgent_getService_presult {
 public:


  virtual ~SGAgent_getService_presult() throw() {}

  SGService* success;

  _SGAgent_getService_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgent_registService_args__isset {
  _SGAgent_registService_args__isset() : oService(false) {}
  bool oService;
} _SGAgent_registService_args__isset;

class SGAgent_registService_args {
 public:

  SGAgent_registService_args() {
  }

  virtual ~SGAgent_registService_args() throw() {}

  SGService oService;

  _SGAgent_registService_args__isset __isset;

  void __set_oService(const SGService& val) {
    oService = val;
  }

  bool operator == (const SGAgent_registService_args & rhs) const
  {
    if (!(oService == rhs.oService))
      return false;
    return true;
  }
  bool operator != (const SGAgent_registService_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_registService_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_registService_pargs {
 public:


  virtual ~SGAgent_registService_pargs() throw() {}

  const SGService* oService;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_registService_result__isset {
  _SGAgent_registService_result__isset() : success(false) {}
  bool success;
} _SGAgent_registService_result__isset;

class SGAgent_registService_result {
 public:

  SGAgent_registService_result() : success(0) {
  }

  virtual ~SGAgent_registService_result() throw() {}

  int32_t success;

  _SGAgent_registService_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SGAgent_registService_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_registService_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_registService_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_registService_presult__isset {
  _SGAgent_registService_presult__isset() : success(false) {}
  bool success;
} _SGAgent_registService_presult__isset;

class SGAgent_registService_presult {
 public:


  virtual ~SGAgent_registService_presult() throw() {}

  int32_t* success;

  _SGAgent_registService_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgent_registServicewithCmd_args__isset {
  _SGAgent_registServicewithCmd_args__isset() : uptCmd(false), oService(false) {}
  bool uptCmd;
  bool oService;
} _SGAgent_registServicewithCmd_args__isset;

class SGAgent_registServicewithCmd_args {
 public:

  SGAgent_registServicewithCmd_args() : uptCmd(0) {
  }

  virtual ~SGAgent_registServicewithCmd_args() throw() {}

  int32_t uptCmd;
  SGService oService;

  _SGAgent_registServicewithCmd_args__isset __isset;

  void __set_uptCmd(const int32_t val) {
    uptCmd = val;
  }

  void __set_oService(const SGService& val) {
    oService = val;
  }

  bool operator == (const SGAgent_registServicewithCmd_args & rhs) const
  {
    if (!(uptCmd == rhs.uptCmd))
      return false;
    if (!(oService == rhs.oService))
      return false;
    return true;
  }
  bool operator != (const SGAgent_registServicewithCmd_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_registServicewithCmd_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_registServicewithCmd_pargs {
 public:


  virtual ~SGAgent_registServicewithCmd_pargs() throw() {}

  const int32_t* uptCmd;
  const SGService* oService;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_registServicewithCmd_result__isset {
  _SGAgent_registServicewithCmd_result__isset() : success(false) {}
  bool success;
} _SGAgent_registServicewithCmd_result__isset;

class SGAgent_registServicewithCmd_result {
 public:

  SGAgent_registServicewithCmd_result() : success(0) {
  }

  virtual ~SGAgent_registServicewithCmd_result() throw() {}

  int32_t success;

  _SGAgent_registServicewithCmd_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SGAgent_registServicewithCmd_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_registServicewithCmd_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_registServicewithCmd_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_registServicewithCmd_presult__isset {
  _SGAgent_registServicewithCmd_presult__isset() : success(false) {}
  bool success;
} _SGAgent_registServicewithCmd_presult__isset;

class SGAgent_registServicewithCmd_presult {
 public:


  virtual ~SGAgent_registServicewithCmd_presult() throw() {}

  int32_t* success;

  _SGAgent_registServicewithCmd_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgent_unRegistService_args__isset {
  _SGAgent_unRegistService_args__isset() : oService(false) {}
  bool oService;
} _SGAgent_unRegistService_args__isset;

class SGAgent_unRegistService_args {
 public:

  SGAgent_unRegistService_args() {
  }

  virtual ~SGAgent_unRegistService_args() throw() {}

  SGService oService;

  _SGAgent_unRegistService_args__isset __isset;

  void __set_oService(const SGService& val) {
    oService = val;
  }

  bool operator == (const SGAgent_unRegistService_args & rhs) const
  {
    if (!(oService == rhs.oService))
      return false;
    return true;
  }
  bool operator != (const SGAgent_unRegistService_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_unRegistService_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_unRegistService_pargs {
 public:


  virtual ~SGAgent_unRegistService_pargs() throw() {}

  const SGService* oService;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_unRegistService_result__isset {
  _SGAgent_unRegistService_result__isset() : success(false) {}
  bool success;
} _SGAgent_unRegistService_result__isset;

class SGAgent_unRegistService_result {
 public:

  SGAgent_unRegistService_result() : success(0) {
  }

  virtual ~SGAgent_unRegistService_result() throw() {}

  int32_t success;

  _SGAgent_unRegistService_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SGAgent_unRegistService_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_unRegistService_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_unRegistService_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_unRegistService_presult__isset {
  _SGAgent_unRegistService_presult__isset() : success(false) {}
  bool success;
} _SGAgent_unRegistService_presult__isset;

class SGAgent_unRegistService_presult {
 public:


  virtual ~SGAgent_unRegistService_presult() throw() {}

  int32_t* success;

  _SGAgent_unRegistService_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgent_updateConfig_args__isset {
  _SGAgent_updateConfig_args__isset() : request(false) {}
  bool request;
} _SGAgent_updateConfig_args__isset;

class SGAgent_updateConfig_args {
 public:

  SGAgent_updateConfig_args() {
  }

  virtual ~SGAgent_updateConfig_args() throw() {}

  ConfigUpdateRequest request;

  _SGAgent_updateConfig_args__isset __isset;

  void __set_request(const ConfigUpdateRequest& val) {
    request = val;
  }

  bool operator == (const SGAgent_updateConfig_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const SGAgent_updateConfig_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_updateConfig_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_updateConfig_pargs {
 public:


  virtual ~SGAgent_updateConfig_pargs() throw() {}

  const ConfigUpdateRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_updateConfig_result__isset {
  _SGAgent_updateConfig_result__isset() : success(false) {}
  bool success;
} _SGAgent_updateConfig_result__isset;

class SGAgent_updateConfig_result {
 public:

  SGAgent_updateConfig_result() : success(0) {
  }

  virtual ~SGAgent_updateConfig_result() throw() {}

  int32_t success;

  _SGAgent_updateConfig_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SGAgent_updateConfig_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_updateConfig_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_updateConfig_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_updateConfig_presult__isset {
  _SGAgent_updateConfig_presult__isset() : success(false) {}
  bool success;
} _SGAgent_updateConfig_presult__isset;

class SGAgent_updateConfig_presult {
 public:


  virtual ~SGAgent_updateConfig_presult() throw() {}

  int32_t* success;

  _SGAgent_updateConfig_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgent_getConfig_args__isset {
  _SGAgent_getConfig_args__isset() : node(false) {}
  bool node;
} _SGAgent_getConfig_args__isset;

class SGAgent_getConfig_args {
 public:

  SGAgent_getConfig_args() {
  }

  virtual ~SGAgent_getConfig_args() throw() {}

  proc_conf_param_t node;

  _SGAgent_getConfig_args__isset __isset;

  void __set_node(const proc_conf_param_t& val) {
    node = val;
  }

  bool operator == (const SGAgent_getConfig_args & rhs) const
  {
    if (!(node == rhs.node))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getConfig_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getConfig_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_getConfig_pargs {
 public:


  virtual ~SGAgent_getConfig_pargs() throw() {}

  const proc_conf_param_t* node;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getConfig_result__isset {
  _SGAgent_getConfig_result__isset() : success(false) {}
  bool success;
} _SGAgent_getConfig_result__isset;

class SGAgent_getConfig_result {
 public:

  SGAgent_getConfig_result() : success("") {
  }

  virtual ~SGAgent_getConfig_result() throw() {}

  std::string success;

  _SGAgent_getConfig_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const SGAgent_getConfig_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getConfig_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getConfig_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getConfig_presult__isset {
  _SGAgent_getConfig_presult__isset() : success(false) {}
  bool success;
} _SGAgent_getConfig_presult__isset;

class SGAgent_getConfig_presult {
 public:


  virtual ~SGAgent_getConfig_presult() throw() {}

  std::string* success;

  _SGAgent_getConfig_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgent_setConfig_args__isset {
  _SGAgent_setConfig_args__isset() : conf(false) {}
  bool conf;
} _SGAgent_setConfig_args__isset;

class SGAgent_setConfig_args {
 public:

  SGAgent_setConfig_args() {
  }

  virtual ~SGAgent_setConfig_args() throw() {}

  proc_conf_param_t conf;

  _SGAgent_setConfig_args__isset __isset;

  void __set_conf(const proc_conf_param_t& val) {
    conf = val;
  }

  bool operator == (const SGAgent_setConfig_args & rhs) const
  {
    if (!(conf == rhs.conf))
      return false;
    return true;
  }
  bool operator != (const SGAgent_setConfig_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_setConfig_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_setConfig_pargs {
 public:


  virtual ~SGAgent_setConfig_pargs() throw() {}

  const proc_conf_param_t* conf;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_setConfig_result__isset {
  _SGAgent_setConfig_result__isset() : success(false) {}
  bool success;
} _SGAgent_setConfig_result__isset;

class SGAgent_setConfig_result {
 public:

  SGAgent_setConfig_result() : success(0) {
  }

  virtual ~SGAgent_setConfig_result() throw() {}

  int32_t success;

  _SGAgent_setConfig_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SGAgent_setConfig_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_setConfig_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_setConfig_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_setConfig_presult__isset {
  _SGAgent_setConfig_presult__isset() : success(false) {}
  bool success;
} _SGAgent_setConfig_presult__isset;

class SGAgent_setConfig_presult {
 public:


  virtual ~SGAgent_setConfig_presult() throw() {}

  int32_t* success;

  _SGAgent_setConfig_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgent_getFileConfig_args__isset {
  _SGAgent_getFileConfig_args__isset() : file(false) {}
  bool file;
} _SGAgent_getFileConfig_args__isset;

class SGAgent_getFileConfig_args {
 public:

  SGAgent_getFileConfig_args() {
  }

  virtual ~SGAgent_getFileConfig_args() throw() {}

  file_param_t file;

  _SGAgent_getFileConfig_args__isset __isset;

  void __set_file(const file_param_t& val) {
    file = val;
  }

  bool operator == (const SGAgent_getFileConfig_args & rhs) const
  {
    if (!(file == rhs.file))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getFileConfig_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getFileConfig_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_getFileConfig_pargs {
 public:


  virtual ~SGAgent_getFileConfig_pargs() throw() {}

  const file_param_t* file;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getFileConfig_result__isset {
  _SGAgent_getFileConfig_result__isset() : success(false) {}
  bool success;
} _SGAgent_getFileConfig_result__isset;

class SGAgent_getFileConfig_result {
 public:

  SGAgent_getFileConfig_result() {
  }

  virtual ~SGAgent_getFileConfig_result() throw() {}

  file_param_t success;

  _SGAgent_getFileConfig_result__isset __isset;

  void __set_success(const file_param_t& val) {
    success = val;
  }

  bool operator == (const SGAgent_getFileConfig_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getFileConfig_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getFileConfig_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getFileConfig_presult__isset {
  _SGAgent_getFileConfig_presult__isset() : success(false) {}
  bool success;
} _SGAgent_getFileConfig_presult__isset;

class SGAgent_getFileConfig_presult {
 public:


  virtual ~SGAgent_getFileConfig_presult() throw() {}

  file_param_t* success;

  _SGAgent_getFileConfig_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgent_notifyFileConfigIssued_args__isset {
  _SGAgent_notifyFileConfigIssued_args__isset() : files(false) {}
  bool files;
} _SGAgent_notifyFileConfigIssued_args__isset;

class SGAgent_notifyFileConfigIssued_args {
 public:

  SGAgent_notifyFileConfigIssued_args() {
  }

  virtual ~SGAgent_notifyFileConfigIssued_args() throw() {}

  file_param_t files;

  _SGAgent_notifyFileConfigIssued_args__isset __isset;

  void __set_files(const file_param_t& val) {
    files = val;
  }

  bool operator == (const SGAgent_notifyFileConfigIssued_args & rhs) const
  {
    if (!(files == rhs.files))
      return false;
    return true;
  }
  bool operator != (const SGAgent_notifyFileConfigIssued_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_notifyFileConfigIssued_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_notifyFileConfigIssued_pargs {
 public:


  virtual ~SGAgent_notifyFileConfigIssued_pargs() throw() {}

  const file_param_t* files;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_notifyFileConfigIssued_result__isset {
  _SGAgent_notifyFileConfigIssued_result__isset() : success(false) {}
  bool success;
} _SGAgent_notifyFileConfigIssued_result__isset;

class SGAgent_notifyFileConfigIssued_result {
 public:

  SGAgent_notifyFileConfigIssued_result() : success(0) {
  }

  virtual ~SGAgent_notifyFileConfigIssued_result() throw() {}

  int32_t success;

  _SGAgent_notifyFileConfigIssued_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SGAgent_notifyFileConfigIssued_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_notifyFileConfigIssued_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_notifyFileConfigIssued_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_notifyFileConfigIssued_presult__isset {
  _SGAgent_notifyFileConfigIssued_presult__isset() : success(false) {}
  bool success;
} _SGAgent_notifyFileConfigIssued_presult__isset;

class SGAgent_notifyFileConfigIssued_presult {
 public:


  virtual ~SGAgent_notifyFileConfigIssued_presult() throw() {}

  int32_t* success;

  _SGAgent_notifyFileConfigIssued_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgent_notifyFileConfigWork_args__isset {
  _SGAgent_notifyFileConfigWork_args__isset() : files(false) {}
  bool files;
} _SGAgent_notifyFileConfigWork_args__isset;

class SGAgent_notifyFileConfigWork_args {
 public:

  SGAgent_notifyFileConfigWork_args() {
  }

  virtual ~SGAgent_notifyFileConfigWork_args() throw() {}

  file_param_t files;

  _SGAgent_notifyFileConfigWork_args__isset __isset;

  void __set_files(const file_param_t& val) {
    files = val;
  }

  bool operator == (const SGAgent_notifyFileConfigWork_args & rhs) const
  {
    if (!(files == rhs.files))
      return false;
    return true;
  }
  bool operator != (const SGAgent_notifyFileConfigWork_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_notifyFileConfigWork_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_notifyFileConfigWork_pargs {
 public:


  virtual ~SGAgent_notifyFileConfigWork_pargs() throw() {}

  const file_param_t* files;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_notifyFileConfigWork_result__isset {
  _SGAgent_notifyFileConfigWork_result__isset() : success(false) {}
  bool success;
} _SGAgent_notifyFileConfigWork_result__isset;

class SGAgent_notifyFileConfigWork_result {
 public:

  SGAgent_notifyFileConfigWork_result() : success(0) {
  }

  virtual ~SGAgent_notifyFileConfigWork_result() throw() {}

  int32_t success;

  _SGAgent_notifyFileConfigWork_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SGAgent_notifyFileConfigWork_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_notifyFileConfigWork_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_notifyFileConfigWork_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_notifyFileConfigWork_presult__isset {
  _SGAgent_notifyFileConfigWork_presult__isset() : success(false) {}
  bool success;
} _SGAgent_notifyFileConfigWork_presult__isset;

class SGAgent_notifyFileConfigWork_presult {
 public:


  virtual ~SGAgent_notifyFileConfigWork_presult() throw() {}

  int32_t* success;

  _SGAgent_notifyFileConfigWork_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgent_getLocalConfig_args__isset {
  _SGAgent_getLocalConfig_args__isset() : localAppkey(false), ip(false) {}
  bool localAppkey;
  bool ip;
} _SGAgent_getLocalConfig_args__isset;

class SGAgent_getLocalConfig_args {
 public:

  SGAgent_getLocalConfig_args() : localAppkey(""), ip("") {
  }

  virtual ~SGAgent_getLocalConfig_args() throw() {}

  std::string localAppkey;
  std::string ip;

  _SGAgent_getLocalConfig_args__isset __isset;

  void __set_localAppkey(const std::string& val) {
    localAppkey = val;
  }

  void __set_ip(const std::string& val) {
    ip = val;
  }

  bool operator == (const SGAgent_getLocalConfig_args & rhs) const
  {
    if (!(localAppkey == rhs.localAppkey))
      return false;
    if (!(ip == rhs.ip))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getLocalConfig_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getLocalConfig_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_getLocalConfig_pargs {
 public:


  virtual ~SGAgent_getLocalConfig_pargs() throw() {}

  const std::string* localAppkey;
  const std::string* ip;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getLocalConfig_result__isset {
  _SGAgent_getLocalConfig_result__isset() : success(false) {}
  bool success;
} _SGAgent_getLocalConfig_result__isset;

class SGAgent_getLocalConfig_result {
 public:

  SGAgent_getLocalConfig_result() : success("") {
  }

  virtual ~SGAgent_getLocalConfig_result() throw() {}

  std::string success;

  _SGAgent_getLocalConfig_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const SGAgent_getLocalConfig_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getLocalConfig_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getLocalConfig_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getLocalConfig_presult__isset {
  _SGAgent_getLocalConfig_presult__isset() : success(false) {}
  bool success;
} _SGAgent_getLocalConfig_presult__isset;

class SGAgent_getLocalConfig_presult {
 public:


  virtual ~SGAgent_getLocalConfig_presult() throw() {}

  std::string* success;

  _SGAgent_getLocalConfig_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgent_uploadLog_args__isset {
  _SGAgent_uploadLog_args__isset() : oLog(false) {}
  bool oLog;
} _SGAgent_uploadLog_args__isset;

class SGAgent_uploadLog_args {
 public:

  SGAgent_uploadLog_args() {
  }

  virtual ~SGAgent_uploadLog_args() throw() {}

  SGLog oLog;

  _SGAgent_uploadLog_args__isset __isset;

  void __set_oLog(const SGLog& val) {
    oLog = val;
  }

  bool operator == (const SGAgent_uploadLog_args & rhs) const
  {
    if (!(oLog == rhs.oLog))
      return false;
    return true;
  }
  bool operator != (const SGAgent_uploadLog_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_uploadLog_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_uploadLog_pargs {
 public:


  virtual ~SGAgent_uploadLog_pargs() throw() {}

  const SGLog* oLog;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_uploadLog_result__isset {
  _SGAgent_uploadLog_result__isset() : success(false) {}
  bool success;
} _SGAgent_uploadLog_result__isset;

class SGAgent_uploadLog_result {
 public:

  SGAgent_uploadLog_result() : success(0) {
  }

  virtual ~SGAgent_uploadLog_result() throw() {}

  int32_t success;

  _SGAgent_uploadLog_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SGAgent_uploadLog_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_uploadLog_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_uploadLog_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_uploadLog_presult__isset {
  _SGAgent_uploadLog_presult__isset() : success(false) {}
  bool success;
} _SGAgent_uploadLog_presult__isset;

class SGAgent_uploadLog_presult {
 public:


  virtual ~SGAgent_uploadLog_presult() throw() {}

  int32_t* success;

  _SGAgent_uploadLog_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgent_uploadCommonLog_args__isset {
  _SGAgent_uploadCommonLog_args__isset() : oCommonLog(false) {}
  bool oCommonLog;
} _SGAgent_uploadCommonLog_args__isset;

class SGAgent_uploadCommonLog_args {
 public:

  SGAgent_uploadCommonLog_args() {
  }

  virtual ~SGAgent_uploadCommonLog_args() throw() {}

  CommonLog oCommonLog;

  _SGAgent_uploadCommonLog_args__isset __isset;

  void __set_oCommonLog(const CommonLog& val) {
    oCommonLog = val;
  }

  bool operator == (const SGAgent_uploadCommonLog_args & rhs) const
  {
    if (!(oCommonLog == rhs.oCommonLog))
      return false;
    return true;
  }
  bool operator != (const SGAgent_uploadCommonLog_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_uploadCommonLog_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_uploadCommonLog_pargs {
 public:


  virtual ~SGAgent_uploadCommonLog_pargs() throw() {}

  const CommonLog* oCommonLog;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_uploadCommonLog_result__isset {
  _SGAgent_uploadCommonLog_result__isset() : success(false) {}
  bool success;
} _SGAgent_uploadCommonLog_result__isset;

class SGAgent_uploadCommonLog_result {
 public:

  SGAgent_uploadCommonLog_result() : success(0) {
  }

  virtual ~SGAgent_uploadCommonLog_result() throw() {}

  int32_t success;

  _SGAgent_uploadCommonLog_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SGAgent_uploadCommonLog_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_uploadCommonLog_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_uploadCommonLog_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_uploadCommonLog_presult__isset {
  _SGAgent_uploadCommonLog_presult__isset() : success(false) {}
  bool success;
} _SGAgent_uploadCommonLog_presult__isset;

class SGAgent_uploadCommonLog_presult {
 public:


  virtual ~SGAgent_uploadCommonLog_presult() throw() {}

  int32_t* success;

  _SGAgent_uploadCommonLog_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgent_uploadModuleInvoke_args__isset {
  _SGAgent_uploadModuleInvoke_args__isset() : oInfo(false) {}
  bool oInfo;
} _SGAgent_uploadModuleInvoke_args__isset;

class SGAgent_uploadModuleInvoke_args {
 public:

  SGAgent_uploadModuleInvoke_args() {
  }

  virtual ~SGAgent_uploadModuleInvoke_args() throw() {}

  SGModuleInvokeInfo oInfo;

  _SGAgent_uploadModuleInvoke_args__isset __isset;

  void __set_oInfo(const SGModuleInvokeInfo& val) {
    oInfo = val;
  }

  bool operator == (const SGAgent_uploadModuleInvoke_args & rhs) const
  {
    if (!(oInfo == rhs.oInfo))
      return false;
    return true;
  }
  bool operator != (const SGAgent_uploadModuleInvoke_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_uploadModuleInvoke_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_uploadModuleInvoke_pargs {
 public:


  virtual ~SGAgent_uploadModuleInvoke_pargs() throw() {}

  const SGModuleInvokeInfo* oInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_uploadModuleInvoke_result__isset {
  _SGAgent_uploadModuleInvoke_result__isset() : success(false) {}
  bool success;
} _SGAgent_uploadModuleInvoke_result__isset;

class SGAgent_uploadModuleInvoke_result {
 public:

  SGAgent_uploadModuleInvoke_result() : success(0) {
  }

  virtual ~SGAgent_uploadModuleInvoke_result() throw() {}

  int32_t success;

  _SGAgent_uploadModuleInvoke_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SGAgent_uploadModuleInvoke_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_uploadModuleInvoke_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_uploadModuleInvoke_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_uploadModuleInvoke_presult__isset {
  _SGAgent_uploadModuleInvoke_presult__isset() : success(false) {}
  bool success;
} _SGAgent_uploadModuleInvoke_presult__isset;

class SGAgent_uploadModuleInvoke_presult {
 public:


  virtual ~SGAgent_uploadModuleInvoke_presult() throw() {}

  int32_t* success;

  _SGAgent_uploadModuleInvoke_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SGAgent_getDegradeActions_args {
 public:

  SGAgent_getDegradeActions_args() : localAppkey(""), remoteAppkey("") {
  }

  virtual ~SGAgent_getDegradeActions_args() throw() {}

  std::string localAppkey;
  std::string remoteAppkey;

  void __set_localAppkey(const std::string& val) {
    localAppkey = val;
  }

  void __set_remoteAppkey(const std::string& val) {
    remoteAppkey = val;
  }

  bool operator == (const SGAgent_getDegradeActions_args & rhs) const
  {
    if (!(localAppkey == rhs.localAppkey))
      return false;
    if (!(remoteAppkey == rhs.remoteAppkey))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getDegradeActions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getDegradeActions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_getDegradeActions_pargs {
 public:


  virtual ~SGAgent_getDegradeActions_pargs() throw() {}

  const std::string* localAppkey;
  const std::string* remoteAppkey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getDegradeActions_result__isset {
  _SGAgent_getDegradeActions_result__isset() : success(false) {}
  bool success;
} _SGAgent_getDegradeActions_result__isset;

class SGAgent_getDegradeActions_result {
 public:

  SGAgent_getDegradeActions_result() {
  }

  virtual ~SGAgent_getDegradeActions_result() throw() {}

  std::vector<DegradeAction>  success;

  _SGAgent_getDegradeActions_result__isset __isset;

  void __set_success(const std::vector<DegradeAction> & val) {
    success = val;
  }

  bool operator == (const SGAgent_getDegradeActions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getDegradeActions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getDegradeActions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getDegradeActions_presult__isset {
  _SGAgent_getDegradeActions_presult__isset() : success(false) {}
  bool success;
} _SGAgent_getDegradeActions_presult__isset;

class SGAgent_getDegradeActions_presult {
 public:


  virtual ~SGAgent_getDegradeActions_presult() throw() {}

  std::vector<DegradeAction> * success;

  _SGAgent_getDegradeActions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SGAgent_getZabbixInfo_args {
 public:

  SGAgent_getZabbixInfo_args() {
  }

  virtual ~SGAgent_getZabbixInfo_args() throw() {}


  bool operator == (const SGAgent_getZabbixInfo_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SGAgent_getZabbixInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getZabbixInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_getZabbixInfo_pargs {
 public:


  virtual ~SGAgent_getZabbixInfo_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getZabbixInfo_result__isset {
  _SGAgent_getZabbixInfo_result__isset() : success(false) {}
  bool success;
} _SGAgent_getZabbixInfo_result__isset;

class SGAgent_getZabbixInfo_result {
 public:

  SGAgent_getZabbixInfo_result() {
  }

  virtual ~SGAgent_getZabbixInfo_result() throw() {}

  ZabbixSelfCheck success;

  _SGAgent_getZabbixInfo_result__isset __isset;

  void __set_success(const ZabbixSelfCheck& val) {
    success = val;
  }

  bool operator == (const SGAgent_getZabbixInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getZabbixInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getZabbixInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getZabbixInfo_presult__isset {
  _SGAgent_getZabbixInfo_presult__isset() : success(false) {}
  bool success;
} _SGAgent_getZabbixInfo_presult__isset;

class SGAgent_getZabbixInfo_presult {
 public:


  virtual ~SGAgent_getZabbixInfo_presult() throw() {}

  ZabbixSelfCheck* success;

  _SGAgent_getZabbixInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgent_getAuthorizedConsumers_args__isset {
  _SGAgent_getAuthorizedConsumers_args__isset() : targetAppkey(false) {}
  bool targetAppkey;
} _SGAgent_getAuthorizedConsumers_args__isset;

class SGAgent_getAuthorizedConsumers_args {
 public:

  SGAgent_getAuthorizedConsumers_args() : targetAppkey("") {
  }

  virtual ~SGAgent_getAuthorizedConsumers_args() throw() {}

  std::string targetAppkey;

  _SGAgent_getAuthorizedConsumers_args__isset __isset;

  void __set_targetAppkey(const std::string& val) {
    targetAppkey = val;
  }

  bool operator == (const SGAgent_getAuthorizedConsumers_args & rhs) const
  {
    if (!(targetAppkey == rhs.targetAppkey))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getAuthorizedConsumers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getAuthorizedConsumers_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_getAuthorizedConsumers_pargs {
 public:


  virtual ~SGAgent_getAuthorizedConsumers_pargs() throw() {}

  const std::string* targetAppkey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getAuthorizedConsumers_result__isset {
  _SGAgent_getAuthorizedConsumers_result__isset() : success(false) {}
  bool success;
} _SGAgent_getAuthorizedConsumers_result__isset;

class SGAgent_getAuthorizedConsumers_result {
 public:

  SGAgent_getAuthorizedConsumers_result() : success("") {
  }

  virtual ~SGAgent_getAuthorizedConsumers_result() throw() {}

  std::string success;

  _SGAgent_getAuthorizedConsumers_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const SGAgent_getAuthorizedConsumers_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getAuthorizedConsumers_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getAuthorizedConsumers_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getAuthorizedConsumers_presult__isset {
  _SGAgent_getAuthorizedConsumers_presult__isset() : success(false) {}
  bool success;
} _SGAgent_getAuthorizedConsumers_presult__isset;

class SGAgent_getAuthorizedConsumers_presult {
 public:


  virtual ~SGAgent_getAuthorizedConsumers_presult() throw() {}

  std::string* success;

  _SGAgent_getAuthorizedConsumers_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgent_getAuthorizedProviders_args__isset {
  _SGAgent_getAuthorizedProviders_args__isset() : targetAppkey(false) {}
  bool targetAppkey;
} _SGAgent_getAuthorizedProviders_args__isset;

class SGAgent_getAuthorizedProviders_args {
 public:

  SGAgent_getAuthorizedProviders_args() : targetAppkey("") {
  }

  virtual ~SGAgent_getAuthorizedProviders_args() throw() {}

  std::string targetAppkey;

  _SGAgent_getAuthorizedProviders_args__isset __isset;

  void __set_targetAppkey(const std::string& val) {
    targetAppkey = val;
  }

  bool operator == (const SGAgent_getAuthorizedProviders_args & rhs) const
  {
    if (!(targetAppkey == rhs.targetAppkey))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getAuthorizedProviders_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getAuthorizedProviders_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_getAuthorizedProviders_pargs {
 public:


  virtual ~SGAgent_getAuthorizedProviders_pargs() throw() {}

  const std::string* targetAppkey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getAuthorizedProviders_result__isset {
  _SGAgent_getAuthorizedProviders_result__isset() : success(false) {}
  bool success;
} _SGAgent_getAuthorizedProviders_result__isset;

class SGAgent_getAuthorizedProviders_result {
 public:

  SGAgent_getAuthorizedProviders_result() : success("") {
  }

  virtual ~SGAgent_getAuthorizedProviders_result() throw() {}

  std::string success;

  _SGAgent_getAuthorizedProviders_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const SGAgent_getAuthorizedProviders_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getAuthorizedProviders_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getAuthorizedProviders_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getAuthorizedProviders_presult__isset {
  _SGAgent_getAuthorizedProviders_presult__isset() : success(false) {}
  bool success;
} _SGAgent_getAuthorizedProviders_presult__isset;

class SGAgent_getAuthorizedProviders_presult {
 public:


  virtual ~SGAgent_getAuthorizedProviders_presult() throw() {}

  std::string* success;

  _SGAgent_getAuthorizedProviders_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgent_getHttpPropertiesByBusinessLine_args__isset {
  _SGAgent_getHttpPropertiesByBusinessLine_args__isset() : bizCode(false) {}
  bool bizCode;
} _SGAgent_getHttpPropertiesByBusinessLine_args__isset;

class SGAgent_getHttpPropertiesByBusinessLine_args {
 public:

  SGAgent_getHttpPropertiesByBusinessLine_args() : bizCode(0) {
  }

  virtual ~SGAgent_getHttpPropertiesByBusinessLine_args() throw() {}

  int32_t bizCode;

  _SGAgent_getHttpPropertiesByBusinessLine_args__isset __isset;

  void __set_bizCode(const int32_t val) {
    bizCode = val;
  }

  bool operator == (const SGAgent_getHttpPropertiesByBusinessLine_args & rhs) const
  {
    if (!(bizCode == rhs.bizCode))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getHttpPropertiesByBusinessLine_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getHttpPropertiesByBusinessLine_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_getHttpPropertiesByBusinessLine_pargs {
 public:


  virtual ~SGAgent_getHttpPropertiesByBusinessLine_pargs() throw() {}

  const int32_t* bizCode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getHttpPropertiesByBusinessLine_result__isset {
  _SGAgent_getHttpPropertiesByBusinessLine_result__isset() : success(false) {}
  bool success;
} _SGAgent_getHttpPropertiesByBusinessLine_result__isset;

class SGAgent_getHttpPropertiesByBusinessLine_result {
 public:

  SGAgent_getHttpPropertiesByBusinessLine_result() {
  }

  virtual ~SGAgent_getHttpPropertiesByBusinessLine_result() throw() {}

  std::map<std::string, HttpProperties>  success;

  _SGAgent_getHttpPropertiesByBusinessLine_result__isset __isset;

  void __set_success(const std::map<std::string, HttpProperties> & val) {
    success = val;
  }

  bool operator == (const SGAgent_getHttpPropertiesByBusinessLine_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getHttpPropertiesByBusinessLine_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getHttpPropertiesByBusinessLine_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getHttpPropertiesByBusinessLine_presult__isset {
  _SGAgent_getHttpPropertiesByBusinessLine_presult__isset() : success(false) {}
  bool success;
} _SGAgent_getHttpPropertiesByBusinessLine_presult__isset;

class SGAgent_getHttpPropertiesByBusinessLine_presult {
 public:


  virtual ~SGAgent_getHttpPropertiesByBusinessLine_presult() throw() {}

  std::map<std::string, HttpProperties> * success;

  _SGAgent_getHttpPropertiesByBusinessLine_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgent_getHttpPropertiesByAppkey_args__isset {
  _SGAgent_getHttpPropertiesByAppkey_args__isset() : appkey(false) {}
  bool appkey;
} _SGAgent_getHttpPropertiesByAppkey_args__isset;

class SGAgent_getHttpPropertiesByAppkey_args {
 public:

  SGAgent_getHttpPropertiesByAppkey_args() : appkey("") {
  }

  virtual ~SGAgent_getHttpPropertiesByAppkey_args() throw() {}

  std::string appkey;

  _SGAgent_getHttpPropertiesByAppkey_args__isset __isset;

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  bool operator == (const SGAgent_getHttpPropertiesByAppkey_args & rhs) const
  {
    if (!(appkey == rhs.appkey))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getHttpPropertiesByAppkey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getHttpPropertiesByAppkey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_getHttpPropertiesByAppkey_pargs {
 public:


  virtual ~SGAgent_getHttpPropertiesByAppkey_pargs() throw() {}

  const std::string* appkey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getHttpPropertiesByAppkey_result__isset {
  _SGAgent_getHttpPropertiesByAppkey_result__isset() : success(false) {}
  bool success;
} _SGAgent_getHttpPropertiesByAppkey_result__isset;

class SGAgent_getHttpPropertiesByAppkey_result {
 public:

  SGAgent_getHttpPropertiesByAppkey_result() {
  }

  virtual ~SGAgent_getHttpPropertiesByAppkey_result() throw() {}

  std::map<std::string, HttpProperties>  success;

  _SGAgent_getHttpPropertiesByAppkey_result__isset __isset;

  void __set_success(const std::map<std::string, HttpProperties> & val) {
    success = val;
  }

  bool operator == (const SGAgent_getHttpPropertiesByAppkey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getHttpPropertiesByAppkey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getHttpPropertiesByAppkey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getHttpPropertiesByAppkey_presult__isset {
  _SGAgent_getHttpPropertiesByAppkey_presult__isset() : success(false) {}
  bool success;
} _SGAgent_getHttpPropertiesByAppkey_presult__isset;

class SGAgent_getHttpPropertiesByAppkey_presult {
 public:


  virtual ~SGAgent_getHttpPropertiesByAppkey_presult() throw() {}

  std::map<std::string, HttpProperties> * success;

  _SGAgent_getHttpPropertiesByAppkey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgent_switchEnv_args__isset {
  _SGAgent_switchEnv_args__isset() : env(false), verifyCode(false) {}
  bool env;
  bool verifyCode;
} _SGAgent_switchEnv_args__isset;

class SGAgent_switchEnv_args {
 public:

  SGAgent_switchEnv_args() : env(""), verifyCode("") {
  }

  virtual ~SGAgent_switchEnv_args() throw() {}

  std::string env;
  std::string verifyCode;

  _SGAgent_switchEnv_args__isset __isset;

  void __set_env(const std::string& val) {
    env = val;
  }

  void __set_verifyCode(const std::string& val) {
    verifyCode = val;
  }

  bool operator == (const SGAgent_switchEnv_args & rhs) const
  {
    if (!(env == rhs.env))
      return false;
    if (!(verifyCode == rhs.verifyCode))
      return false;
    return true;
  }
  bool operator != (const SGAgent_switchEnv_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_switchEnv_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_switchEnv_pargs {
 public:


  virtual ~SGAgent_switchEnv_pargs() throw() {}

  const std::string* env;
  const std::string* verifyCode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_switchEnv_result__isset {
  _SGAgent_switchEnv_result__isset() : success(false) {}
  bool success;
} _SGAgent_switchEnv_result__isset;

class SGAgent_switchEnv_result {
 public:

  SGAgent_switchEnv_result() : success(0) {
  }

  virtual ~SGAgent_switchEnv_result() throw() {}

  bool success;

  _SGAgent_switchEnv_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const SGAgent_switchEnv_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_switchEnv_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_switchEnv_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_switchEnv_presult__isset {
  _SGAgent_switchEnv_presult__isset() : success(false) {}
  bool success;
} _SGAgent_switchEnv_presult__isset;

class SGAgent_switchEnv_presult {
 public:


  virtual ~SGAgent_switchEnv_presult() throw() {}

  bool* success;

  _SGAgent_switchEnv_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SGAgent_getName_args {
 public:

  SGAgent_getName_args() {
  }

  virtual ~SGAgent_getName_args() throw() {}


  bool operator == (const SGAgent_getName_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SGAgent_getName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_getName_pargs {
 public:


  virtual ~SGAgent_getName_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getName_result__isset {
  _SGAgent_getName_result__isset() : success(false) {}
  bool success;
} _SGAgent_getName_result__isset;

class SGAgent_getName_result {
 public:

  SGAgent_getName_result() : success("") {
  }

  virtual ~SGAgent_getName_result() throw() {}

  std::string success;

  _SGAgent_getName_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const SGAgent_getName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getName_presult__isset {
  _SGAgent_getName_presult__isset() : success(false) {}
  bool success;
} _SGAgent_getName_presult__isset;

class SGAgent_getName_presult {
 public:


  virtual ~SGAgent_getName_presult() throw() {}

  std::string* success;

  _SGAgent_getName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SGAgent_getVersion_args {
 public:

  SGAgent_getVersion_args() {
  }

  virtual ~SGAgent_getVersion_args() throw() {}


  bool operator == (const SGAgent_getVersion_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SGAgent_getVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_getVersion_pargs {
 public:


  virtual ~SGAgent_getVersion_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getVersion_result__isset {
  _SGAgent_getVersion_result__isset() : success(false) {}
  bool success;
} _SGAgent_getVersion_result__isset;

class SGAgent_getVersion_result {
 public:

  SGAgent_getVersion_result() : success("") {
  }

  virtual ~SGAgent_getVersion_result() throw() {}

  std::string success;

  _SGAgent_getVersion_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const SGAgent_getVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getVersion_presult__isset {
  _SGAgent_getVersion_presult__isset() : success(false) {}
  bool success;
} _SGAgent_getVersion_presult__isset;

class SGAgent_getVersion_presult {
 public:


  virtual ~SGAgent_getVersion_presult() throw() {}

  std::string* success;

  _SGAgent_getVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SGAgent_getEnv_args {
 public:

  SGAgent_getEnv_args() {
  }

  virtual ~SGAgent_getEnv_args() throw() {}


  bool operator == (const SGAgent_getEnv_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SGAgent_getEnv_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getEnv_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_getEnv_pargs {
 public:


  virtual ~SGAgent_getEnv_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getEnv_result__isset {
  _SGAgent_getEnv_result__isset() : success(false) {}
  bool success;
} _SGAgent_getEnv_result__isset;

class SGAgent_getEnv_result {
 public:

  SGAgent_getEnv_result() : success(0) {
  }

  virtual ~SGAgent_getEnv_result() throw() {}

  int32_t success;

  _SGAgent_getEnv_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SGAgent_getEnv_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getEnv_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getEnv_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getEnv_presult__isset {
  _SGAgent_getEnv_presult__isset() : success(false) {}
  bool success;
} _SGAgent_getEnv_presult__isset;

class SGAgent_getEnv_presult {
 public:


  virtual ~SGAgent_getEnv_presult() throw() {}

  int32_t* success;

  _SGAgent_getEnv_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SGAgent_getStatus_args {
 public:

  SGAgent_getStatus_args() {
  }

  virtual ~SGAgent_getStatus_args() throw() {}


  bool operator == (const SGAgent_getStatus_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SGAgent_getStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_getStatus_pargs {
 public:


  virtual ~SGAgent_getStatus_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getStatus_result__isset {
  _SGAgent_getStatus_result__isset() : success(false) {}
  bool success;
} _SGAgent_getStatus_result__isset;

class SGAgent_getStatus_result {
 public:

  SGAgent_getStatus_result() : success(( ::fb_status::type)0) {
  }

  virtual ~SGAgent_getStatus_result() throw() {}

  sg_fb_status success;

  _SGAgent_getStatus_result__isset __isset;

  void __set_success(const sg_fb_status val) {
    success = val;
  }

  bool operator == (const SGAgent_getStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getStatus_presult__isset {
  _SGAgent_getStatus_presult__isset() : success(false) {}
  bool success;
} _SGAgent_getStatus_presult__isset;

class SGAgent_getStatus_presult {
 public:


  virtual ~SGAgent_getStatus_presult() throw() {}

  sg_fb_status* success;

  _SGAgent_getStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SGAgent_getStatusDetails_args {
 public:

  SGAgent_getStatusDetails_args() {
  }

  virtual ~SGAgent_getStatusDetails_args() throw() {}


  bool operator == (const SGAgent_getStatusDetails_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SGAgent_getStatusDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getStatusDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_getStatusDetails_pargs {
 public:


  virtual ~SGAgent_getStatusDetails_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getStatusDetails_result__isset {
  _SGAgent_getStatusDetails_result__isset() : success(false) {}
  bool success;
} _SGAgent_getStatusDetails_result__isset;

class SGAgent_getStatusDetails_result {
 public:

  SGAgent_getStatusDetails_result() : success("") {
  }

  virtual ~SGAgent_getStatusDetails_result() throw() {}

  std::string success;

  _SGAgent_getStatusDetails_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const SGAgent_getStatusDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getStatusDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getStatusDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getStatusDetails_presult__isset {
  _SGAgent_getStatusDetails_presult__isset() : success(false) {}
  bool success;
} _SGAgent_getStatusDetails_presult__isset;

class SGAgent_getStatusDetails_presult {
 public:


  virtual ~SGAgent_getStatusDetails_presult() throw() {}

  std::string* success;

  _SGAgent_getStatusDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SGAgent_getCounters_args {
 public:

  SGAgent_getCounters_args() {
  }

  virtual ~SGAgent_getCounters_args() throw() {}


  bool operator == (const SGAgent_getCounters_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SGAgent_getCounters_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getCounters_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_getCounters_pargs {
 public:


  virtual ~SGAgent_getCounters_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getCounters_result__isset {
  _SGAgent_getCounters_result__isset() : success(false) {}
  bool success;
} _SGAgent_getCounters_result__isset;

class SGAgent_getCounters_result {
 public:

  SGAgent_getCounters_result() {
  }

  virtual ~SGAgent_getCounters_result() throw() {}

  std::map<std::string, int64_t>  success;

  _SGAgent_getCounters_result__isset __isset;

  void __set_success(const std::map<std::string, int64_t> & val) {
    success = val;
  }

  bool operator == (const SGAgent_getCounters_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getCounters_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getCounters_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getCounters_presult__isset {
  _SGAgent_getCounters_presult__isset() : success(false) {}
  bool success;
} _SGAgent_getCounters_presult__isset;

class SGAgent_getCounters_presult {
 public:


  virtual ~SGAgent_getCounters_presult() throw() {}

  std::map<std::string, int64_t> * success;

  _SGAgent_getCounters_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgent_getCounter_args__isset {
  _SGAgent_getCounter_args__isset() : key(false) {}
  bool key;
} _SGAgent_getCounter_args__isset;

class SGAgent_getCounter_args {
 public:

  SGAgent_getCounter_args() : key("") {
  }

  virtual ~SGAgent_getCounter_args() throw() {}

  std::string key;

  _SGAgent_getCounter_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  bool operator == (const SGAgent_getCounter_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getCounter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getCounter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_getCounter_pargs {
 public:


  virtual ~SGAgent_getCounter_pargs() throw() {}

  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getCounter_result__isset {
  _SGAgent_getCounter_result__isset() : success(false) {}
  bool success;
} _SGAgent_getCounter_result__isset;

class SGAgent_getCounter_result {
 public:

  SGAgent_getCounter_result() : success(0) {
  }

  virtual ~SGAgent_getCounter_result() throw() {}

  int64_t success;

  _SGAgent_getCounter_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const SGAgent_getCounter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getCounter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getCounter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getCounter_presult__isset {
  _SGAgent_getCounter_presult__isset() : success(false) {}
  bool success;
} _SGAgent_getCounter_presult__isset;

class SGAgent_getCounter_presult {
 public:


  virtual ~SGAgent_getCounter_presult() throw() {}

  int64_t* success;

  _SGAgent_getCounter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgent_setOption_args__isset {
  _SGAgent_setOption_args__isset() : key(false), value(false) {}
  bool key;
  bool value;
} _SGAgent_setOption_args__isset;

class SGAgent_setOption_args {
 public:

  SGAgent_setOption_args() : key(""), value("") {
  }

  virtual ~SGAgent_setOption_args() throw() {}

  std::string key;
  std::string value;

  _SGAgent_setOption_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  bool operator == (const SGAgent_setOption_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const SGAgent_setOption_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_setOption_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_setOption_pargs {
 public:


  virtual ~SGAgent_setOption_pargs() throw() {}

  const std::string* key;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_setOption_result {
 public:

  SGAgent_setOption_result() {
  }

  virtual ~SGAgent_setOption_result() throw() {}


  bool operator == (const SGAgent_setOption_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SGAgent_setOption_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_setOption_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_setOption_presult {
 public:


  virtual ~SGAgent_setOption_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgent_getOption_args__isset {
  _SGAgent_getOption_args__isset() : key(false) {}
  bool key;
} _SGAgent_getOption_args__isset;

class SGAgent_getOption_args {
 public:

  SGAgent_getOption_args() : key("") {
  }

  virtual ~SGAgent_getOption_args() throw() {}

  std::string key;

  _SGAgent_getOption_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  bool operator == (const SGAgent_getOption_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getOption_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getOption_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_getOption_pargs {
 public:


  virtual ~SGAgent_getOption_pargs() throw() {}

  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getOption_result__isset {
  _SGAgent_getOption_result__isset() : success(false) {}
  bool success;
} _SGAgent_getOption_result__isset;

class SGAgent_getOption_result {
 public:

  SGAgent_getOption_result() : success("") {
  }

  virtual ~SGAgent_getOption_result() throw() {}

  std::string success;

  _SGAgent_getOption_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const SGAgent_getOption_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getOption_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getOption_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getOption_presult__isset {
  _SGAgent_getOption_presult__isset() : success(false) {}
  bool success;
} _SGAgent_getOption_presult__isset;

class SGAgent_getOption_presult {
 public:


  virtual ~SGAgent_getOption_presult() throw() {}

  std::string* success;

  _SGAgent_getOption_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SGAgent_getOptions_args {
 public:

  SGAgent_getOptions_args() {
  }

  virtual ~SGAgent_getOptions_args() throw() {}


  bool operator == (const SGAgent_getOptions_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SGAgent_getOptions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getOptions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_getOptions_pargs {
 public:


  virtual ~SGAgent_getOptions_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getOptions_result__isset {
  _SGAgent_getOptions_result__isset() : success(false) {}
  bool success;
} _SGAgent_getOptions_result__isset;

class SGAgent_getOptions_result {
 public:

  SGAgent_getOptions_result() {
  }

  virtual ~SGAgent_getOptions_result() throw() {}

  std::map<std::string, std::string>  success;

  _SGAgent_getOptions_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val) {
    success = val;
  }

  bool operator == (const SGAgent_getOptions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getOptions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getOptions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getOptions_presult__isset {
  _SGAgent_getOptions_presult__isset() : success(false) {}
  bool success;
} _SGAgent_getOptions_presult__isset;

class SGAgent_getOptions_presult {
 public:


  virtual ~SGAgent_getOptions_presult() throw() {}

  std::map<std::string, std::string> * success;

  _SGAgent_getOptions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgent_getCpuProfile_args__isset {
  _SGAgent_getCpuProfile_args__isset() : profileDurationInSec(false) {}
  bool profileDurationInSec;
} _SGAgent_getCpuProfile_args__isset;

class SGAgent_getCpuProfile_args {
 public:

  SGAgent_getCpuProfile_args() : profileDurationInSec(0) {
  }

  virtual ~SGAgent_getCpuProfile_args() throw() {}

  int32_t profileDurationInSec;

  _SGAgent_getCpuProfile_args__isset __isset;

  void __set_profileDurationInSec(const int32_t val) {
    profileDurationInSec = val;
  }

  bool operator == (const SGAgent_getCpuProfile_args & rhs) const
  {
    if (!(profileDurationInSec == rhs.profileDurationInSec))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getCpuProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getCpuProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_getCpuProfile_pargs {
 public:


  virtual ~SGAgent_getCpuProfile_pargs() throw() {}

  const int32_t* profileDurationInSec;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getCpuProfile_result__isset {
  _SGAgent_getCpuProfile_result__isset() : success(false) {}
  bool success;
} _SGAgent_getCpuProfile_result__isset;

class SGAgent_getCpuProfile_result {
 public:

  SGAgent_getCpuProfile_result() : success("") {
  }

  virtual ~SGAgent_getCpuProfile_result() throw() {}

  std::string success;

  _SGAgent_getCpuProfile_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const SGAgent_getCpuProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_getCpuProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_getCpuProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_getCpuProfile_presult__isset {
  _SGAgent_getCpuProfile_presult__isset() : success(false) {}
  bool success;
} _SGAgent_getCpuProfile_presult__isset;

class SGAgent_getCpuProfile_presult {
 public:


  virtual ~SGAgent_getCpuProfile_presult() throw() {}

  std::string* success;

  _SGAgent_getCpuProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SGAgent_aliveSince_args {
 public:

  SGAgent_aliveSince_args() {
  }

  virtual ~SGAgent_aliveSince_args() throw() {}


  bool operator == (const SGAgent_aliveSince_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SGAgent_aliveSince_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_aliveSince_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_aliveSince_pargs {
 public:


  virtual ~SGAgent_aliveSince_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_aliveSince_result__isset {
  _SGAgent_aliveSince_result__isset() : success(false) {}
  bool success;
} _SGAgent_aliveSince_result__isset;

class SGAgent_aliveSince_result {
 public:

  SGAgent_aliveSince_result() : success(0) {
  }

  virtual ~SGAgent_aliveSince_result() throw() {}

  int64_t success;

  _SGAgent_aliveSince_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const SGAgent_aliveSince_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_aliveSince_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_aliveSince_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_aliveSince_presult__isset {
  _SGAgent_aliveSince_presult__isset() : success(false) {}
  bool success;
} _SGAgent_aliveSince_presult__isset;

class SGAgent_aliveSince_presult {
 public:


  virtual ~SGAgent_aliveSince_presult() throw() {}

  int64_t* success;

  _SGAgent_aliveSince_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SGAgent_reinitialize_args {
 public:

  SGAgent_reinitialize_args() {
  }

  virtual ~SGAgent_reinitialize_args() throw() {}


  bool operator == (const SGAgent_reinitialize_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SGAgent_reinitialize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_reinitialize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_reinitialize_pargs {
 public:


  virtual ~SGAgent_reinitialize_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_setRemoteSwitch_args__isset {
  _SGAgent_setRemoteSwitch_args__isset() : req(false) {}
  bool req;
} _SGAgent_setRemoteSwitch_args__isset;

class SGAgent_setRemoteSwitch_args {
 public:

  SGAgent_setRemoteSwitch_args() {
  }

  virtual ~SGAgent_setRemoteSwitch_args() throw() {}

  SwitchRequest req;

  _SGAgent_setRemoteSwitch_args__isset __isset;

  void __set_req(const SwitchRequest& val) {
    req = val;
  }

  bool operator == (const SGAgent_setRemoteSwitch_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const SGAgent_setRemoteSwitch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_setRemoteSwitch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_setRemoteSwitch_pargs {
 public:


  virtual ~SGAgent_setRemoteSwitch_pargs() throw() {}

  const SwitchRequest* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_setRemoteSwitch_result__isset {
  _SGAgent_setRemoteSwitch_result__isset() : success(false) {}
  bool success;
} _SGAgent_setRemoteSwitch_result__isset;

class SGAgent_setRemoteSwitch_result {
 public:

  SGAgent_setRemoteSwitch_result() {
  }

  virtual ~SGAgent_setRemoteSwitch_result() throw() {}

  SwitchResponse success;

  _SGAgent_setRemoteSwitch_result__isset __isset;

  void __set_success(const SwitchResponse& val) {
    success = val;
  }

  bool operator == (const SGAgent_setRemoteSwitch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_setRemoteSwitch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_setRemoteSwitch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_setRemoteSwitch_presult__isset {
  _SGAgent_setRemoteSwitch_presult__isset() : success(false) {}
  bool success;
} _SGAgent_setRemoteSwitch_presult__isset;

class SGAgent_setRemoteSwitch_presult {
 public:


  virtual ~SGAgent_setRemoteSwitch_presult() throw() {}

  SwitchResponse* success;

  _SGAgent_setRemoteSwitch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgent_shutdown_args__isset {
  _SGAgent_shutdown_args__isset() : verifyCode(false) {}
  bool verifyCode;
} _SGAgent_shutdown_args__isset;

class SGAgent_shutdown_args {
 public:

  SGAgent_shutdown_args() : verifyCode("") {
  }

  virtual ~SGAgent_shutdown_args() throw() {}

  std::string verifyCode;

  _SGAgent_shutdown_args__isset __isset;

  void __set_verifyCode(const std::string& val) {
    verifyCode = val;
  }

  bool operator == (const SGAgent_shutdown_args & rhs) const
  {
    if (!(verifyCode == rhs.verifyCode))
      return false;
    return true;
  }
  bool operator != (const SGAgent_shutdown_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_shutdown_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgent_shutdown_pargs {
 public:


  virtual ~SGAgent_shutdown_pargs() throw() {}

  const std::string* verifyCode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_shutdown_result__isset {
  _SGAgent_shutdown_result__isset() : success(false) {}
  bool success;
} _SGAgent_shutdown_result__isset;

class SGAgent_shutdown_result {
 public:

  SGAgent_shutdown_result() : success(0) {
  }

  virtual ~SGAgent_shutdown_result() throw() {}

  bool success;

  _SGAgent_shutdown_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const SGAgent_shutdown_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgent_shutdown_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgent_shutdown_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgent_shutdown_presult__isset {
  _SGAgent_shutdown_presult__isset() : success(false) {}
  bool success;
} _SGAgent_shutdown_presult__isset;

class SGAgent_shutdown_presult {
 public:


  virtual ~SGAgent_shutdown_presult() throw() {}

  bool* success;

  _SGAgent_shutdown_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SGAgentClient : virtual public SGAgentIf {
 public:
  SGAgentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  SGAgentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getAppkeyDesc(AppkeyDescResponse& _return, const std::string& appkey);
  void send_getAppkeyDesc(const std::string& appkey);
  void recv_getAppkeyDesc(AppkeyDescResponse& _return);
  void getServiceListByProtocol(ProtocolResponse& _return, const ProtocolRequest& req);
  void send_getServiceListByProtocol(const ProtocolRequest& req);
  void recv_getServiceListByProtocol(ProtocolResponse& _return);
  void getOriginServiceList(ProtocolResponse& _return, const ProtocolRequest& req);
  void send_getOriginServiceList(const ProtocolRequest& req);
  void recv_getOriginServiceList(ProtocolResponse& _return);
  void getServiceListWithZKFweight(ProtocolResponse& _return, const ProtocolRequest& req);
  void send_getServiceListWithZKFweight(const ProtocolRequest& req);
  void recv_getServiceListWithZKFweight(ProtocolResponse& _return);
  void getServiceList(std::vector<SGService> & _return, const std::string& localAppkey, const std::string& remoteAppkey);
  void send_getServiceList(const std::string& localAppkey, const std::string& remoteAppkey);
  void recv_getServiceList(std::vector<SGService> & _return);
  void getHttpServiceList(std::vector<SGService> & _return, const std::string& localAppkey, const std::string& remoteAppkey);
  void send_getHttpServiceList(const std::string& localAppkey, const std::string& remoteAppkey);
  void recv_getHttpServiceList(std::vector<SGService> & _return);
  void getAppKeyListByBusinessLine(std::vector<std::string> & _return, const int32_t businessLineCode);
  void send_getAppKeyListByBusinessLine(const int32_t businessLineCode);
  void recv_getAppKeyListByBusinessLine(std::vector<std::string> & _return);
  void getService(SGService& _return, const std::string& localAppkey, const std::string& remoteAppkey, const int32_t strategy);
  void send_getService(const std::string& localAppkey, const std::string& remoteAppkey, const int32_t strategy);
  void recv_getService(SGService& _return);
  int32_t registService(const SGService& oService);
  void send_registService(const SGService& oService);
  int32_t recv_registService();
  int32_t registServicewithCmd(const int32_t uptCmd, const SGService& oService);
  void send_registServicewithCmd(const int32_t uptCmd, const SGService& oService);
  int32_t recv_registServicewithCmd();
  int32_t unRegistService(const SGService& oService);
  void send_unRegistService(const SGService& oService);
  int32_t recv_unRegistService();
  int32_t updateConfig(const ConfigUpdateRequest& request);
  void send_updateConfig(const ConfigUpdateRequest& request);
  int32_t recv_updateConfig();
  void getConfig(std::string& _return, const proc_conf_param_t& node);
  void send_getConfig(const proc_conf_param_t& node);
  void recv_getConfig(std::string& _return);
  int32_t setConfig(const proc_conf_param_t& conf);
  void send_setConfig(const proc_conf_param_t& conf);
  int32_t recv_setConfig();
  void getFileConfig(file_param_t& _return, const file_param_t& file);
  void send_getFileConfig(const file_param_t& file);
  void recv_getFileConfig(file_param_t& _return);
  int32_t notifyFileConfigIssued(const file_param_t& files);
  void send_notifyFileConfigIssued(const file_param_t& files);
  int32_t recv_notifyFileConfigIssued();
  int32_t notifyFileConfigWork(const file_param_t& files);
  void send_notifyFileConfigWork(const file_param_t& files);
  int32_t recv_notifyFileConfigWork();
  void getLocalConfig(std::string& _return, const std::string& localAppkey, const std::string& ip);
  void send_getLocalConfig(const std::string& localAppkey, const std::string& ip);
  void recv_getLocalConfig(std::string& _return);
  int32_t uploadLog(const SGLog& oLog);
  void send_uploadLog(const SGLog& oLog);
  int32_t recv_uploadLog();
  int32_t uploadCommonLog(const CommonLog& oCommonLog);
  void send_uploadCommonLog(const CommonLog& oCommonLog);
  int32_t recv_uploadCommonLog();
  int32_t uploadModuleInvoke(const SGModuleInvokeInfo& oInfo);
  void send_uploadModuleInvoke(const SGModuleInvokeInfo& oInfo);
  int32_t recv_uploadModuleInvoke();
  void getDegradeActions(std::vector<DegradeAction> & _return, const std::string& localAppkey, const std::string& remoteAppkey);
  void send_getDegradeActions(const std::string& localAppkey, const std::string& remoteAppkey);
  void recv_getDegradeActions(std::vector<DegradeAction> & _return);
  void getZabbixInfo(ZabbixSelfCheck& _return);
  void send_getZabbixInfo();
  void recv_getZabbixInfo(ZabbixSelfCheck& _return);
  void getAuthorizedConsumers(std::string& _return, const std::string& targetAppkey);
  void send_getAuthorizedConsumers(const std::string& targetAppkey);
  void recv_getAuthorizedConsumers(std::string& _return);
  void getAuthorizedProviders(std::string& _return, const std::string& targetAppkey);
  void send_getAuthorizedProviders(const std::string& targetAppkey);
  void recv_getAuthorizedProviders(std::string& _return);
  void getHttpPropertiesByBusinessLine(std::map<std::string, HttpProperties> & _return, const int32_t bizCode);
  void send_getHttpPropertiesByBusinessLine(const int32_t bizCode);
  void recv_getHttpPropertiesByBusinessLine(std::map<std::string, HttpProperties> & _return);
  void getHttpPropertiesByAppkey(std::map<std::string, HttpProperties> & _return, const std::string& appkey);
  void send_getHttpPropertiesByAppkey(const std::string& appkey);
  void recv_getHttpPropertiesByAppkey(std::map<std::string, HttpProperties> & _return);
  bool switchEnv(const std::string& env, const std::string& verifyCode);
  void send_switchEnv(const std::string& env, const std::string& verifyCode);
  bool recv_switchEnv();
  void getName(std::string& _return);
  void send_getName();
  void recv_getName(std::string& _return);
  void getVersion(std::string& _return);
  void send_getVersion();
  void recv_getVersion(std::string& _return);
  int32_t getEnv();
  void send_getEnv();
  int32_t recv_getEnv();
  sg_fb_status getStatus();
  void send_getStatus();
  sg_fb_status recv_getStatus();
  void getStatusDetails(std::string& _return);
  void send_getStatusDetails();
  void recv_getStatusDetails(std::string& _return);
  void getCounters(std::map<std::string, int64_t> & _return);
  void send_getCounters();
  void recv_getCounters(std::map<std::string, int64_t> & _return);
  int64_t getCounter(const std::string& key);
  void send_getCounter(const std::string& key);
  int64_t recv_getCounter();
  void setOption(const std::string& key, const std::string& value);
  void send_setOption(const std::string& key, const std::string& value);
  void recv_setOption();
  void getOption(std::string& _return, const std::string& key);
  void send_getOption(const std::string& key);
  void recv_getOption(std::string& _return);
  void getOptions(std::map<std::string, std::string> & _return);
  void send_getOptions();
  void recv_getOptions(std::map<std::string, std::string> & _return);
  void getCpuProfile(std::string& _return, const int32_t profileDurationInSec);
  void send_getCpuProfile(const int32_t profileDurationInSec);
  void recv_getCpuProfile(std::string& _return);
  int64_t aliveSince();
  void send_aliveSince();
  int64_t recv_aliveSince();
  void reinitialize();
  void send_reinitialize();
  void setRemoteSwitch(SwitchResponse& _return, const SwitchRequest& req);
  void send_setRemoteSwitch(const SwitchRequest& req);
  void recv_setRemoteSwitch(SwitchResponse& _return);
  bool shutdown(const std::string& verifyCode);
  void send_shutdown(const std::string& verifyCode);
  bool recv_shutdown();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SGAgentProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<SGAgentIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (SGAgentProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_getAppkeyDesc(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getServiceListByProtocol(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getOriginServiceList(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getServiceListWithZKFweight(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getServiceList(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getHttpServiceList(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAppKeyListByBusinessLine(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getService(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registService(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registServicewithCmd(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unRegistService(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateConfig(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getConfig(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setConfig(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFileConfig(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_notifyFileConfigIssued(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_notifyFileConfigWork(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getLocalConfig(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_uploadLog(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_uploadCommonLog(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_uploadModuleInvoke(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDegradeActions(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getZabbixInfo(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAuthorizedConsumers(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAuthorizedProviders(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getHttpPropertiesByBusinessLine(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getHttpPropertiesByAppkey(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_switchEnv(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getName(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getVersion(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getEnv(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getStatus(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getStatusDetails(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCounters(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCounter(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setOption(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getOption(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getOptions(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCpuProfile(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_aliveSince(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reinitialize(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setRemoteSwitch(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_shutdown(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SGAgentProcessor(boost::shared_ptr<SGAgentIf> iface) :
    iface_(iface) {
    processMap_["getAppkeyDesc"] = &SGAgentProcessor::process_getAppkeyDesc;
    processMap_["getServiceListByProtocol"] = &SGAgentProcessor::process_getServiceListByProtocol;
    processMap_["getOriginServiceList"] = &SGAgentProcessor::process_getOriginServiceList;
    processMap_["getServiceListWithZKFweight"] = &SGAgentProcessor::process_getServiceListWithZKFweight;
    processMap_["getServiceList"] = &SGAgentProcessor::process_getServiceList;
    processMap_["getHttpServiceList"] = &SGAgentProcessor::process_getHttpServiceList;
    processMap_["getAppKeyListByBusinessLine"] = &SGAgentProcessor::process_getAppKeyListByBusinessLine;
    processMap_["getService"] = &SGAgentProcessor::process_getService;
    processMap_["registService"] = &SGAgentProcessor::process_registService;
    processMap_["registServicewithCmd"] = &SGAgentProcessor::process_registServicewithCmd;
    processMap_["unRegistService"] = &SGAgentProcessor::process_unRegistService;
    processMap_["updateConfig"] = &SGAgentProcessor::process_updateConfig;
    processMap_["getConfig"] = &SGAgentProcessor::process_getConfig;
    processMap_["setConfig"] = &SGAgentProcessor::process_setConfig;
    processMap_["getFileConfig"] = &SGAgentProcessor::process_getFileConfig;
    processMap_["notifyFileConfigIssued"] = &SGAgentProcessor::process_notifyFileConfigIssued;
    processMap_["notifyFileConfigWork"] = &SGAgentProcessor::process_notifyFileConfigWork;
    processMap_["getLocalConfig"] = &SGAgentProcessor::process_getLocalConfig;
    processMap_["uploadLog"] = &SGAgentProcessor::process_uploadLog;
    processMap_["uploadCommonLog"] = &SGAgentProcessor::process_uploadCommonLog;
    processMap_["uploadModuleInvoke"] = &SGAgentProcessor::process_uploadModuleInvoke;
    processMap_["getDegradeActions"] = &SGAgentProcessor::process_getDegradeActions;
    processMap_["getZabbixInfo"] = &SGAgentProcessor::process_getZabbixInfo;
    processMap_["getAuthorizedConsumers"] = &SGAgentProcessor::process_getAuthorizedConsumers;
    processMap_["getAuthorizedProviders"] = &SGAgentProcessor::process_getAuthorizedProviders;
    processMap_["getHttpPropertiesByBusinessLine"] = &SGAgentProcessor::process_getHttpPropertiesByBusinessLine;
    processMap_["getHttpPropertiesByAppkey"] = &SGAgentProcessor::process_getHttpPropertiesByAppkey;
    processMap_["switchEnv"] = &SGAgentProcessor::process_switchEnv;
    processMap_["getName"] = &SGAgentProcessor::process_getName;
    processMap_["getVersion"] = &SGAgentProcessor::process_getVersion;
    processMap_["getEnv"] = &SGAgentProcessor::process_getEnv;
    processMap_["getStatus"] = &SGAgentProcessor::process_getStatus;
    processMap_["getStatusDetails"] = &SGAgentProcessor::process_getStatusDetails;
    processMap_["getCounters"] = &SGAgentProcessor::process_getCounters;
    processMap_["getCounter"] = &SGAgentProcessor::process_getCounter;
    processMap_["setOption"] = &SGAgentProcessor::process_setOption;
    processMap_["getOption"] = &SGAgentProcessor::process_getOption;
    processMap_["getOptions"] = &SGAgentProcessor::process_getOptions;
    processMap_["getCpuProfile"] = &SGAgentProcessor::process_getCpuProfile;
    processMap_["aliveSince"] = &SGAgentProcessor::process_aliveSince;
    processMap_["reinitialize"] = &SGAgentProcessor::process_reinitialize;
    processMap_["setRemoteSwitch"] = &SGAgentProcessor::process_setRemoteSwitch;
    processMap_["shutdown"] = &SGAgentProcessor::process_shutdown;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~SGAgentProcessor() {}
};

class SGAgentProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SGAgentProcessorFactory(const ::boost::shared_ptr< SGAgentIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SGAgentIfFactory > handlerFactory_;
};

class SGAgentMultiface : virtual public SGAgentIf {
 public:
  SGAgentMultiface(std::vector<boost::shared_ptr<SGAgentIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SGAgentMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SGAgentIf> > ifaces_;
  SGAgentMultiface() {}
  void add(boost::shared_ptr<SGAgentIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getAppkeyDesc(AppkeyDescResponse& _return, const std::string& appkey) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getAppkeyDesc(_return, appkey);
        return;
      } else {
        ifaces_[i]->getAppkeyDesc(_return, appkey);
      }
    }
  }

  void getServiceListByProtocol(ProtocolResponse& _return, const ProtocolRequest& req) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getServiceListByProtocol(_return, req);
        return;
      } else {
        ifaces_[i]->getServiceListByProtocol(_return, req);
      }
    }
  }

  void getOriginServiceList(ProtocolResponse& _return, const ProtocolRequest& req) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getOriginServiceList(_return, req);
        return;
      } else {
        ifaces_[i]->getOriginServiceList(_return, req);
      }
    }
  }

  void getServiceListWithZKFweight(ProtocolResponse& _return, const ProtocolRequest& req) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getServiceListWithZKFweight(_return, req);
        return;
      } else {
        ifaces_[i]->getServiceListWithZKFweight(_return, req);
      }
    }
  }

  void getServiceList(std::vector<SGService> & _return, const std::string& localAppkey, const std::string& remoteAppkey) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getServiceList(_return, localAppkey, remoteAppkey);
        return;
      } else {
        ifaces_[i]->getServiceList(_return, localAppkey, remoteAppkey);
      }
    }
  }

  void getHttpServiceList(std::vector<SGService> & _return, const std::string& localAppkey, const std::string& remoteAppkey) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getHttpServiceList(_return, localAppkey, remoteAppkey);
        return;
      } else {
        ifaces_[i]->getHttpServiceList(_return, localAppkey, remoteAppkey);
      }
    }
  }

  void getAppKeyListByBusinessLine(std::vector<std::string> & _return, const int32_t businessLineCode) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getAppKeyListByBusinessLine(_return, businessLineCode);
        return;
      } else {
        ifaces_[i]->getAppKeyListByBusinessLine(_return, businessLineCode);
      }
    }
  }

  void getService(SGService& _return, const std::string& localAppkey, const std::string& remoteAppkey, const int32_t strategy) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getService(_return, localAppkey, remoteAppkey, strategy);
        return;
      } else {
        ifaces_[i]->getService(_return, localAppkey, remoteAppkey, strategy);
      }
    }
  }

  int32_t registService(const SGService& oService) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->registService(oService);
      } else {
        ifaces_[i]->registService(oService);
      }
    }
  }

  int32_t registServicewithCmd(const int32_t uptCmd, const SGService& oService) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->registServicewithCmd(uptCmd, oService);
      } else {
        ifaces_[i]->registServicewithCmd(uptCmd, oService);
      }
    }
  }

  int32_t unRegistService(const SGService& oService) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->unRegistService(oService);
      } else {
        ifaces_[i]->unRegistService(oService);
      }
    }
  }

  int32_t updateConfig(const ConfigUpdateRequest& request) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->updateConfig(request);
      } else {
        ifaces_[i]->updateConfig(request);
      }
    }
  }

  void getConfig(std::string& _return, const proc_conf_param_t& node) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getConfig(_return, node);
        return;
      } else {
        ifaces_[i]->getConfig(_return, node);
      }
    }
  }

  int32_t setConfig(const proc_conf_param_t& conf) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->setConfig(conf);
      } else {
        ifaces_[i]->setConfig(conf);
      }
    }
  }

  void getFileConfig(file_param_t& _return, const file_param_t& file) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getFileConfig(_return, file);
        return;
      } else {
        ifaces_[i]->getFileConfig(_return, file);
      }
    }
  }

  int32_t notifyFileConfigIssued(const file_param_t& files) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->notifyFileConfigIssued(files);
      } else {
        ifaces_[i]->notifyFileConfigIssued(files);
      }
    }
  }

  int32_t notifyFileConfigWork(const file_param_t& files) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->notifyFileConfigWork(files);
      } else {
        ifaces_[i]->notifyFileConfigWork(files);
      }
    }
  }

  void getLocalConfig(std::string& _return, const std::string& localAppkey, const std::string& ip) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getLocalConfig(_return, localAppkey, ip);
        return;
      } else {
        ifaces_[i]->getLocalConfig(_return, localAppkey, ip);
      }
    }
  }

  int32_t uploadLog(const SGLog& oLog) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->uploadLog(oLog);
      } else {
        ifaces_[i]->uploadLog(oLog);
      }
    }
  }

  int32_t uploadCommonLog(const CommonLog& oCommonLog) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->uploadCommonLog(oCommonLog);
      } else {
        ifaces_[i]->uploadCommonLog(oCommonLog);
      }
    }
  }

  int32_t uploadModuleInvoke(const SGModuleInvokeInfo& oInfo) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->uploadModuleInvoke(oInfo);
      } else {
        ifaces_[i]->uploadModuleInvoke(oInfo);
      }
    }
  }

  void getDegradeActions(std::vector<DegradeAction> & _return, const std::string& localAppkey, const std::string& remoteAppkey) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getDegradeActions(_return, localAppkey, remoteAppkey);
        return;
      } else {
        ifaces_[i]->getDegradeActions(_return, localAppkey, remoteAppkey);
      }
    }
  }

  void getZabbixInfo(ZabbixSelfCheck& _return) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getZabbixInfo(_return);
        return;
      } else {
        ifaces_[i]->getZabbixInfo(_return);
      }
    }
  }

  void getAuthorizedConsumers(std::string& _return, const std::string& targetAppkey) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getAuthorizedConsumers(_return, targetAppkey);
        return;
      } else {
        ifaces_[i]->getAuthorizedConsumers(_return, targetAppkey);
      }
    }
  }

  void getAuthorizedProviders(std::string& _return, const std::string& targetAppkey) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getAuthorizedProviders(_return, targetAppkey);
        return;
      } else {
        ifaces_[i]->getAuthorizedProviders(_return, targetAppkey);
      }
    }
  }

  void getHttpPropertiesByBusinessLine(std::map<std::string, HttpProperties> & _return, const int32_t bizCode) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getHttpPropertiesByBusinessLine(_return, bizCode);
        return;
      } else {
        ifaces_[i]->getHttpPropertiesByBusinessLine(_return, bizCode);
      }
    }
  }

  void getHttpPropertiesByAppkey(std::map<std::string, HttpProperties> & _return, const std::string& appkey) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getHttpPropertiesByAppkey(_return, appkey);
        return;
      } else {
        ifaces_[i]->getHttpPropertiesByAppkey(_return, appkey);
      }
    }
  }

  bool switchEnv(const std::string& env, const std::string& verifyCode) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->switchEnv(env, verifyCode);
      } else {
        ifaces_[i]->switchEnv(env, verifyCode);
      }
    }
  }

  void getName(std::string& _return) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getName(_return);
        return;
      } else {
        ifaces_[i]->getName(_return);
      }
    }
  }

  void getVersion(std::string& _return) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getVersion(_return);
        return;
      } else {
        ifaces_[i]->getVersion(_return);
      }
    }
  }

  int32_t getEnv() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->getEnv();
      } else {
        ifaces_[i]->getEnv();
      }
    }
  }

  sg_fb_status getStatus() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->getStatus();
      } else {
        ifaces_[i]->getStatus();
      }
    }
  }

  void getStatusDetails(std::string& _return) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getStatusDetails(_return);
        return;
      } else {
        ifaces_[i]->getStatusDetails(_return);
      }
    }
  }

  void getCounters(std::map<std::string, int64_t> & _return) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getCounters(_return);
        return;
      } else {
        ifaces_[i]->getCounters(_return);
      }
    }
  }

  int64_t getCounter(const std::string& key) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->getCounter(key);
      } else {
        ifaces_[i]->getCounter(key);
      }
    }
  }

  void setOption(const std::string& key, const std::string& value) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->setOption(key, value);
    }
  }

  void getOption(std::string& _return, const std::string& key) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getOption(_return, key);
        return;
      } else {
        ifaces_[i]->getOption(_return, key);
      }
    }
  }

  void getOptions(std::map<std::string, std::string> & _return) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getOptions(_return);
        return;
      } else {
        ifaces_[i]->getOptions(_return);
      }
    }
  }

  void getCpuProfile(std::string& _return, const int32_t profileDurationInSec) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getCpuProfile(_return, profileDurationInSec);
        return;
      } else {
        ifaces_[i]->getCpuProfile(_return, profileDurationInSec);
      }
    }
  }

  int64_t aliveSince() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->aliveSince();
      } else {
        ifaces_[i]->aliveSince();
      }
    }
  }

  void reinitialize() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->reinitialize();
    }
  }

  void setRemoteSwitch(SwitchResponse& _return, const SwitchRequest& req) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->setRemoteSwitch(_return, req);
        return;
      } else {
        ifaces_[i]->setRemoteSwitch(_return, req);
      }
    }
  }

  bool shutdown(const std::string& verifyCode) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->shutdown(verifyCode);
      } else {
        ifaces_[i]->shutdown(verifyCode);
      }
    }
  }

};



#endif
