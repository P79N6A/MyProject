/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SGAgentWorker_H
#define SGAgentWorker_H

#include <TProcessor.h>
#include "sg_worker_service_types.h"

namespace com { namespace sankuai { namespace cmtrace {

class SGAgentWorkerIf {
 public:
  virtual ~SGAgentWorkerIf() {}
  virtual void setRemoteSwitch(SwitchResponse& _return, const SwitchRequest& req) = 0;
  virtual bool shutdown(const std::string& verifyCode) = 0;
};

class SGAgentWorkerIfFactory {
 public:
  typedef SGAgentWorkerIf Handler;

  virtual ~SGAgentWorkerIfFactory() {}

  virtual SGAgentWorkerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SGAgentWorkerIf* /* handler */) = 0;
};

class SGAgentWorkerIfSingletonFactory : virtual public SGAgentWorkerIfFactory {
 public:
  SGAgentWorkerIfSingletonFactory(const boost::shared_ptr<SGAgentWorkerIf>& iface) : iface_(iface) {}
  virtual ~SGAgentWorkerIfSingletonFactory() {}

  virtual SGAgentWorkerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SGAgentWorkerIf* /* handler */) {}

 protected:
  boost::shared_ptr<SGAgentWorkerIf> iface_;
};

class SGAgentWorkerNull : virtual public SGAgentWorkerIf {
 public:
  virtual ~SGAgentWorkerNull() {}
  void setRemoteSwitch(SwitchResponse& /* _return */, const SwitchRequest& /* req */) {
    return;
  }
  bool shutdown(const std::string& /* verifyCode */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _SGAgentWorker_setRemoteSwitch_args__isset {
  _SGAgentWorker_setRemoteSwitch_args__isset() : req(false) {}
  bool req;
} _SGAgentWorker_setRemoteSwitch_args__isset;

class SGAgentWorker_setRemoteSwitch_args {
 public:

  SGAgentWorker_setRemoteSwitch_args() {
  }

  virtual ~SGAgentWorker_setRemoteSwitch_args() throw() {}

  SwitchRequest req;

  _SGAgentWorker_setRemoteSwitch_args__isset __isset;

  void __set_req(const SwitchRequest& val) {
    req = val;
  }

  bool operator == (const SGAgentWorker_setRemoteSwitch_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const SGAgentWorker_setRemoteSwitch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgentWorker_setRemoteSwitch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgentWorker_setRemoteSwitch_pargs {
 public:


  virtual ~SGAgentWorker_setRemoteSwitch_pargs() throw() {}

  const SwitchRequest* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgentWorker_setRemoteSwitch_result__isset {
  _SGAgentWorker_setRemoteSwitch_result__isset() : success(false) {}
  bool success;
} _SGAgentWorker_setRemoteSwitch_result__isset;

class SGAgentWorker_setRemoteSwitch_result {
 public:

  SGAgentWorker_setRemoteSwitch_result() {
  }

  virtual ~SGAgentWorker_setRemoteSwitch_result() throw() {}

  SwitchResponse success;

  _SGAgentWorker_setRemoteSwitch_result__isset __isset;

  void __set_success(const SwitchResponse& val) {
    success = val;
  }

  bool operator == (const SGAgentWorker_setRemoteSwitch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgentWorker_setRemoteSwitch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgentWorker_setRemoteSwitch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgentWorker_setRemoteSwitch_presult__isset {
  _SGAgentWorker_setRemoteSwitch_presult__isset() : success(false) {}
  bool success;
} _SGAgentWorker_setRemoteSwitch_presult__isset;

class SGAgentWorker_setRemoteSwitch_presult {
 public:


  virtual ~SGAgentWorker_setRemoteSwitch_presult() throw() {}

  SwitchResponse* success;

  _SGAgentWorker_setRemoteSwitch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SGAgentWorker_shutdown_args__isset {
  _SGAgentWorker_shutdown_args__isset() : verifyCode(false) {}
  bool verifyCode;
} _SGAgentWorker_shutdown_args__isset;

class SGAgentWorker_shutdown_args {
 public:

  SGAgentWorker_shutdown_args() : verifyCode("") {
  }

  virtual ~SGAgentWorker_shutdown_args() throw() {}

  std::string verifyCode;

  _SGAgentWorker_shutdown_args__isset __isset;

  void __set_verifyCode(const std::string& val) {
    verifyCode = val;
  }

  bool operator == (const SGAgentWorker_shutdown_args & rhs) const
  {
    if (!(verifyCode == rhs.verifyCode))
      return false;
    return true;
  }
  bool operator != (const SGAgentWorker_shutdown_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgentWorker_shutdown_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SGAgentWorker_shutdown_pargs {
 public:


  virtual ~SGAgentWorker_shutdown_pargs() throw() {}

  const std::string* verifyCode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgentWorker_shutdown_result__isset {
  _SGAgentWorker_shutdown_result__isset() : success(false) {}
  bool success;
} _SGAgentWorker_shutdown_result__isset;

class SGAgentWorker_shutdown_result {
 public:

  SGAgentWorker_shutdown_result() : success(0) {
  }

  virtual ~SGAgentWorker_shutdown_result() throw() {}

  bool success;

  _SGAgentWorker_shutdown_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const SGAgentWorker_shutdown_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SGAgentWorker_shutdown_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGAgentWorker_shutdown_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGAgentWorker_shutdown_presult__isset {
  _SGAgentWorker_shutdown_presult__isset() : success(false) {}
  bool success;
} _SGAgentWorker_shutdown_presult__isset;

class SGAgentWorker_shutdown_presult {
 public:


  virtual ~SGAgentWorker_shutdown_presult() throw() {}

  bool* success;

  _SGAgentWorker_shutdown_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SGAgentWorkerClient : virtual public SGAgentWorkerIf {
 public:
  SGAgentWorkerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  SGAgentWorkerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void setRemoteSwitch(SwitchResponse& _return, const SwitchRequest& req);
  void send_setRemoteSwitch(const SwitchRequest& req);
  void recv_setRemoteSwitch(SwitchResponse& _return);
  bool shutdown(const std::string& verifyCode);
  void send_shutdown(const std::string& verifyCode);
  bool recv_shutdown();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SGAgentWorkerProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<SGAgentWorkerIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (SGAgentWorkerProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_setRemoteSwitch(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_shutdown(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SGAgentWorkerProcessor(boost::shared_ptr<SGAgentWorkerIf> iface) :
    iface_(iface) {
    processMap_["setRemoteSwitch"] = &SGAgentWorkerProcessor::process_setRemoteSwitch;
    processMap_["shutdown"] = &SGAgentWorkerProcessor::process_shutdown;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~SGAgentWorkerProcessor() {}
};

class SGAgentWorkerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SGAgentWorkerProcessorFactory(const ::boost::shared_ptr< SGAgentWorkerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SGAgentWorkerIfFactory > handlerFactory_;
};

class SGAgentWorkerMultiface : virtual public SGAgentWorkerIf {
 public:
  SGAgentWorkerMultiface(std::vector<boost::shared_ptr<SGAgentWorkerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SGAgentWorkerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SGAgentWorkerIf> > ifaces_;
  SGAgentWorkerMultiface() {}
  void add(boost::shared_ptr<SGAgentWorkerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void setRemoteSwitch(SwitchResponse& _return, const SwitchRequest& req) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->setRemoteSwitch(_return, req);
        return;
      } else {
        ifaces_[i]->setRemoteSwitch(_return, req);
      }
    }
  }

  bool shutdown(const std::string& verifyCode) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->shutdown(verifyCode);
      } else {
        ifaces_[i]->shutdown(verifyCode);
      }
    }
  }

};

}}} // namespace

#endif
