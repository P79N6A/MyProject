/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef idc_TYPES_H
#define idc_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace com { namespace sankuai { namespace cmtrace {

typedef struct _Idc__isset {
  _Idc__isset() : region(false), idc(false), center(false) {}
  bool region;
  bool idc;
  bool center;
} _Idc__isset;

class Idc {
 public:

  static const char* ascii_fingerprint; // = "F4A50F0EC638C7F66026F9B6678FD89B";
  static const uint8_t binary_fingerprint[16]; // = {0xF4,0xA5,0x0F,0x0E,0xC6,0x38,0xC7,0xF6,0x60,0x26,0xF9,0xB6,0x67,0x8F,0xD8,0x9B};

  Idc() : region(""), idc(""), center("") {
  }

  virtual ~Idc() throw() {}

  std::string region;
  std::string idc;
  std::string center;

  _Idc__isset __isset;

  void __set_region(const std::string& val) {
    region = val;
  }

  void __set_idc(const std::string& val) {
    idc = val;
  }

  void __set_center(const std::string& val) {
    center = val;
    __isset.center = true;
  }

  bool operator == (const Idc & rhs) const
  {
    if (!(region == rhs.region))
      return false;
    if (!(idc == rhs.idc))
      return false;
    if (__isset.center != rhs.__isset.center)
      return false;
    else if (__isset.center && !(center == rhs.center))
      return false;
    return true;
  }
  bool operator != (const Idc &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Idc & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

}}} // namespace

#endif
