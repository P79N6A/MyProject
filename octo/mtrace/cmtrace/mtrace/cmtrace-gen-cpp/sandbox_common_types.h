/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef sandbox_common_TYPES_H
#define sandbox_common_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace com { namespace sankuai { namespace cmtrace {

typedef struct _SandboxConfig__isset {
  _SandboxConfig__isset() : appkey(false), ips(false) {}
  bool appkey;
  bool ips;
} _SandboxConfig__isset;

class SandboxConfig {
 public:

  static const char* ascii_fingerprint; // = "25702B8D5E28AA39160F267DABBC8446";
  static const uint8_t binary_fingerprint[16]; // = {0x25,0x70,0x2B,0x8D,0x5E,0x28,0xAA,0x39,0x16,0x0F,0x26,0x7D,0xAB,0xBC,0x84,0x46};

  SandboxConfig() : appkey("") {
  }

  virtual ~SandboxConfig() throw() {}

  std::string appkey;
  std::vector<std::string>  ips;

  _SandboxConfig__isset __isset;

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_ips(const std::vector<std::string> & val) {
    ips = val;
  }

  bool operator == (const SandboxConfig & rhs) const
  {
    if (!(appkey == rhs.appkey))
      return false;
    if (!(ips == rhs.ips))
      return false;
    return true;
  }
  bool operator != (const SandboxConfig &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SandboxConfig & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Sandbox__isset {
  _Sandbox__isset() : id(false), name(false), env(false), status(false), access(false), services(false), whiteList(false), createTime(false), updateTime(false), reserved(false) {}
  bool id;
  bool name;
  bool env;
  bool status;
  bool access;
  bool services;
  bool whiteList;
  bool createTime;
  bool updateTime;
  bool reserved;
} _Sandbox__isset;

class Sandbox {
 public:

  static const char* ascii_fingerprint; // = "FAB518702F3249536A8F150825699814";
  static const uint8_t binary_fingerprint[16]; // = {0xFA,0xB5,0x18,0x70,0x2F,0x32,0x49,0x53,0x6A,0x8F,0x15,0x08,0x25,0x69,0x98,0x14};

  Sandbox() : id(""), name(""), env(0), status(0), access(0), createTime(0), updateTime(0), reserved("") {
  }

  virtual ~Sandbox() throw() {}

  std::string id;
  std::string name;
  int32_t env;
  int32_t status;
  int32_t access;
  std::vector<SandboxConfig>  services;
  std::vector<SandboxConfig>  whiteList;
  int32_t createTime;
  int32_t updateTime;
  std::string reserved;

  _Sandbox__isset __isset;

  void __set_id(const std::string& val) {
    id = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_env(const int32_t val) {
    env = val;
  }

  void __set_status(const int32_t val) {
    status = val;
  }

  void __set_access(const int32_t val) {
    access = val;
  }

  void __set_services(const std::vector<SandboxConfig> & val) {
    services = val;
  }

  void __set_whiteList(const std::vector<SandboxConfig> & val) {
    whiteList = val;
  }

  void __set_createTime(const int32_t val) {
    createTime = val;
  }

  void __set_updateTime(const int32_t val) {
    updateTime = val;
  }

  void __set_reserved(const std::string& val) {
    reserved = val;
  }

  bool operator == (const Sandbox & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(env == rhs.env))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(access == rhs.access))
      return false;
    if (!(services == rhs.services))
      return false;
    if (!(whiteList == rhs.whiteList))
      return false;
    if (!(createTime == rhs.createTime))
      return false;
    if (!(updateTime == rhs.updateTime))
      return false;
    if (!(reserved == rhs.reserved))
      return false;
    return true;
  }
  bool operator != (const Sandbox &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Sandbox & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SandboxData__isset {
  _SandboxData__isset() : sandbox(false), version(false) {}
  bool sandbox;
  bool version;
} _SandboxData__isset;

class SandboxData {
 public:

  static const char* ascii_fingerprint; // = "45AD5397FAAB38A666EABDA805D589CC";
  static const uint8_t binary_fingerprint[16]; // = {0x45,0xAD,0x53,0x97,0xFA,0xAB,0x38,0xA6,0x66,0xEA,0xBD,0xA8,0x05,0xD5,0x89,0xCC};

  SandboxData() : version("") {
  }

  virtual ~SandboxData() throw() {}

  Sandbox sandbox;
  std::string version;

  _SandboxData__isset __isset;

  void __set_sandbox(const Sandbox& val) {
    sandbox = val;
  }

  void __set_version(const std::string& val) {
    version = val;
  }

  bool operator == (const SandboxData & rhs) const
  {
    if (!(sandbox == rhs.sandbox))
      return false;
    if (!(version == rhs.version))
      return false;
    return true;
  }
  bool operator != (const SandboxData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SandboxData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SandboxResponse__isset {
  _SandboxResponse__isset() : sandboxList(false) {}
  bool sandboxList;
} _SandboxResponse__isset;

class SandboxResponse {
 public:

  static const char* ascii_fingerprint; // = "A25F458DD14FB7DB83D264EBD51BDCFC";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0x5F,0x45,0x8D,0xD1,0x4F,0xB7,0xDB,0x83,0xD2,0x64,0xEB,0xD5,0x1B,0xDC,0xFC};

  SandboxResponse() : code(200) {
  }

  virtual ~SandboxResponse() throw() {}

  int32_t code;
  std::vector<SandboxData>  sandboxList;

  _SandboxResponse__isset __isset;

  void __set_code(const int32_t val) {
    code = val;
  }

  void __set_sandboxList(const std::vector<SandboxData> & val) {
    sandboxList = val;
    __isset.sandboxList = true;
  }

  bool operator == (const SandboxResponse & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (__isset.sandboxList != rhs.__isset.sandboxList)
      return false;
    else if (__isset.sandboxList && !(sandboxList == rhs.sandboxList))
      return false;
    return true;
  }
  bool operator != (const SandboxResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SandboxResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

}}} // namespace

#endif
