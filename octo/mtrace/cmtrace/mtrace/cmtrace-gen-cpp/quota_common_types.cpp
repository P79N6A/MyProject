/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "quota_common_types.h"

namespace com { namespace sankuai { namespace cmtrace {

int _kDegradeStatusValues[] = {
  DegradeStatus::ENABLE,
  DegradeStatus::DISABLE
};
const char* _kDegradeStatusNames[] = {
  "ENABLE",
  "DISABLE"
};
const std::map<int, const char*> _DegradeStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kDegradeStatusValues, _kDegradeStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kAlarmStatusValues[] = {
  AlarmStatus::ENABLE,
  AlarmStatus::DISABLE
};
const char* _kAlarmStatusNames[] = {
  "ENABLE",
  "DISABLE"
};
const std::map<int, const char*> _AlarmStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kAlarmStatusValues, _kAlarmStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kDegradeStrategyValues[] = {
  DegradeStrategy::DROP,
  DegradeStrategy::CUSTOMIZE
};
const char* _kDegradeStrategyNames[] = {
  "DROP",
  "CUSTOMIZE"
};
const std::map<int, const char*> _DegradeStrategy_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kDegradeStrategyValues, _kDegradeStrategyNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kDegradeEndValues[] = {
  DegradeEnd::SERVER,
  DegradeEnd::CLIENT
};
const char* _kDegradeEndNames[] = {
  "SERVER",
  "CLIENT"
};
const std::map<int, const char*> _DegradeEnd_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kDegradeEndValues, _kDegradeEndNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kProviderNumCountSwitchValues[] = {
  ProviderNumCountSwitch::APPKEY,
  ProviderNumCountSwitch::HOST
};
const char* _kProviderNumCountSwitchNames[] = {
  "APPKEY",
  "HOST"
};
const std::map<int, const char*> _ProviderNumCountSwitch_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kProviderNumCountSwitchValues, _kProviderNumCountSwitchNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* ConsumerQuota::ascii_fingerprint = "B0753E0550D2E0EEE8E4C566ABE1332D";
const uint8_t ConsumerQuota::binary_fingerprint[16] = {0xB0,0x75,0x3E,0x05,0x50,0xD2,0xE0,0xEE,0xE8,0xE4,0xC5,0x66,0xAB,0xE1,0x33,0x2D};

uint32_t ConsumerQuota::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_consumerAppkey = false;
  bool isset_QPSRatio = false;
  bool isset_degradeStrategy = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->consumerAppkey);
          isset_consumerAppkey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->QPSRatio);
          isset_QPSRatio = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->degradeStrategy = (DegradeStrategy::type)ecast0;
          isset_degradeStrategy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->degradeRedirect);
          this->__isset.degradeRedirect = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_consumerAppkey)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_QPSRatio)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_degradeStrategy)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ConsumerQuota::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ConsumerQuota");
  xfer += oprot->writeFieldBegin("consumerAppkey", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->consumerAppkey);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("QPSRatio", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->QPSRatio);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("degradeStrategy", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->degradeStrategy);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.degradeRedirect) {
    xfer += oprot->writeFieldBegin("degradeRedirect", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->degradeRedirect);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* ProviderQuota::ascii_fingerprint = "22047358A9DAECE7C66355BEFBECCBFB";
const uint8_t ProviderQuota::binary_fingerprint[16] = {0x22,0x04,0x73,0x58,0xA9,0xDA,0xEC,0xE7,0xC6,0x63,0x55,0xBE,0xFB,0xEC,0xCB,0xFB};

uint32_t ProviderQuota::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id = false;
  bool isset_name = false;
  bool isset_providerAppkey = false;
  bool isset_env = false;
  bool isset_method = false;
  bool isset_QPSCapacity = false;
  bool isset_consumerList = false;
  bool isset_status = false;
  bool isset_watchPeriodInSeconds = false;
  bool isset_createTime = false;
  bool isset_updateTime = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          isset_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->providerAppkey);
          isset_providerAppkey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->env);
          isset_env = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->method);
          isset_method = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->QPSCapacity);
          isset_QPSCapacity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->consumerList.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _etype4;
            iprot->readListBegin(_etype4, _size1);
            this->consumerList.resize(_size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              xfer += this->consumerList[_i5].read(iprot);
            }
            iprot->readListEnd();
          }
          isset_consumerList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast6;
          xfer += iprot->readI32(ecast6);
          this->status = (DegradeStatus::type)ecast6;
          isset_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->watchPeriodInSeconds);
          isset_watchPeriodInSeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createTime);
          isset_createTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->updateTime);
          isset_updateTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast7;
          xfer += iprot->readI32(ecast7);
          this->alarm = (AlarmStatus::type)ecast7;
          this->__isset.alarm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast8;
          xfer += iprot->readI32(ecast8);
          this->degradeEnd = (DegradeEnd::type)ecast8;
          this->__isset.degradeEnd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast9;
          xfer += iprot->readI32(ecast9);
          this->proNumCntSwitch = (ProviderNumCountSwitch::type)ecast9;
          this->__isset.proNumCntSwitch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_providerAppkey)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_env)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_method)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_QPSCapacity)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_consumerList)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_status)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_watchPeriodInSeconds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_createTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_updateTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ProviderQuota::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProviderQuota");
  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("providerAppkey", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->providerAppkey);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("env", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->env);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("method", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->method);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("QPSCapacity", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->QPSCapacity);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("consumerList", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->consumerList.size()));
    std::vector<ConsumerQuota> ::const_iterator _iter10;
    for (_iter10 = this->consumerList.begin(); _iter10 != this->consumerList.end(); ++_iter10)
    {
      xfer += (*_iter10).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("watchPeriodInSeconds", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->watchPeriodInSeconds);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("createTime", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->createTime);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("updateTime", ::apache::thrift::protocol::T_I64, 13);
  xfer += oprot->writeI64(this->updateTime);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.alarm) {
    xfer += oprot->writeFieldBegin("alarm", ::apache::thrift::protocol::T_I32, 14);
    xfer += oprot->writeI32((int32_t)this->alarm);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.degradeEnd) {
    xfer += oprot->writeFieldBegin("degradeEnd", ::apache::thrift::protocol::T_I32, 15);
    xfer += oprot->writeI32((int32_t)this->degradeEnd);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.proNumCntSwitch) {
    xfer += oprot->writeFieldBegin("proNumCntSwitch", ::apache::thrift::protocol::T_I32, 16);
    xfer += oprot->writeI32((int32_t)this->proNumCntSwitch);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* DegradeAction::ascii_fingerprint = "47820E180379D7A8F8B8B34E190AF941";
const uint8_t DegradeAction::binary_fingerprint[16] = {0x47,0x82,0x0E,0x18,0x03,0x79,0xD7,0xA8,0xF8,0xB8,0xB3,0x4E,0x19,0x0A,0xF9,0x41};

uint32_t DegradeAction::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id = false;
  bool isset_env = false;
  bool isset_providerAppkey = false;
  bool isset_consumerAppkey = false;
  bool isset_method = false;
  bool isset_degradeRatio = false;
  bool isset_degradeStrategy = false;
  bool isset_timestamp = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          isset_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->env);
          isset_env = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->providerAppkey);
          isset_providerAppkey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->consumerAppkey);
          isset_consumerAppkey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->method);
          isset_method = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->degradeRatio);
          isset_degradeRatio = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast11;
          xfer += iprot->readI32(ecast11);
          this->degradeStrategy = (DegradeStrategy::type)ecast11;
          isset_degradeStrategy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamp);
          isset_timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->degradeRedirect);
          this->__isset.degradeRedirect = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->consumerQPS);
          this->__isset.consumerQPS = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast12;
          xfer += iprot->readI32(ecast12);
          this->degradeEnd = (DegradeEnd::type)ecast12;
          this->__isset.degradeEnd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->extend);
          this->__isset.extend = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_env)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_providerAppkey)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_consumerAppkey)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_method)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_degradeRatio)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_degradeStrategy)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_timestamp)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DegradeAction::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DegradeAction");
  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("env", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->env);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("providerAppkey", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->providerAppkey);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("consumerAppkey", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->consumerAppkey);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("method", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->method);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("degradeRatio", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->degradeRatio);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("degradeStrategy", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32((int32_t)this->degradeStrategy);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->timestamp);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.degradeRedirect) {
    xfer += oprot->writeFieldBegin("degradeRedirect", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->degradeRedirect);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.consumerQPS) {
    xfer += oprot->writeFieldBegin("consumerQPS", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32(this->consumerQPS);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.degradeEnd) {
    xfer += oprot->writeFieldBegin("degradeEnd", ::apache::thrift::protocol::T_I32, 11);
    xfer += oprot->writeI32((int32_t)this->degradeEnd);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.extend) {
    xfer += oprot->writeFieldBegin("extend", ::apache::thrift::protocol::T_STRING, 12);
    xfer += oprot->writeString(this->extend);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

}}} // namespace
