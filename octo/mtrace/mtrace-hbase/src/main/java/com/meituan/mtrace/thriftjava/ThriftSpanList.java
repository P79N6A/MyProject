/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.meituan.mtrace.thriftjava;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ThriftSpanList implements org.apache.thrift.TBase<ThriftSpanList, ThriftSpanList._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftSpanList");

  private static final org.apache.thrift.protocol.TField SPANS_FIELD_DESC = new org.apache.thrift.protocol.TField("spans", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField VAR1_FIELD_DESC = new org.apache.thrift.protocol.TField("var1", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField VAR2_FIELD_DESC = new org.apache.thrift.protocol.TField("var2", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftSpanListStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftSpanListTupleSchemeFactory());
  }

  public List<ThriftSpan> spans; // required
  public int var1; // optional
  public String var2; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SPANS((short)1, "spans"),
    VAR1((short)2, "var1"),
    VAR2((short)3, "var2");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SPANS
          return SPANS;
        case 2: // VAR1
          return VAR1;
        case 3: // VAR2
          return VAR2;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VAR1_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  private _Fields optionals[] = {_Fields.VAR1,_Fields.VAR2};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SPANS, new org.apache.thrift.meta_data.FieldMetaData("spans", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftSpan.class))));
    tmpMap.put(_Fields.VAR1, new org.apache.thrift.meta_data.FieldMetaData("var1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VAR2, new org.apache.thrift.meta_data.FieldMetaData("var2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftSpanList.class, metaDataMap);
  }

  public ThriftSpanList() {
  }

  public ThriftSpanList(
    List<ThriftSpan> spans)
  {
    this();
    this.spans = spans;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftSpanList(ThriftSpanList other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetSpans()) {
      List<ThriftSpan> __this__spans = new ArrayList<ThriftSpan>();
      for (ThriftSpan other_element : other.spans) {
        __this__spans.add(new ThriftSpan(other_element));
      }
      this.spans = __this__spans;
    }
    this.var1 = other.var1;
    if (other.isSetVar2()) {
      this.var2 = other.var2;
    }
  }

  public ThriftSpanList deepCopy() {
    return new ThriftSpanList(this);
  }

  @Override
  public void clear() {
    this.spans = null;
    setVar1IsSet(false);
    this.var1 = 0;
    this.var2 = null;
  }

  public int getSpansSize() {
    return (this.spans == null) ? 0 : this.spans.size();
  }

  public java.util.Iterator<ThriftSpan> getSpansIterator() {
    return (this.spans == null) ? null : this.spans.iterator();
  }

  public void addToSpans(ThriftSpan elem) {
    if (this.spans == null) {
      this.spans = new ArrayList<ThriftSpan>();
    }
    this.spans.add(elem);
  }

  public List<ThriftSpan> getSpans() {
    return this.spans;
  }

  public ThriftSpanList setSpans(List<ThriftSpan> spans) {
    this.spans = spans;
    return this;
  }

  public void unsetSpans() {
    this.spans = null;
  }

  /** Returns true if field spans is set (has been assigned a value) and false otherwise */
  public boolean isSetSpans() {
    return this.spans != null;
  }

  public void setSpansIsSet(boolean value) {
    if (!value) {
      this.spans = null;
    }
  }

  public int getVar1() {
    return this.var1;
  }

  public ThriftSpanList setVar1(int var1) {
    this.var1 = var1;
    setVar1IsSet(true);
    return this;
  }

  public void unsetVar1() {
    __isset_bit_vector.clear(__VAR1_ISSET_ID);
  }

  /** Returns true if field var1 is set (has been assigned a value) and false otherwise */
  public boolean isSetVar1() {
    return __isset_bit_vector.get(__VAR1_ISSET_ID);
  }

  public void setVar1IsSet(boolean value) {
    __isset_bit_vector.set(__VAR1_ISSET_ID, value);
  }

  public String getVar2() {
    return this.var2;
  }

  public ThriftSpanList setVar2(String var2) {
    this.var2 = var2;
    return this;
  }

  public void unsetVar2() {
    this.var2 = null;
  }

  /** Returns true if field var2 is set (has been assigned a value) and false otherwise */
  public boolean isSetVar2() {
    return this.var2 != null;
  }

  public void setVar2IsSet(boolean value) {
    if (!value) {
      this.var2 = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SPANS:
      if (value == null) {
        unsetSpans();
      } else {
        setSpans((List<ThriftSpan>)value);
      }
      break;

    case VAR1:
      if (value == null) {
        unsetVar1();
      } else {
        setVar1((Integer)value);
      }
      break;

    case VAR2:
      if (value == null) {
        unsetVar2();
      } else {
        setVar2((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SPANS:
      return getSpans();

    case VAR1:
      return Integer.valueOf(getVar1());

    case VAR2:
      return getVar2();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SPANS:
      return isSetSpans();
    case VAR1:
      return isSetVar1();
    case VAR2:
      return isSetVar2();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftSpanList)
      return this.equals((ThriftSpanList)that);
    return false;
  }

  public boolean equals(ThriftSpanList that) {
    if (that == null)
      return false;

    boolean this_present_spans = true && this.isSetSpans();
    boolean that_present_spans = true && that.isSetSpans();
    if (this_present_spans || that_present_spans) {
      if (!(this_present_spans && that_present_spans))
        return false;
      if (!this.spans.equals(that.spans))
        return false;
    }

    boolean this_present_var1 = true && this.isSetVar1();
    boolean that_present_var1 = true && that.isSetVar1();
    if (this_present_var1 || that_present_var1) {
      if (!(this_present_var1 && that_present_var1))
        return false;
      if (this.var1 != that.var1)
        return false;
    }

    boolean this_present_var2 = true && this.isSetVar2();
    boolean that_present_var2 = true && that.isSetVar2();
    if (this_present_var2 || that_present_var2) {
      if (!(this_present_var2 && that_present_var2))
        return false;
      if (!this.var2.equals(that.var2))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ThriftSpanList other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ThriftSpanList typedOther = (ThriftSpanList)other;

    lastComparison = Boolean.valueOf(isSetSpans()).compareTo(typedOther.isSetSpans());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpans()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spans, typedOther.spans);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVar1()).compareTo(typedOther.isSetVar1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVar1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.var1, typedOther.var1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVar2()).compareTo(typedOther.isSetVar2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVar2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.var2, typedOther.var2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftSpanList(");
    boolean first = true;

    sb.append("spans:");
    if (this.spans == null) {
      sb.append("null");
    } else {
      sb.append(this.spans);
    }
    first = false;
    if (isSetVar1()) {
      if (!first) sb.append(", ");
      sb.append("var1:");
      sb.append(this.var1);
      first = false;
    }
    if (isSetVar2()) {
      if (!first) sb.append(", ");
      sb.append("var2:");
      if (this.var2 == null) {
        sb.append("null");
      } else {
        sb.append(this.var2);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (spans == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'spans' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftSpanListStandardSchemeFactory implements SchemeFactory {
    public ThriftSpanListStandardScheme getScheme() {
      return new ThriftSpanListStandardScheme();
    }
  }

  private static class ThriftSpanListStandardScheme extends StandardScheme<ThriftSpanList> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftSpanList struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SPANS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.spans = new ArrayList<ThriftSpan>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  ThriftSpan _elem10; // required
                  _elem10 = new ThriftSpan();
                  _elem10.read(iprot);
                  struct.spans.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setSpansIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VAR1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.var1 = iprot.readI32();
              struct.setVar1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VAR2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.var2 = iprot.readString();
              struct.setVar2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftSpanList struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.spans != null) {
        oprot.writeFieldBegin(SPANS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.spans.size()));
          for (ThriftSpan _iter11 : struct.spans)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetVar1()) {
        oprot.writeFieldBegin(VAR1_FIELD_DESC);
        oprot.writeI32(struct.var1);
        oprot.writeFieldEnd();
      }
      if (struct.var2 != null) {
        if (struct.isSetVar2()) {
          oprot.writeFieldBegin(VAR2_FIELD_DESC);
          oprot.writeString(struct.var2);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftSpanListTupleSchemeFactory implements SchemeFactory {
    public ThriftSpanListTupleScheme getScheme() {
      return new ThriftSpanListTupleScheme();
    }
  }

  private static class ThriftSpanListTupleScheme extends TupleScheme<ThriftSpanList> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftSpanList struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.spans.size());
        for (ThriftSpan _iter12 : struct.spans)
        {
          _iter12.write(oprot);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetVar1()) {
        optionals.set(0);
      }
      if (struct.isSetVar2()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetVar1()) {
        oprot.writeI32(struct.var1);
      }
      if (struct.isSetVar2()) {
        oprot.writeString(struct.var2);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftSpanList struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.spans = new ArrayList<ThriftSpan>(_list13.size);
        for (int _i14 = 0; _i14 < _list13.size; ++_i14)
        {
          ThriftSpan _elem15; // required
          _elem15 = new ThriftSpan();
          _elem15.read(iprot);
          struct.spans.add(_elem15);
        }
      }
      struct.setSpansIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.var1 = iprot.readI32();
        struct.setVar1IsSet(true);
      }
      if (incoming.get(1)) {
        struct.var2 = iprot.readString();
        struct.setVar2IsSet(true);
      }
    }
  }

}

