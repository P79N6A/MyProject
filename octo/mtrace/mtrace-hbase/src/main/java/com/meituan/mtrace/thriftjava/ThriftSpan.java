/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.meituan.mtrace.thriftjava;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ThriftSpan implements org.apache.thrift.TBase<ThriftSpan, ThriftSpan._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftSpan");

  private static final org.apache.thrift.protocol.TField TRACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("traceId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SPAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("spanId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SPAN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("spanName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LOCAL_FIELD_DESC = new org.apache.thrift.protocol.TField("local", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField REMOTE_FIELD_DESC = new org.apache.thrift.protocol.TField("remote", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("duration", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField CLIENT_SIDE_FIELD_DESC = new org.apache.thrift.protocol.TField("clientSide", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField ANNOTATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("annotations", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField VAR1_FIELD_DESC = new org.apache.thrift.protocol.TField("var1", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField VAR2_FIELD_DESC = new org.apache.thrift.protocol.TField("var2", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftSpanStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftSpanTupleSchemeFactory());
  }

  public long traceId; // required
  public String spanId; // required
  public String spanName; // required
  public Endpoint local; // required
  public Endpoint remote; // required
  public long start; // required
  public int duration; // required
  public boolean clientSide; // required
  public List<Annotation> annotations; // required
  public String type; // optional
  public int var1; // optional
  public String var2; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRACE_ID((short)1, "traceId"),
    SPAN_ID((short)2, "spanId"),
    SPAN_NAME((short)3, "spanName"),
    LOCAL((short)4, "local"),
    REMOTE((short)5, "remote"),
    START((short)6, "start"),
    DURATION((short)7, "duration"),
    CLIENT_SIDE((short)8, "clientSide"),
    ANNOTATIONS((short)9, "annotations"),
    TYPE((short)10, "type"),
    VAR1((short)11, "var1"),
    VAR2((short)12, "var2");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRACE_ID
          return TRACE_ID;
        case 2: // SPAN_ID
          return SPAN_ID;
        case 3: // SPAN_NAME
          return SPAN_NAME;
        case 4: // LOCAL
          return LOCAL;
        case 5: // REMOTE
          return REMOTE;
        case 6: // START
          return START;
        case 7: // DURATION
          return DURATION;
        case 8: // CLIENT_SIDE
          return CLIENT_SIDE;
        case 9: // ANNOTATIONS
          return ANNOTATIONS;
        case 10: // TYPE
          return TYPE;
        case 11: // VAR1
          return VAR1;
        case 12: // VAR2
          return VAR2;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TRACEID_ISSET_ID = 0;
  private static final int __START_ISSET_ID = 1;
  private static final int __DURATION_ISSET_ID = 2;
  private static final int __CLIENTSIDE_ISSET_ID = 3;
  private static final int __VAR1_ISSET_ID = 4;
  private BitSet __isset_bit_vector = new BitSet(5);
  private _Fields optionals[] = {_Fields.TYPE,_Fields.VAR1,_Fields.VAR2};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRACE_ID, new org.apache.thrift.meta_data.FieldMetaData("traceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SPAN_ID, new org.apache.thrift.meta_data.FieldMetaData("spanId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPAN_NAME, new org.apache.thrift.meta_data.FieldMetaData("spanName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCAL, new org.apache.thrift.meta_data.FieldMetaData("local", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Endpoint.class)));
    tmpMap.put(_Fields.REMOTE, new org.apache.thrift.meta_data.FieldMetaData("remote", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Endpoint.class)));
    tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DURATION, new org.apache.thrift.meta_data.FieldMetaData("duration", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CLIENT_SIDE, new org.apache.thrift.meta_data.FieldMetaData("clientSide", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ANNOTATIONS, new org.apache.thrift.meta_data.FieldMetaData("annotations", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Annotation.class))));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VAR1, new org.apache.thrift.meta_data.FieldMetaData("var1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VAR2, new org.apache.thrift.meta_data.FieldMetaData("var2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftSpan.class, metaDataMap);
  }

  public ThriftSpan() {
  }

  public ThriftSpan(
    long traceId,
    String spanId,
    String spanName,
    Endpoint local,
    Endpoint remote,
    long start,
    int duration,
    boolean clientSide,
    List<Annotation> annotations)
  {
    this();
    this.traceId = traceId;
    setTraceIdIsSet(true);
    this.spanId = spanId;
    this.spanName = spanName;
    this.local = local;
    this.remote = remote;
    this.start = start;
    setStartIsSet(true);
    this.duration = duration;
    setDurationIsSet(true);
    this.clientSide = clientSide;
    setClientSideIsSet(true);
    this.annotations = annotations;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftSpan(ThriftSpan other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.traceId = other.traceId;
    if (other.isSetSpanId()) {
      this.spanId = other.spanId;
    }
    if (other.isSetSpanName()) {
      this.spanName = other.spanName;
    }
    if (other.isSetLocal()) {
      this.local = new Endpoint(other.local);
    }
    if (other.isSetRemote()) {
      this.remote = new Endpoint(other.remote);
    }
    this.start = other.start;
    this.duration = other.duration;
    this.clientSide = other.clientSide;
    if (other.isSetAnnotations()) {
      List<Annotation> __this__annotations = new ArrayList<Annotation>();
      for (Annotation other_element : other.annotations) {
        __this__annotations.add(new Annotation(other_element));
      }
      this.annotations = __this__annotations;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.var1 = other.var1;
    if (other.isSetVar2()) {
      this.var2 = other.var2;
    }
  }

  public ThriftSpan deepCopy() {
    return new ThriftSpan(this);
  }

  @Override
  public void clear() {
    setTraceIdIsSet(false);
    this.traceId = 0;
    this.spanId = null;
    this.spanName = null;
    this.local = null;
    this.remote = null;
    setStartIsSet(false);
    this.start = 0;
    setDurationIsSet(false);
    this.duration = 0;
    setClientSideIsSet(false);
    this.clientSide = false;
    this.annotations = null;
    this.type = null;
    setVar1IsSet(false);
    this.var1 = 0;
    this.var2 = null;
  }

  public long getTraceId() {
    return this.traceId;
  }

  public ThriftSpan setTraceId(long traceId) {
    this.traceId = traceId;
    setTraceIdIsSet(true);
    return this;
  }

  public void unsetTraceId() {
    __isset_bit_vector.clear(__TRACEID_ISSET_ID);
  }

  /** Returns true if field traceId is set (has been assigned a value) and false otherwise */
  public boolean isSetTraceId() {
    return __isset_bit_vector.get(__TRACEID_ISSET_ID);
  }

  public void setTraceIdIsSet(boolean value) {
    __isset_bit_vector.set(__TRACEID_ISSET_ID, value);
  }

  public String getSpanId() {
    return this.spanId;
  }

  public ThriftSpan setSpanId(String spanId) {
    this.spanId = spanId;
    return this;
  }

  public void unsetSpanId() {
    this.spanId = null;
  }

  /** Returns true if field spanId is set (has been assigned a value) and false otherwise */
  public boolean isSetSpanId() {
    return this.spanId != null;
  }

  public void setSpanIdIsSet(boolean value) {
    if (!value) {
      this.spanId = null;
    }
  }

  public String getSpanName() {
    return this.spanName;
  }

  public ThriftSpan setSpanName(String spanName) {
    this.spanName = spanName;
    return this;
  }

  public void unsetSpanName() {
    this.spanName = null;
  }

  /** Returns true if field spanName is set (has been assigned a value) and false otherwise */
  public boolean isSetSpanName() {
    return this.spanName != null;
  }

  public void setSpanNameIsSet(boolean value) {
    if (!value) {
      this.spanName = null;
    }
  }

  public Endpoint getLocal() {
    return this.local;
  }

  public ThriftSpan setLocal(Endpoint local) {
    this.local = local;
    return this;
  }

  public void unsetLocal() {
    this.local = null;
  }

  /** Returns true if field local is set (has been assigned a value) and false otherwise */
  public boolean isSetLocal() {
    return this.local != null;
  }

  public void setLocalIsSet(boolean value) {
    if (!value) {
      this.local = null;
    }
  }

  public Endpoint getRemote() {
    return this.remote;
  }

  public ThriftSpan setRemote(Endpoint remote) {
    this.remote = remote;
    return this;
  }

  public void unsetRemote() {
    this.remote = null;
  }

  /** Returns true if field remote is set (has been assigned a value) and false otherwise */
  public boolean isSetRemote() {
    return this.remote != null;
  }

  public void setRemoteIsSet(boolean value) {
    if (!value) {
      this.remote = null;
    }
  }

  public long getStart() {
    return this.start;
  }

  public ThriftSpan setStart(long start) {
    this.start = start;
    setStartIsSet(true);
    return this;
  }

  public void unsetStart() {
    __isset_bit_vector.clear(__START_ISSET_ID);
  }

  /** Returns true if field start is set (has been assigned a value) and false otherwise */
  public boolean isSetStart() {
    return __isset_bit_vector.get(__START_ISSET_ID);
  }

  public void setStartIsSet(boolean value) {
    __isset_bit_vector.set(__START_ISSET_ID, value);
  }

  public int getDuration() {
    return this.duration;
  }

  public ThriftSpan setDuration(int duration) {
    this.duration = duration;
    setDurationIsSet(true);
    return this;
  }

  public void unsetDuration() {
    __isset_bit_vector.clear(__DURATION_ISSET_ID);
  }

  /** Returns true if field duration is set (has been assigned a value) and false otherwise */
  public boolean isSetDuration() {
    return __isset_bit_vector.get(__DURATION_ISSET_ID);
  }

  public void setDurationIsSet(boolean value) {
    __isset_bit_vector.set(__DURATION_ISSET_ID, value);
  }

  public boolean isClientSide() {
    return this.clientSide;
  }

  public ThriftSpan setClientSide(boolean clientSide) {
    this.clientSide = clientSide;
    setClientSideIsSet(true);
    return this;
  }

  public void unsetClientSide() {
    __isset_bit_vector.clear(__CLIENTSIDE_ISSET_ID);
  }

  /** Returns true if field clientSide is set (has been assigned a value) and false otherwise */
  public boolean isSetClientSide() {
    return __isset_bit_vector.get(__CLIENTSIDE_ISSET_ID);
  }

  public void setClientSideIsSet(boolean value) {
    __isset_bit_vector.set(__CLIENTSIDE_ISSET_ID, value);
  }

  public int getAnnotationsSize() {
    return (this.annotations == null) ? 0 : this.annotations.size();
  }

  public java.util.Iterator<Annotation> getAnnotationsIterator() {
    return (this.annotations == null) ? null : this.annotations.iterator();
  }

  public void addToAnnotations(Annotation elem) {
    if (this.annotations == null) {
      this.annotations = new ArrayList<Annotation>();
    }
    this.annotations.add(elem);
  }

  public List<Annotation> getAnnotations() {
    return this.annotations;
  }

  public ThriftSpan setAnnotations(List<Annotation> annotations) {
    this.annotations = annotations;
    return this;
  }

  public void unsetAnnotations() {
    this.annotations = null;
  }

  /** Returns true if field annotations is set (has been assigned a value) and false otherwise */
  public boolean isSetAnnotations() {
    return this.annotations != null;
  }

  public void setAnnotationsIsSet(boolean value) {
    if (!value) {
      this.annotations = null;
    }
  }

  public String getType() {
    return this.type;
  }

  public ThriftSpan setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getVar1() {
    return this.var1;
  }

  public ThriftSpan setVar1(int var1) {
    this.var1 = var1;
    setVar1IsSet(true);
    return this;
  }

  public void unsetVar1() {
    __isset_bit_vector.clear(__VAR1_ISSET_ID);
  }

  /** Returns true if field var1 is set (has been assigned a value) and false otherwise */
  public boolean isSetVar1() {
    return __isset_bit_vector.get(__VAR1_ISSET_ID);
  }

  public void setVar1IsSet(boolean value) {
    __isset_bit_vector.set(__VAR1_ISSET_ID, value);
  }

  public String getVar2() {
    return this.var2;
  }

  public ThriftSpan setVar2(String var2) {
    this.var2 = var2;
    return this;
  }

  public void unsetVar2() {
    this.var2 = null;
  }

  /** Returns true if field var2 is set (has been assigned a value) and false otherwise */
  public boolean isSetVar2() {
    return this.var2 != null;
  }

  public void setVar2IsSet(boolean value) {
    if (!value) {
      this.var2 = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRACE_ID:
      if (value == null) {
        unsetTraceId();
      } else {
        setTraceId((Long)value);
      }
      break;

    case SPAN_ID:
      if (value == null) {
        unsetSpanId();
      } else {
        setSpanId((String)value);
      }
      break;

    case SPAN_NAME:
      if (value == null) {
        unsetSpanName();
      } else {
        setSpanName((String)value);
      }
      break;

    case LOCAL:
      if (value == null) {
        unsetLocal();
      } else {
        setLocal((Endpoint)value);
      }
      break;

    case REMOTE:
      if (value == null) {
        unsetRemote();
      } else {
        setRemote((Endpoint)value);
      }
      break;

    case START:
      if (value == null) {
        unsetStart();
      } else {
        setStart((Long)value);
      }
      break;

    case DURATION:
      if (value == null) {
        unsetDuration();
      } else {
        setDuration((Integer)value);
      }
      break;

    case CLIENT_SIDE:
      if (value == null) {
        unsetClientSide();
      } else {
        setClientSide((Boolean)value);
      }
      break;

    case ANNOTATIONS:
      if (value == null) {
        unsetAnnotations();
      } else {
        setAnnotations((List<Annotation>)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case VAR1:
      if (value == null) {
        unsetVar1();
      } else {
        setVar1((Integer)value);
      }
      break;

    case VAR2:
      if (value == null) {
        unsetVar2();
      } else {
        setVar2((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRACE_ID:
      return Long.valueOf(getTraceId());

    case SPAN_ID:
      return getSpanId();

    case SPAN_NAME:
      return getSpanName();

    case LOCAL:
      return getLocal();

    case REMOTE:
      return getRemote();

    case START:
      return Long.valueOf(getStart());

    case DURATION:
      return Integer.valueOf(getDuration());

    case CLIENT_SIDE:
      return Boolean.valueOf(isClientSide());

    case ANNOTATIONS:
      return getAnnotations();

    case TYPE:
      return getType();

    case VAR1:
      return Integer.valueOf(getVar1());

    case VAR2:
      return getVar2();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRACE_ID:
      return isSetTraceId();
    case SPAN_ID:
      return isSetSpanId();
    case SPAN_NAME:
      return isSetSpanName();
    case LOCAL:
      return isSetLocal();
    case REMOTE:
      return isSetRemote();
    case START:
      return isSetStart();
    case DURATION:
      return isSetDuration();
    case CLIENT_SIDE:
      return isSetClientSide();
    case ANNOTATIONS:
      return isSetAnnotations();
    case TYPE:
      return isSetType();
    case VAR1:
      return isSetVar1();
    case VAR2:
      return isSetVar2();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftSpan)
      return this.equals((ThriftSpan)that);
    return false;
  }

  public boolean equals(ThriftSpan that) {
    if (that == null)
      return false;

    boolean this_present_traceId = true;
    boolean that_present_traceId = true;
    if (this_present_traceId || that_present_traceId) {
      if (!(this_present_traceId && that_present_traceId))
        return false;
      if (this.traceId != that.traceId)
        return false;
    }

    boolean this_present_spanId = true && this.isSetSpanId();
    boolean that_present_spanId = true && that.isSetSpanId();
    if (this_present_spanId || that_present_spanId) {
      if (!(this_present_spanId && that_present_spanId))
        return false;
      if (!this.spanId.equals(that.spanId))
        return false;
    }

    boolean this_present_spanName = true && this.isSetSpanName();
    boolean that_present_spanName = true && that.isSetSpanName();
    if (this_present_spanName || that_present_spanName) {
      if (!(this_present_spanName && that_present_spanName))
        return false;
      if (!this.spanName.equals(that.spanName))
        return false;
    }

    boolean this_present_local = true && this.isSetLocal();
    boolean that_present_local = true && that.isSetLocal();
    if (this_present_local || that_present_local) {
      if (!(this_present_local && that_present_local))
        return false;
      if (!this.local.equals(that.local))
        return false;
    }

    boolean this_present_remote = true && this.isSetRemote();
    boolean that_present_remote = true && that.isSetRemote();
    if (this_present_remote || that_present_remote) {
      if (!(this_present_remote && that_present_remote))
        return false;
      if (!this.remote.equals(that.remote))
        return false;
    }

    boolean this_present_start = true;
    boolean that_present_start = true;
    if (this_present_start || that_present_start) {
      if (!(this_present_start && that_present_start))
        return false;
      if (this.start != that.start)
        return false;
    }

    boolean this_present_duration = true;
    boolean that_present_duration = true;
    if (this_present_duration || that_present_duration) {
      if (!(this_present_duration && that_present_duration))
        return false;
      if (this.duration != that.duration)
        return false;
    }

    boolean this_present_clientSide = true;
    boolean that_present_clientSide = true;
    if (this_present_clientSide || that_present_clientSide) {
      if (!(this_present_clientSide && that_present_clientSide))
        return false;
      if (this.clientSide != that.clientSide)
        return false;
    }

    boolean this_present_annotations = true && this.isSetAnnotations();
    boolean that_present_annotations = true && that.isSetAnnotations();
    if (this_present_annotations || that_present_annotations) {
      if (!(this_present_annotations && that_present_annotations))
        return false;
      if (!this.annotations.equals(that.annotations))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_var1 = true && this.isSetVar1();
    boolean that_present_var1 = true && that.isSetVar1();
    if (this_present_var1 || that_present_var1) {
      if (!(this_present_var1 && that_present_var1))
        return false;
      if (this.var1 != that.var1)
        return false;
    }

    boolean this_present_var2 = true && this.isSetVar2();
    boolean that_present_var2 = true && that.isSetVar2();
    if (this_present_var2 || that_present_var2) {
      if (!(this_present_var2 && that_present_var2))
        return false;
      if (!this.var2.equals(that.var2))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ThriftSpan other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ThriftSpan typedOther = (ThriftSpan)other;

    lastComparison = Boolean.valueOf(isSetTraceId()).compareTo(typedOther.isSetTraceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traceId, typedOther.traceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpanId()).compareTo(typedOther.isSetSpanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spanId, typedOther.spanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpanName()).compareTo(typedOther.isSetSpanName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpanName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spanName, typedOther.spanName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocal()).compareTo(typedOther.isSetLocal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.local, typedOther.local);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemote()).compareTo(typedOther.isSetRemote());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemote()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remote, typedOther.remote);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStart()).compareTo(typedOther.isSetStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, typedOther.start);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDuration()).compareTo(typedOther.isSetDuration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDuration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.duration, typedOther.duration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientSide()).compareTo(typedOther.isSetClientSide());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientSide()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientSide, typedOther.clientSide);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnnotations()).compareTo(typedOther.isSetAnnotations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnnotations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.annotations, typedOther.annotations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVar1()).compareTo(typedOther.isSetVar1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVar1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.var1, typedOther.var1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVar2()).compareTo(typedOther.isSetVar2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVar2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.var2, typedOther.var2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftSpan(");
    boolean first = true;

    sb.append("traceId:");
    sb.append(this.traceId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("spanId:");
    if (this.spanId == null) {
      sb.append("null");
    } else {
      sb.append(this.spanId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("spanName:");
    if (this.spanName == null) {
      sb.append("null");
    } else {
      sb.append(this.spanName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("local:");
    if (this.local == null) {
      sb.append("null");
    } else {
      sb.append(this.local);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remote:");
    if (this.remote == null) {
      sb.append("null");
    } else {
      sb.append(this.remote);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("start:");
    sb.append(this.start);
    first = false;
    if (!first) sb.append(", ");
    sb.append("duration:");
    sb.append(this.duration);
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientSide:");
    sb.append(this.clientSide);
    first = false;
    if (!first) sb.append(", ");
    sb.append("annotations:");
    if (this.annotations == null) {
      sb.append("null");
    } else {
      sb.append(this.annotations);
    }
    first = false;
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetVar1()) {
      if (!first) sb.append(", ");
      sb.append("var1:");
      sb.append(this.var1);
      first = false;
    }
    if (isSetVar2()) {
      if (!first) sb.append(", ");
      sb.append("var2:");
      if (this.var2 == null) {
        sb.append("null");
      } else {
        sb.append(this.var2);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'traceId' because it's a primitive and you chose the non-beans generator.
    if (spanId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'spanId' was not present! Struct: " + toString());
    }
    if (spanName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'spanName' was not present! Struct: " + toString());
    }
    if (local == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'local' was not present! Struct: " + toString());
    }
    if (remote == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'remote' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'start' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'duration' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'clientSide' because it's a primitive and you chose the non-beans generator.
    if (annotations == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'annotations' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftSpanStandardSchemeFactory implements SchemeFactory {
    public ThriftSpanStandardScheme getScheme() {
      return new ThriftSpanStandardScheme();
    }
  }

  private static class ThriftSpanStandardScheme extends StandardScheme<ThriftSpan> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftSpan struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRACE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.traceId = iprot.readI64();
              struct.setTraceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SPAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.spanId = iprot.readString();
              struct.setSpanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SPAN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.spanName = iprot.readString();
              struct.setSpanNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LOCAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.local = new Endpoint();
              struct.local.read(iprot);
              struct.setLocalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REMOTE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.remote = new Endpoint();
              struct.remote.read(iprot);
              struct.setRemoteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // START
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.start = iprot.readI64();
              struct.setStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.duration = iprot.readI32();
              struct.setDurationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CLIENT_SIDE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.clientSide = iprot.readBool();
              struct.setClientSideIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ANNOTATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.annotations = new ArrayList<Annotation>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  Annotation _elem2; // required
                  _elem2 = new Annotation();
                  _elem2.read(iprot);
                  struct.annotations.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setAnnotationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // VAR1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.var1 = iprot.readI32();
              struct.setVar1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // VAR2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.var2 = iprot.readString();
              struct.setVar2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTraceId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'traceId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStart()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'start' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDuration()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'duration' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetClientSide()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'clientSide' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftSpan struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TRACE_ID_FIELD_DESC);
      oprot.writeI64(struct.traceId);
      oprot.writeFieldEnd();
      if (struct.spanId != null) {
        oprot.writeFieldBegin(SPAN_ID_FIELD_DESC);
        oprot.writeString(struct.spanId);
        oprot.writeFieldEnd();
      }
      if (struct.spanName != null) {
        oprot.writeFieldBegin(SPAN_NAME_FIELD_DESC);
        oprot.writeString(struct.spanName);
        oprot.writeFieldEnd();
      }
      if (struct.local != null) {
        oprot.writeFieldBegin(LOCAL_FIELD_DESC);
        struct.local.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.remote != null) {
        oprot.writeFieldBegin(REMOTE_FIELD_DESC);
        struct.remote.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_FIELD_DESC);
      oprot.writeI64(struct.start);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DURATION_FIELD_DESC);
      oprot.writeI32(struct.duration);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CLIENT_SIDE_FIELD_DESC);
      oprot.writeBool(struct.clientSide);
      oprot.writeFieldEnd();
      if (struct.annotations != null) {
        oprot.writeFieldBegin(ANNOTATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.annotations.size()));
          for (Annotation _iter3 : struct.annotations)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetVar1()) {
        oprot.writeFieldBegin(VAR1_FIELD_DESC);
        oprot.writeI32(struct.var1);
        oprot.writeFieldEnd();
      }
      if (struct.var2 != null) {
        if (struct.isSetVar2()) {
          oprot.writeFieldBegin(VAR2_FIELD_DESC);
          oprot.writeString(struct.var2);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftSpanTupleSchemeFactory implements SchemeFactory {
    public ThriftSpanTupleScheme getScheme() {
      return new ThriftSpanTupleScheme();
    }
  }

  private static class ThriftSpanTupleScheme extends TupleScheme<ThriftSpan> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftSpan struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.traceId);
      oprot.writeString(struct.spanId);
      oprot.writeString(struct.spanName);
      struct.local.write(oprot);
      struct.remote.write(oprot);
      oprot.writeI64(struct.start);
      oprot.writeI32(struct.duration);
      oprot.writeBool(struct.clientSide);
      {
        oprot.writeI32(struct.annotations.size());
        for (Annotation _iter4 : struct.annotations)
        {
          _iter4.write(oprot);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetType()) {
        optionals.set(0);
      }
      if (struct.isSetVar1()) {
        optionals.set(1);
      }
      if (struct.isSetVar2()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetVar1()) {
        oprot.writeI32(struct.var1);
      }
      if (struct.isSetVar2()) {
        oprot.writeString(struct.var2);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftSpan struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.traceId = iprot.readI64();
      struct.setTraceIdIsSet(true);
      struct.spanId = iprot.readString();
      struct.setSpanIdIsSet(true);
      struct.spanName = iprot.readString();
      struct.setSpanNameIsSet(true);
      struct.local = new Endpoint();
      struct.local.read(iprot);
      struct.setLocalIsSet(true);
      struct.remote = new Endpoint();
      struct.remote.read(iprot);
      struct.setRemoteIsSet(true);
      struct.start = iprot.readI64();
      struct.setStartIsSet(true);
      struct.duration = iprot.readI32();
      struct.setDurationIsSet(true);
      struct.clientSide = iprot.readBool();
      struct.setClientSideIsSet(true);
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.annotations = new ArrayList<Annotation>(_list5.size);
        for (int _i6 = 0; _i6 < _list5.size; ++_i6)
        {
          Annotation _elem7; // required
          _elem7 = new Annotation();
          _elem7.read(iprot);
          struct.annotations.add(_elem7);
        }
      }
      struct.setAnnotationsIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.var1 = iprot.readI32();
        struct.setVar1IsSet(true);
      }
      if (incoming.get(2)) {
        struct.var2 = iprot.readString();
        struct.setVar2IsSet(true);
      }
    }
  }

}

